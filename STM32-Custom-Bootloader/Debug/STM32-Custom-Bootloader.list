
STM32-Custom-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de0  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff4  08003ff4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff4  08003ff4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff4  08003ff4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000004d4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ec  200004ec  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000585f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b7  00000000  00000000  000258a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  00027060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000790  00000000  00000000  000278c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e7f  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006295  00000000  00000000  0002ded7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00016930  00000000  00000000  0003416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0004aa9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000214c  00000000  00000000  0004aaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08003f70 	.word	0x08003f70

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08003f70 	.word	0x08003f70

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <BL_Exec_No_Cmd>:
==================================================
  Start Section --> Implementation of each command's function
==================================================
 */

BL_Exec_St BL_Exec_No_Cmd(void){
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <BL_Exec_Connect_To_BL>:

BL_Exec_St BL_Exec_Connect_To_BL(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <BL_Exec_Update_Flag>:

BL_Exec_St BL_Exec_Update_Flag(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	FMI_FlashWriteU32Data_v(UPDATE_FLAG_ADDRESS, UPDATE_FLAG_VALUE);
 8000af8:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <BL_Exec_Update_Flag+0x18>)
 8000afe:	f001 fbf1 	bl	80022e4 <FMI_FlashWriteU32Data_v>
	SCB_SWReset();
 8000b02:	f003 f905 	bl	8003d10 <SCB_SWReset>
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	0807fffc 	.word	0x0807fffc

08000b10 <BL_Exec_Connect_To_App>:

BL_Exec_St BL_Exec_Connect_To_App(void){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <BL_Exec_Update_Version>:

BL_Exec_St BL_Exec_Update_Version(u32 Arg_MajorVersion_u32, u32 Arg_MinorVersion_u32){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <BL_Exec_SET_VALID_IMAGE>:


BL_Exec_St BL_Exec_SET_VALID_IMAGE(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0


	FMI_FlashWriteU32Data_v(VALID_IMAGE_FLAG_ADDRESS, VALID_IMAGE_FLAG_VALUE);
 8000b3c:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <BL_Exec_SET_VALID_IMAGE+0x14>)
 8000b42:	f001 fbcf 	bl	80022e4 <FMI_FlashWriteU32Data_v>

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0807fff8 	.word	0x0807fff8

08000b50 <BL_Exec_Erase_App_IMAGE>:

BL_Exec_St BL_Exec_Erase_App_IMAGE(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	for (u8 L_i_u8 = BL_APP_START_SECTION_NUM; L_i_u8 < BL_SECTORS_NUM;L_i_u8++){
 8000b56:	2302      	movs	r3, #2
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e007      	b.n	8000b6c <BL_Exec_Erase_App_IMAGE+0x1c>
		FMI_EraseFlashSector_v(L_i_u8);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fc0b 	bl	800237c <FMI_EraseFlashSector_v>
	for (u8 L_i_u8 = BL_APP_START_SECTION_NUM; L_i_u8 < BL_SECTORS_NUM;L_i_u8++){
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d9f4      	bls.n	8000b5c <BL_Exec_Erase_App_IMAGE+0xc>
	}

	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <BL_Exec_Erase_Sectors>:

BL_Exec_St BL_Exec_Erase_Sectors(u32 Arg_Sectors_u32){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	/*Each sector represented by a bit in Arg_Sectors_u32
	 * High bit indicates that this sector needed to be erased*/
	for (u8 L_i_u8=0; L_i_u8<31 ; L_i_u8++){
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e00f      	b.n	8000baa <BL_Exec_Erase_Sectors+0x2e>
		if (GET_BIT(Arg_Sectors_u32, L_i_u8)){
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <BL_Exec_Erase_Sectors+0x28>
			FMI_EraseFlashSector_v(L_i_u8);
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fbec 	bl	800237c <FMI_EraseFlashSector_v>
	for (u8 L_i_u8=0; L_i_u8<31 ; L_i_u8++){
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	2b1e      	cmp	r3, #30
 8000bae:	d9ec      	bls.n	8000b8a <BL_Exec_Erase_Sectors+0xe>
		}
	}
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <BL_Exec_Erase_Range_Of_Sectors>:

BL_Exec_St BL_Exec_Erase_Range_Of_Sectors(u32 Arg_FromSector_u32, u32 Arg_ToSector_u32){
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]

	for (u8 L_i_u8 = Arg_FromSector_u32; L_i_u8 <= Arg_ToSector_u32;L_i_u8++){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e007      	b.n	8000bda <BL_Exec_Erase_Range_Of_Sectors+0x20>
		FMI_EraseFlashSector_v(L_i_u8);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fbd4 	bl	800237c <FMI_EraseFlashSector_v>
	for (u8 L_i_u8 = Arg_FromSector_u32; L_i_u8 <= Arg_ToSector_u32;L_i_u8++){
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d2f3      	bcs.n	8000bca <BL_Exec_Erase_Range_Of_Sectors+0x10>
	}
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <BL_Jump_To_App>:



BL_Exec_St BL_Jump_To_App(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	typedef void (*APP_CALL) (void);
	APP_CALL App_To_Call = *(APP_CALL *)( (u32)BL_APP_ADDRESS +4);
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <BL_Jump_To_App+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	607b      	str	r3, [r7, #4]
	SCB_SetVectorTableOffset_void(BL_APP_ADDRESS, SCB_VectorTableInFlash);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <BL_Jump_To_App+0x28>)
 8000bfc:	f003 f860 	bl	8003cc0 <SCB_SetVectorTableOffset_void>
	App_To_Call();
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4798      	blx	r3
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08008004 	.word	0x08008004
 8000c14:	08008000 	.word	0x08008000

08000c18 <BL_Exec_WRITE_32BIT_DATA_AT>:

BL_Exec_St BL_Exec_WRITE_32BIT_DATA_AT(u32 Arg_Address_u32, u32 Arg_Data_u32){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	FMI_FlashWriteU32Data_v(Arg_Address_u32, Arg_Data_u32);
 8000c22:	6839      	ldr	r1, [r7, #0]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f001 fb5d 	bl	80022e4 <FMI_FlashWriteU32Data_v>
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <BL_Exec_WRITE_16BIT_DATA_AT>:

BL_Exec_St BL_Exec_WRITE_16BIT_DATA_AT(u32 Arg_Address_u32, u32 Arg_Data_u32){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	FMI_FlashWriteU16Data_v(Arg_Address_u32, Arg_Data_u32);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f001 fb01 	bl	800224c <FMI_FlashWriteU16Data_v>
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <BL_Exec_WRITE_8BIT_DATA_AT>:

BL_Exec_St BL_Exec_WRITE_8BIT_DATA_AT(u32 Arg_Address_u32, u32 Arg_Data_u32){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	FMI_FlashWriteU8Data_v(Arg_Address_u32, Arg_Data_u32);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f001 faa5 	bl	80021b4 <FMI_FlashWriteU8Data_v>
	return BL_CMD_EXEC_SUCCEED_STATUS;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <BL_Pooling_v>:
==================================================
  End Section --> Implementation of each command's function
==================================================
 */

void BL_Pooling_v(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
#if BOOTLOADER_TYPE == USART_BOOTLOADER
	if (UITxSerialDataFrame.Command == HOST_CMD_JumpToApp){
		SCB_SWReset();
	}
#elif BOOTLOADER_TYPE == CAN_BOOTLOADER
	if ((VALID_IMAGE_FLAG_VALUE != UTILS_READ_ADDRESS(VALID_IMAGE_FLAG_ADDRESS))){
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <BL_Pooling_v+0x88>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 3f5a 	cmp.w	r3, #1515870810	; 0x5a5a5a5a
 8000c82:	d007      	beq.n	8000c94 <BL_Pooling_v+0x20>
		CAN_Receive_v(&G_Communication_CAN_Cfg, &G_ReceiveMessage_CAN_RxData, STD_MAX_DELAY, NULL);
 8000c84:	2300      	movs	r3, #0
 8000c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8a:	491d      	ldr	r1, [pc, #116]	; (8000d00 <BL_Pooling_v+0x8c>)
 8000c8c:	481d      	ldr	r0, [pc, #116]	; (8000d04 <BL_Pooling_v+0x90>)
 8000c8e:	f001 f873 	bl	8001d78 <CAN_Receive_v>
 8000c92:	e009      	b.n	8000ca8 <BL_Pooling_v+0x34>
	}
	else{
		u32 L_TimeOutErr_u32;
		/*wait for x second*/
		CAN_Receive_v(&G_Communication_CAN_Cfg, &G_ReceiveMessage_CAN_RxData, 1000*CONFIG_BL_CAN_TIME_TO_WAIT_UPDATE_IN_SECONDS, &L_TimeOutErr_u32);
 8000c94:	463b      	mov	r3, r7
 8000c96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c9a:	4919      	ldr	r1, [pc, #100]	; (8000d00 <BL_Pooling_v+0x8c>)
 8000c9c:	4819      	ldr	r0, [pc, #100]	; (8000d04 <BL_Pooling_v+0x90>)
 8000c9e:	f001 f86b 	bl	8001d78 <CAN_Receive_v>
		if (STD_TimeOutError == L_TimeOutErr_u32){
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d024      	beq.n	8000cf2 <BL_Pooling_v+0x7e>
			return ;
		}
	}

	UITxSerialDataFrame.Command = G_ReceiveMessage_CAN_RxData.ID - CONFIG_CAN_DEVICE_ID;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <BL_Pooling_v+0x8c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3b10      	subs	r3, #16
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <BL_Pooling_v+0x94>)
 8000cb0:	6013      	str	r3, [r2, #0]
	if (HOST_CMD_JumpToApp == UITxSerialDataFrame.Command){
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <BL_Pooling_v+0x94>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b09      	cmp	r3, #9
 8000cb8:	d101      	bne.n	8000cbe <BL_Pooling_v+0x4a>
		SCB_SWReset();
 8000cba:	f003 f829 	bl	8003d10 <SCB_SWReset>
	}
	for (u8 L_i_u8 = 0; L_i_u8< G_ReceiveMessage_CAN_RxData.DataLength; ++L_i_u8){
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e00a      	b.n	8000cda <BL_Pooling_v+0x66>
		UITxSerialDataFrame.Buffer_u8[8+L_i_u8] = G_ReceiveMessage_CAN_RxData.ReceivedData[L_i_u8];
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3308      	adds	r3, #8
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <BL_Pooling_v+0x8c>)
 8000ccc:	440a      	add	r2, r1
 8000cce:	7911      	ldrb	r1, [r2, #4]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <BL_Pooling_v+0x94>)
 8000cd2:	54d1      	strb	r1, [r2, r3]
	for (u8 L_i_u8 = 0; L_i_u8< G_ReceiveMessage_CAN_RxData.DataLength; ++L_i_u8){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <BL_Pooling_v+0x8c>)
 8000cdc:	7b9b      	ldrb	r3, [r3, #14]
 8000cde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d3eb      	bcc.n	8000cc4 <BL_Pooling_v+0x50>
	}
	ExecuteCommand();
 8000cec:	f000 f874 	bl	8000dd8 <ExecuteCommand>
 8000cf0:	e000      	b.n	8000cf4 <BL_Pooling_v+0x80>
			return ;
 8000cf2:	bf00      	nop


#endif
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0807fff8 	.word	0x0807fff8
 8000d00:	20000050 	.word	0x20000050
 8000d04:	20000034 	.word	0x20000034
 8000d08:	20000060 	.word	0x20000060

08000d0c <BL_Init_v>:

void BL_Init_v(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

	DMA_EnableDMA_v(&L_DMA_Configurations, CONFIG_DMA_CHANNEL_STREAM);
	USART_EnableUSART_v(&GS_BLUSART_USART_Cfg);

#elif BOOTLOADER_TYPE == CAN_BOOTLOADER
	G_Communication_CAN_Cfg.TimeTriggeredEn = STD_DIASBLE;
 8000d12:	4a30      	ldr	r2, [pc, #192]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d14:	7813      	ldrb	r3, [r2, #0]
 8000d16:	f36f 0300 	bfc	r3, #0, #1
 8000d1a:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.AutoBusOffEn = STD_DIASBLE;
 8000d1c:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d1e:	7813      	ldrb	r3, [r2, #0]
 8000d20:	f36f 0341 	bfc	r3, #1, #1
 8000d24:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.AutoWakeUpEn = STD_DIASBLE;
 8000d26:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d28:	7813      	ldrb	r3, [r2, #0]
 8000d2a:	f36f 0382 	bfc	r3, #2, #1
 8000d2e:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.AutoReTransmissionEn = STD_ENABLE;
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d32:	7813      	ldrb	r3, [r2, #0]
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.ReceiveFifoLockOnOverrunEn = STD_DIASBLE;
 8000d3a:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d3c:	7813      	ldrb	r3, [r2, #0]
 8000d3e:	f36f 1304 	bfc	r3, #4, #1
 8000d42:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.TransmitFifoPriority = CAN_TRANSMIT_FIFO_PRIORITY_BY_MSG_ID;
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d46:	7813      	ldrb	r3, [r2, #0]
 8000d48:	f36f 1345 	bfc	r3, #5, #1
 8000d4c:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.OperatingMode = CAN_OPERATING_MODE_NORMAL;
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d50:	7813      	ldrb	r3, [r2, #0]
 8000d52:	f36f 1387 	bfc	r3, #6, #2
 8000d56:	7013      	strb	r3, [r2, #0]
	G_Communication_CAN_Cfg.GPIOInstanceId = CONFIG_CAN_GPIO_ID;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d5a:	2242      	movs	r2, #66	; 0x42
 8000d5c:	71da      	strb	r2, [r3, #7]
	G_Communication_CAN_Cfg.GPIOPins = (1<<CONFIG_CAN_RxPIN) | (1<<CONFIG_CAN_TxPIN);
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d64:	811a      	strh	r2, [r3, #8]
	G_Communication_CAN_Cfg.InstanceId = CONFIG_CAN_INSTANCE_ID;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	705a      	strb	r2, [r3, #1]
	G_Communication_CAN_Cfg.BaudRatePrescaller = CONFIG_CAN_BAUDRATE_PRESCALLER;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	805a      	strh	r2, [r3, #2]
	G_Communication_CAN_Cfg.TimeSegment_1 = CONFIG_CAN_TIME_SEGMENT_1;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d74:	220d      	movs	r2, #13
 8000d76:	711a      	strb	r2, [r3, #4]
	G_Communication_CAN_Cfg.TimeSegment_2 = CONFIG_CAN_TIME_SEGMENT_2;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	715a      	strb	r2, [r3, #5]
	G_Communication_CAN_Cfg.ResychronizationJump = CONFIG_CAN_RESYNCHRONIZATION_JUMP;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	719a      	strb	r2, [r3, #6]

	CAN_Config_v(&G_Communication_CAN_Cfg);
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <BL_Init_v+0xc8>)
 8000d86:	f000 f8d1 	bl	8000f2c <CAN_Config_v>

	/*Configure Receive Filter*/
	CAN_FilterConfig L_RxFilter_CAN_FilterConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 f8e5 	bl	8003f60 <memset>
	L_RxFilter_CAN_FilterConfig.FilterType = CAN_FILTER_TYPE_1ID32_1MASK32;
 8000d96:	2300      	movs	r3, #0
 8000d98:	703b      	strb	r3, [r7, #0]
	L_RxFilter_CAN_FilterConfig.FilterId = CONFIG_CAN_FILTER_ID;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	707b      	strb	r3, [r7, #1]
	L_RxFilter_CAN_FilterConfig.ID1 = CONFIG_CAN_FILTER_MESSAGE_ID;
 8000d9e:	231f      	movs	r3, #31
 8000da0:	607b      	str	r3, [r7, #4]
	L_RxFilter_CAN_FilterConfig.Mask1 = CONFIG_CAN_FILTER_MESSAGE_MASK;
 8000da2:	f06f 031f 	mvn.w	r3, #31
 8000da6:	617b      	str	r3, [r7, #20]
	L_RxFilter_CAN_FilterConfig.FIFONumber = CAN_FILTER_FIFONUMBER_1;
 8000da8:	7f3b      	ldrb	r3, [r7, #28]
 8000daa:	f36f 0300 	bfc	r3, #0, #1
 8000dae:	773b      	strb	r3, [r7, #28]
	L_RxFilter_CAN_FilterConfig.IdType = CAN_Standard_Id;
 8000db0:	7f3b      	ldrb	r3, [r7, #28]
 8000db2:	f36f 0341 	bfc	r3, #1, #1
 8000db6:	773b      	strb	r3, [r7, #28]
	L_RxFilter_CAN_FilterConfig.FrameType = CAN_Data_Frame;
 8000db8:	7f3b      	ldrb	r3, [r7, #28]
 8000dba:	f36f 0382 	bfc	r3, #2, #1
 8000dbe:	773b      	strb	r3, [r7, #28]
	CAN_AddRxFilter_v(&G_Communication_CAN_Cfg, &L_RxFilter_CAN_FilterConfig);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <BL_Init_v+0xc8>)
 8000dc6:	f000 fd37 	bl	8001838 <CAN_AddRxFilter_v>
#else
#error "Please select available bootloader type"
#endif
}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000034 	.word	0x20000034

08000dd8 <ExecuteCommand>:

void ExecuteCommand(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

	BL_Exec_St L_Status_BL_Exec_St;
	u32 L_ReturnValue_u32 = -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	60bb      	str	r3, [r7, #8]

	switch(UITxSerialDataFrame.Command){
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <ExecuteCommand+0x148>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b0c      	cmp	r3, #12
 8000dea:	d87a      	bhi.n	8000ee2 <ExecuteCommand+0x10a>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <ExecuteCommand+0x1c>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e29 	.word	0x08000e29
 8000df8:	08000e33 	.word	0x08000e33
 8000dfc:	08000e3d 	.word	0x08000e3d
 8000e00:	08000e47 	.word	0x08000e47
 8000e04:	08000e51 	.word	0x08000e51
 8000e08:	08000e67 	.word	0x08000e67
 8000e0c:	08000e71 	.word	0x08000e71
 8000e10:	08000e7b 	.word	0x08000e7b
 8000e14:	08000e8b 	.word	0x08000e8b
 8000e18:	08000ee3 	.word	0x08000ee3
 8000e1c:	08000ea1 	.word	0x08000ea1
 8000e20:	08000eb7 	.word	0x08000eb7
 8000e24:	08000ecd 	.word	0x08000ecd
	case HOST_CMD_NO_CMD:
		L_Status_BL_Exec_St = BL_Exec_No_Cmd();
 8000e28:	f7ff fe54 	bl	8000ad4 <BL_Exec_No_Cmd>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e30:	e057      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_ConnectToBL:
		L_Status_BL_Exec_St = BL_Exec_Connect_To_BL();
 8000e32:	f7ff fe57 	bl	8000ae4 <BL_Exec_Connect_To_BL>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
		break;
 8000e3a:	e052      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_ConnectToApp:
		L_Status_BL_Exec_St = BL_Exec_Connect_To_App();
 8000e3c:	f7ff fe68 	bl	8000b10 <BL_Exec_Connect_To_App>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
		break;
 8000e44:	e04d      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_SET_UPDATE_FLAG:
		L_Status_BL_Exec_St = BL_Exec_Update_Flag();
 8000e46:	f7ff fe55 	bl	8000af4 <BL_Exec_Update_Flag>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4e:	e048      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_UPDATE_VERSION:
		L_Status_BL_Exec_St = BL_Exec_Update_Version(UITxSerialDataFrame.Version_MajorVersion, UITxSerialDataFrame.Version_MinorVersion);
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <ExecuteCommand+0x148>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <ExecuteCommand+0x148>)
 8000e56:	68d2      	ldr	r2, [r2, #12]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe60 	bl	8000b20 <BL_Exec_Update_Version>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e03d      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_SET_VALID_IMAGE:
		L_Status_BL_Exec_St = BL_Exec_SET_VALID_IMAGE();
 8000e66:	f7ff fe67 	bl	8000b38 <BL_Exec_SET_VALID_IMAGE>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6e:	e038      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_ERASE_APP_IMAGE:
		L_Status_BL_Exec_St = BL_Exec_Erase_App_IMAGE();
 8000e70:	f7ff fe6e 	bl	8000b50 <BL_Exec_Erase_App_IMAGE>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
		break;
 8000e78:	e033      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_ERASE_SECTORS:
		L_Status_BL_Exec_St = BL_Exec_Erase_Sectors(UITxSerialDataFrame.EraseSectors_Sectors);
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <ExecuteCommand+0x148>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe7c 	bl	8000b7c <BL_Exec_Erase_Sectors>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	e02b      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_ERASE_RANGE_OF_SECTORS:
		L_Status_BL_Exec_St = BL_Exec_Erase_Range_Of_Sectors(UITxSerialDataFrame.EraseSectors_FromSector, UITxSerialDataFrame.EraseSectors_ToSector);
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <ExecuteCommand+0x148>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <ExecuteCommand+0x148>)
 8000e90:	68d2      	ldr	r2, [r2, #12]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe90 	bl	8000bba <BL_Exec_Erase_Range_Of_Sectors>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e9e:	e020      	b.n	8000ee2 <ExecuteCommand+0x10a>


	case HOST_CMD_WRITE_32BIT_DATA_AT:
		L_Status_BL_Exec_St = BL_Exec_WRITE_32BIT_DATA_AT(UITxSerialDataFrame.Write_Address, UITxSerialDataFrame.Write_Value);
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <ExecuteCommand+0x148>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <ExecuteCommand+0x148>)
 8000ea6:	68d2      	ldr	r2, [r2, #12]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff feb4 	bl	8000c18 <BL_Exec_WRITE_32BIT_DATA_AT>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
		break;
 8000eb4:	e015      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_WRITE_16BIT_DATA_AT:
		L_Status_BL_Exec_St = BL_Exec_WRITE_16BIT_DATA_AT(UITxSerialDataFrame.Write_Address, UITxSerialDataFrame.Write_Value);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <ExecuteCommand+0x148>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <ExecuteCommand+0x148>)
 8000ebc:	68d2      	ldr	r2, [r2, #12]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feb7 	bl	8000c34 <BL_Exec_WRITE_16BIT_DATA_AT>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
		break;
 8000eca:	e00a      	b.n	8000ee2 <ExecuteCommand+0x10a>

	case HOST_CMD_WRITE_8BIT_DATA_AT:
		L_Status_BL_Exec_St = BL_Exec_WRITE_8BIT_DATA_AT(UITxSerialDataFrame.Write_Address, UITxSerialDataFrame.Write_Value);
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <ExecuteCommand+0x148>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <ExecuteCommand+0x148>)
 8000ed2:	68d2      	ldr	r2, [r2, #12]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff febc 	bl	8000c54 <BL_Exec_WRITE_8BIT_DATA_AT>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
		break;
 8000ee0:	bf00      	nop

	}

	u8 L_TransmitArr [] = {(u8)L_Status_BL_Exec_St, (u8)L_ReturnValue_u32};
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	713b      	strb	r3, [r7, #4]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	717b      	strb	r3, [r7, #5]
			ARRAY_LENGTH(L_TransmitArr),
			STD_MAX_DELAY, NULL);


#elif BOOTLOADER_TYPE == CAN_BOOTLOADER
	G_TransmitMessage_CAN_TxData.DataLength = ARRAY_LENGTH(L_TransmitArr);
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <ExecuteCommand+0x14c>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	721a      	strb	r2, [r3, #8]
	G_TransmitMessage_CAN_TxData.DataPtr = L_TransmitArr;
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <ExecuteCommand+0x14c>)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	6053      	str	r3, [r2, #4]
	G_TransmitMessage_CAN_TxData.FrameType = CAN_Data_Frame;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <ExecuteCommand+0x14c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	729a      	strb	r2, [r3, #10]
	G_TransmitMessage_CAN_TxData.ID = CONFIG_CAN_ECHO_MESSAGE_ID;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <ExecuteCommand+0x14c>)
 8000f00:	2242      	movs	r2, #66	; 0x42
 8000f02:	601a      	str	r2, [r3, #0]
	G_TransmitMessage_CAN_TxData.IdType = CAN_Standard_Id;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <ExecuteCommand+0x14c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	725a      	strb	r2, [r3, #9]
	CAN_SendData_v(
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <ExecuteCommand+0x14c>)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <ExecuteCommand+0x150>)
 8000f14:	f000 fa8c 	bl	8001430 <CAN_SendData_v>

#error "Please select available bootloader type"

#endif

}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000060 	.word	0x20000060
 8000f24:	20000044 	.word	0x20000044
 8000f28:	20000034 	.word	0x20000034

08000f2c <CAN_Config_v>:
/*
==================================================
  Start Section --> Functions implementation.
==================================================
 */
void CAN_Config_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg){
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b08d      	sub	sp, #52	; 0x34
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Cfg L_CANConfig_GPIO_Cfg;
	L_CANConfig_GPIO_Cfg.InstanceId = Arg_conf_cpcCAN_Cfg->GPIOInstanceId;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	79db      	ldrb	r3, [r3, #7]
 8000f40:	763b      	strb	r3, [r7, #24]
	L_CANConfig_GPIO_Cfg.Mode = GPIO_MODE_ALTERNATE_FUNCTION;
 8000f42:	2302      	movs	r3, #2
 8000f44:	83bb      	strh	r3, [r7, #28]
	L_CANConfig_GPIO_Cfg.PINs = Arg_conf_cpcCAN_Cfg->GPIOPins;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	891b      	ldrh	r3, [r3, #8]
 8000f4a:	837b      	strh	r3, [r7, #26]
	L_CANConfig_GPIO_Cfg.OutputSpeed = GPIO_OUTPUT_SPEED_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	843b      	strh	r3, [r7, #32]
	L_CANConfig_GPIO_Cfg.OutputType = GPIO_OUTPUT_TYPE_PUSH_PULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	83fb      	strh	r3, [r7, #30]
	L_CANConfig_GPIO_Cfg.PullUpPullDownResistor = GPIO_RESISTOR_NO_PULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	847b      	strh	r3, [r7, #34]	; 0x22



	/*Mapping Pins*/
	u8 L_CANMappingPins[] = {
 8000f58:	f640 1309 	movw	r3, #2313	; 0x909
 8000f5c:	82bb      	strh	r3, [r7, #20]
			CAN1_MAP_PIN,
			CAN2_MAP_PIN,
	};

	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f64:	e01d      	b.n	8000fa2 <CAN_Config_v+0x76>
		if (GET_BIT(Arg_conf_cpcCAN_Cfg->GPIOPins, L_i_u8)){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	891b      	ldrh	r3, [r3, #8]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f70:	fa42 f303 	asr.w	r3, r2, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00d      	beq.n	8000f98 <CAN_Config_v+0x6c>
			GPIO_MapGPIOPIN_v(
					&L_CANConfig_GPIO_Cfg,
					L_i_u8,
					L_CANMappingPins[L_CANInstanceId_u8-1]);
 8000f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f80:	3b01      	subs	r3, #1
			GPIO_MapGPIOPIN_v(
 8000f82:	3330      	adds	r3, #48	; 0x30
 8000f84:	443b      	add	r3, r7
 8000f86:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000f8a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fbc2 	bl	800271c <GPIO_MapGPIOPIN_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8000f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	d9dd      	bls.n	8000f66 <CAN_Config_v+0x3a>
		}
	}

	GPIO_Config_v(&L_CANConfig_GPIO_Cfg);
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fa3a 	bl	8002428 <GPIO_Config_v>
	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
			RCC_GetPeripheralBus_u8((u32)CAN_ID(L_CANInstanceId_u8)),
 8000fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a9e      	ldr	r2, [pc, #632]	; (8001234 <CAN_Config_v+0x308>)
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fc99 	bl	80038f8 <RCC_GetPeripheralBus_u8>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461c      	mov	r4, r3
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fcfa 	bl	80039c8 <RCC_GetRCCCANBit_u8>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 fbf3 	bl	80037c4 <RCC_EnableClock_v>
			RCC_GetRCCCANBit_u8(L_CANInstanceId_u8));

	/*Reset registers*/
	CAN_ID(L_CANInstanceId_u8)->MCR = 0x10002;
 8000fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4a93      	ldr	r2, [pc, #588]	; (8001234 <CAN_Config_v+0x308>)
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b92      	ldr	r3, [pc, #584]	; (8001238 <CAN_Config_v+0x30c>)
 8000fee:	6013      	str	r3, [r2, #0]
	CAN_ID(L_CANInstanceId_u8)->MSR = 0xc02;
 8000ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a8f      	ldr	r2, [pc, #572]	; (8001234 <CAN_Config_v+0x308>)
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f640 4302 	movw	r3, #3074	; 0xc02
 8001002:	6053      	str	r3, [r2, #4]
	CAN_ID(L_CANInstanceId_u8)->TSR = 0x1c000000;
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001008:	3b01      	subs	r3, #1
 800100a:	4a8a      	ldr	r2, [pc, #552]	; (8001234 <CAN_Config_v+0x308>)
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	461a      	mov	r2, r3
 8001012:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8001016:	6093      	str	r3, [r2, #8]
	CAN_ID(L_CANInstanceId_u8)->RFxR[0] = 0x0;
 8001018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800101c:	3b01      	subs	r3, #1
 800101e:	4a85      	ldr	r2, [pc, #532]	; (8001234 <CAN_Config_v+0x308>)
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	461a      	mov	r2, r3
 8001026:	2300      	movs	r3, #0
 8001028:	60d3      	str	r3, [r2, #12]
	CAN_ID(L_CANInstanceId_u8)->RFxR[1] = 0x0;
 800102a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102e:	3b01      	subs	r3, #1
 8001030:	4a80      	ldr	r2, [pc, #512]	; (8001234 <CAN_Config_v+0x308>)
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	461a      	mov	r2, r3
 8001038:	2300      	movs	r3, #0
 800103a:	6113      	str	r3, [r2, #16]
	CAN_ID(L_CANInstanceId_u8)->IER = 0x0;
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	3b01      	subs	r3, #1
 8001042:	4a7c      	ldr	r2, [pc, #496]	; (8001234 <CAN_Config_v+0x308>)
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	461a      	mov	r2, r3
 800104a:	2300      	movs	r3, #0
 800104c:	6153      	str	r3, [r2, #20]
	CAN_ID(L_CANInstanceId_u8)->ESR = 0x0;
 800104e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001052:	3b01      	subs	r3, #1
 8001054:	4a77      	ldr	r2, [pc, #476]	; (8001234 <CAN_Config_v+0x308>)
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	461a      	mov	r2, r3
 800105c:	2300      	movs	r3, #0
 800105e:	6193      	str	r3, [r2, #24]
	CAN_ID(L_CANInstanceId_u8)->BTR = 0x1230000;
 8001060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001064:	3b01      	subs	r3, #1
 8001066:	4a73      	ldr	r2, [pc, #460]	; (8001234 <CAN_Config_v+0x308>)
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	461a      	mov	r2, r3
 800106e:	4b73      	ldr	r3, [pc, #460]	; (800123c <CAN_Config_v+0x310>)
 8001070:	61d3      	str	r3, [r2, #28]


	/*Begin Configurations*/
	/* Enable or disable time triggered communication.*/
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->TimeTriggeredEn){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d010      	beq.n	80010a2 <CAN_Config_v+0x176>
		SET_BIT(
 8001080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001084:	3b01      	subs	r3, #1
 8001086:	4a6b      	ldr	r2, [pc, #428]	; (8001234 <CAN_Config_v+0x308>)
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001092:	3a01      	subs	r2, #1
 8001094:	4967      	ldr	r1, [pc, #412]	; (8001234 <CAN_Config_v+0x308>)
 8001096:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800109a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e00f      	b.n	80010c2 <CAN_Config_v+0x196>


	}
	else{

		CLEAR_BIT(
 80010a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a6:	3b01      	subs	r3, #1
 80010a8:	4a62      	ldr	r2, [pc, #392]	; (8001234 <CAN_Config_v+0x308>)
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010b4:	3a01      	subs	r2, #1
 80010b6:	495f      	ldr	r1, [pc, #380]	; (8001234 <CAN_Config_v+0x308>)
 80010b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c0:	6013      	str	r3, [r2, #0]
	 * by hardware once 128 occurrence of 11 recessive bits have been monitored.
	 *
	 * When Disabling this mode, Bus-Off state is left on software request, once 128 occurances of
	 * 11 recessive bits have been monitored and software has first set and cleared the INRQ bit of the CAN_MCR
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoBusOffEn){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d010      	beq.n	80010f2 <CAN_Config_v+0x1c6>
		SET_BIT(
 80010d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a57      	ldr	r2, [pc, #348]	; (8001234 <CAN_Config_v+0x308>)
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010e2:	3a01      	subs	r2, #1
 80010e4:	4953      	ldr	r1, [pc, #332]	; (8001234 <CAN_Config_v+0x308>)
 80010e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e00f      	b.n	8001112 <CAN_Config_v+0x1e6>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_ABOM);

	}
	else{
		CLEAR_BIT(
 80010f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <CAN_Config_v+0x308>)
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001104:	3a01      	subs	r2, #1
 8001106:	494b      	ldr	r1, [pc, #300]	; (8001234 <CAN_Config_v+0x308>)
 8001108:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800110c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001110:	6013      	str	r3, [r2, #0]
	 * This mode controls the behavior of the CAN hardware on message reception during sleep mode.
	 * When Enabling this mode, Sleep mode is left automatically by hardware on CAN message detection
	 *
	 * When Disabling this mode, Sleep mode is left on software request by clearing the SLEEP bit of the CAN_MCR register.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoWakeUpEn){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d010      	beq.n	8001142 <CAN_Config_v+0x216>
		SET_BIT(
 8001120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001124:	3b01      	subs	r3, #1
 8001126:	4a43      	ldr	r2, [pc, #268]	; (8001234 <CAN_Config_v+0x308>)
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001132:	3a01      	subs	r2, #1
 8001134:	493f      	ldr	r1, [pc, #252]	; (8001234 <CAN_Config_v+0x308>)
 8001136:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e00f      	b.n	8001162 <CAN_Config_v+0x236>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_AWUM);

	}
	else{
		CLEAR_BIT(
 8001142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001146:	3b01      	subs	r3, #1
 8001148:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <CAN_Config_v+0x308>)
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001154:	3a01      	subs	r2, #1
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <CAN_Config_v+0x308>)
 8001158:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800115c:	f023 0320 	bic.w	r3, r3, #32
 8001160:	6013      	str	r3, [r2, #0]
	 * until it has been successfully transmitted according to the CAN standard.
	 *
	 * When Disabling this mode, Message will be transmitted only once independently of
	 * the transmission result.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoReTransmissionEn){
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d010      	beq.n	8001192 <CAN_Config_v+0x266>
		CLEAR_BIT(
 8001170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001174:	3b01      	subs	r3, #1
 8001176:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <CAN_Config_v+0x308>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001182:	3a01      	subs	r2, #1
 8001184:	492b      	ldr	r1, [pc, #172]	; (8001234 <CAN_Config_v+0x308>)
 8001186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800118a:	f023 0310 	bic.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e00f      	b.n	80011b2 <CAN_Config_v+0x286>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_NART);
	}
	else{
		SET_BIT(
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001196:	3b01      	subs	r3, #1
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <CAN_Config_v+0x308>)
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011a4:	3a01      	subs	r2, #1
 80011a6:	4923      	ldr	r1, [pc, #140]	; (8001234 <CAN_Config_v+0x308>)
 80011a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6013      	str	r3, [r2, #0]
	 * and once a receive FIFO is full the next incoming message will be discarded.
	 *
	 * When Disabling this mode, Receive FIFO is not-locked against overrun,
	 * and once a receive FIFO is full the next incoming message will override the previous one.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->ReceiveFifoLockOnOverrunEn){
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d010      	beq.n	80011e2 <CAN_Config_v+0x2b6>
		SET_BIT(
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <CAN_Config_v+0x308>)
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011d2:	3a01      	subs	r2, #1
 80011d4:	4917      	ldr	r1, [pc, #92]	; (8001234 <CAN_Config_v+0x308>)
 80011d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e00f      	b.n	8001202 <CAN_Config_v+0x2d6>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_RFLM);

	}
	else{
		CLEAR_BIT(
 80011e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <CAN_Config_v+0x308>)
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011f4:	3a01      	subs	r2, #1
 80011f6:	490f      	ldr	r1, [pc, #60]	; (8001234 <CAN_Config_v+0x308>)
 80011f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011fc:	f023 0308 	bic.w	r3, r3, #8
 8001200:	6013      	str	r3, [r2, #0]
	}
	/* Select the priority of Transmit FIFO whether
	 * priority is driven by ID of the message, or
	 * priority is driven by the request order.
	 * */
	if (CAN_TRANSMIT_FIFO_PRIORITY_BY_REQ_ORDER == Arg_conf_cpcCAN_Cfg->TransmitFifoPriority){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d017      	beq.n	8001240 <CAN_Config_v+0x314>
		SET_BIT(
 8001210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001214:	3b01      	subs	r3, #1
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <CAN_Config_v+0x308>)
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001222:	3a01      	subs	r2, #1
 8001224:	4903      	ldr	r1, [pc, #12]	; (8001234 <CAN_Config_v+0x308>)
 8001226:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e01d      	b.n	800126e <CAN_Config_v+0x342>
 8001232:	bf00      	nop
 8001234:	08003fb8 	.word	0x08003fb8
 8001238:	00010002 	.word	0x00010002
 800123c:	01230000 	.word	0x01230000
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_TXFP);

	}
	else if (CAN_TRANSMIT_FIFO_PRIORITY_BY_MSG_ID == Arg_conf_cpcCAN_Cfg->TransmitFifoPriority){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <CAN_Config_v+0x342>
		CLEAR_BIT(
 800124e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001252:	3b01      	subs	r3, #1
 8001254:	4a74      	ldr	r2, [pc, #464]	; (8001428 <CAN_Config_v+0x4fc>)
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001260:	3a01      	subs	r2, #1
 8001262:	4971      	ldr	r1, [pc, #452]	; (8001428 <CAN_Config_v+0x4fc>)
 8001264:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6013      	str	r3, [r2, #0]
	else{

	}

	/*Enter Initialization Mode*/
	SET_BIT(
 800126e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001272:	3b01      	subs	r3, #1
 8001274:	4a6c      	ldr	r2, [pc, #432]	; (8001428 <CAN_Config_v+0x4fc>)
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001280:	3a01      	subs	r2, #1
 8001282:	4969      	ldr	r1, [pc, #420]	; (8001428 <CAN_Config_v+0x4fc>)
 8001284:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_INRQ);

	while(!(
 800128e:	bf00      	nop
			!GET_BIT(CAN_ID(L_CANInstanceId_u8)->MSR,
 8001290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001294:	3b01      	subs	r3, #1
 8001296:	4a64      	ldr	r2, [pc, #400]	; (8001428 <CAN_Config_v+0x4fc>)
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	f003 0301 	and.w	r3, r3, #1
	while(!(
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <CAN_Config_v+0x392>
					CAN_MSR_SLAK) )
			&&
			(GET_BIT(CAN_ID(L_CANInstanceId_u8)->MSR,
 80012a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a5e      	ldr	r2, [pc, #376]	; (8001428 <CAN_Config_v+0x4fc>)
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0301 	and.w	r3, r3, #1
			&&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e8      	bne.n	8001290 <CAN_Config_v+0x364>
					CAN_MSR_INAK)));
	/*Exit Sleep Mode.*/
	CLEAR_BIT(
 80012be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c2:	3b01      	subs	r3, #1
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <CAN_Config_v+0x4fc>)
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012d0:	3a01      	subs	r2, #1
 80012d2:	4955      	ldr	r1, [pc, #340]	; (8001428 <CAN_Config_v+0x4fc>)
 80012d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012d8:	f023 0302 	bic.w	r3, r3, #2
 80012dc:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_SLEEP);

	/*Interrupt*/
	CAN_ID(L_CANInstanceId_u8)->IER = Arg_conf_cpcCAN_Cfg->Interrupt;
 80012de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a50      	ldr	r2, [pc, #320]	; (8001428 <CAN_Config_v+0x4fc>)
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	6153      	str	r3, [r2, #20]
	/*Mapping between USART interrupt and It's corresponding NVIC*/

	u8 L_CANInterruptMapping_u8[2][4] = {
 80012f2:	4a4e      	ldr	r2, [pc, #312]	; (800142c <CAN_Config_v+0x500>)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fc:	e883 0003 	stmia.w	r3, {r0, r1}
			{NVIC_CAN1_TX, NVIC_CAN1_RX0, NVIC_CAN1_RX1, NVIC_CAN1_SCE},
			{NVIC_CAN2_TX, NVIC_CAN2_RX0, NVIC_CAN2_RX1, NVIC_CAN2_SCE}};

	if (0 != (Arg_conf_cpcCAN_Cfg->Interrupt & CAN_INTERRUPT_TRANSMIT_EMPTY) ){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <CAN_Config_v+0x3f6>
		NVIC_EnableInterrupt_v(L_CANInterruptMapping_u8[Arg_conf_cpcCAN_Cfg->InstanceId-1][0]);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	3b01      	subs	r3, #1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	3330      	adds	r3, #48	; 0x30
 8001316:	443b      	add	r3, r7
 8001318:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fc9d 	bl	8003c5c <NVIC_EnableInterrupt_v>
	) ){
		NVIC_EnableInterrupt_v(L_CANInterruptMapping_u8[Arg_conf_cpcCAN_Cfg->InstanceId-1][3]);
	}

	/*Configure test mode.*/
	u32 L_BitTimingRegisterValue_u32=0;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
	switch (Arg_conf_cpcCAN_Cfg->OperatingMode){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d020      	beq.n	8001376 <CAN_Config_v+0x44a>
 8001334:	2b03      	cmp	r3, #3
 8001336:	dc03      	bgt.n	8001340 <CAN_Config_v+0x414>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d00a      	beq.n	8001352 <CAN_Config_v+0x426>
 800133c:	2b02      	cmp	r3, #2
 800133e:	d011      	beq.n	8001364 <CAN_Config_v+0x438>
	case CAN_OPERATING_MODE_NORMAL:
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001350:	e01a      	b.n	8001388 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_LOOPBACK:
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
		SET_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001362:	e011      	b.n	8001388 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_SILENT:
		SET_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001374:	e008      	b.n	8001388 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_LoopbackWithSilent:
		SET_BIT(L_BitTimingRegisterValue_u32, CAN_BTR_SILM);
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
		SET_BIT(L_BitTimingRegisterValue_u32, CAN_BTR_LBKM);
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001386:	bf00      	nop
	}
	/*Baud Rate Configurations*/

	L_BitTimingRegisterValue_u32 |= ((Arg_conf_cpcCAN_Cfg->BaudRatePrescaller-1)&0x3F);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	3b01      	subs	r3, #1
 800138e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001394:	4313      	orrs	r3, r2
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->TimeSegment_1-1)<<CAN_BTR_TS1) & 0xF0000);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	3b01      	subs	r3, #1
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a6:	4313      	orrs	r3, r2
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->TimeSegment_2-1)<<CAN_BTR_TS2) & 0x700000);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	795b      	ldrb	r3, [r3, #5]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	051b      	lsls	r3, r3, #20
 80013b2:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80013b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b8:	4313      	orrs	r3, r2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->ResychronizationJump-1)<<CAN_BTR_SJW) & 0x3000000);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80013c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ca:	4313      	orrs	r3, r2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_ID(L_CANInstanceId_u8)->BTR = L_BitTimingRegisterValue_u32;
 80013ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <CAN_Config_v+0x4fc>)
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	461a      	mov	r2, r3
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	61d3      	str	r3, [r2, #28]
	/*Enter Normal mode by clearing CAN_MCR_SLEEP bit and CAN_MCR_INRQ bit.*/
	CLEAR_BIT(
 80013e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <CAN_Config_v+0x4fc>)
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013f2:	3a01      	subs	r2, #1
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <CAN_Config_v+0x4fc>)
 80013f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_INRQ);
	CLEAR_BIT(
 8001400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001404:	3b01      	subs	r3, #1
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <CAN_Config_v+0x4fc>)
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001412:	3a01      	subs	r2, #1
 8001414:	4904      	ldr	r1, [pc, #16]	; (8001428 <CAN_Config_v+0x4fc>)
 8001416:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800141a:	f023 0302 	bic.w	r3, r3, #2
 800141e:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_SLEEP);
}
 8001420:	bf00      	nop
 8001422:	3734      	adds	r7, #52	; 0x34
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	08003fb8 	.word	0x08003fb8
 800142c:	08003f88 	.word	0x08003f88

08001430 <CAN_SendData_v>:

void CAN_SendData_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_TxData const * const Arg_TransmitData_cpcCAN_TxData,
		const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]

	u8 L_TimeoutCheckCondition_u8;

	Utils_TimeoutChecker L_timeout_Utils_TimeoutChecker;
	Utils_TimeoutChecker_Init(&L_timeout_Utils_TimeoutChecker, Arg_ToutVal_Cu32);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fbc5 	bl	8003bd4 <Utils_TimeoutChecker_Init>




	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	u8 L_FreeMailBoxIndex_u8 = 255;
 8001452:	23ff      	movs	r3, #255	; 0xff
 8001454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*Search for empty mail boc*/
	while(255 == L_FreeMailBoxIndex_u8){
 8001458:	e03f      	b.n	80014da <CAN_SendData_v+0xaa>
		L_TimeoutCheckCondition_u8 = Utils_IsTimeoutOccurred_u8(&L_timeout_Utils_TimeoutChecker);
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fbde 	bl	8003c20 <Utils_IsTimeoutOccurred_u8>
 8001464:	4603      	mov	r3, r0
 8001466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if ((STD_TRUE == L_TimeoutCheckCondition_u8) ){
 800146a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <CAN_SendData_v+0x52>
			if (NULL != Arg_ToutErr_pCu32){
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 81d9 	beq.w	800182c <CAN_SendData_v+0x3fc>
				*Arg_ToutErr_pCu32 = STD_TimeOutError;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e1d5      	b.n	800182e <CAN_SendData_v+0x3fe>
			}

			return ;
		}
		else if (STD_FALSE == L_TimeoutCheckCondition_u8){
 8001482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <CAN_SendData_v+0x66>
			if (NULL != Arg_ToutErr_pCu32){
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <CAN_SendData_v+0x66>
				*Arg_ToutErr_pCu32 = STD_NoTimeOutError;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
		else{

		}


		for (u8 L_MailBoxIdx_u8 = 0; L_MailBoxIdx_u8 <CAN_TRANSMIT_MAILBOX_NUMS ;L_MailBoxIdx_u8++){
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800149c:	e019      	b.n	80014d2 <CAN_SendData_v+0xa2>
			if (GET_BIT(CAN_ID(L_CANInstanceId_u8)->TSR, (CAN_TSR_TME + L_MailBoxIdx_u8))){
 800149e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4ac3      	ldr	r2, [pc, #780]	; (80017b4 <CAN_SendData_v+0x384>)
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b0:	331a      	adds	r3, #26
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <CAN_SendData_v+0x98>
				L_FreeMailBoxIndex_u8 = L_MailBoxIdx_u8;
 80014be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80014c6:	e008      	b.n	80014da <CAN_SendData_v+0xaa>
		for (u8 L_MailBoxIdx_u8 = 0; L_MailBoxIdx_u8 <CAN_TRANSMIT_MAILBOX_NUMS ;L_MailBoxIdx_u8++){
 80014c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014cc:	3301      	adds	r3, #1
 80014ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d9e1      	bls.n	800149e <CAN_SendData_v+0x6e>
	while(255 == L_FreeMailBoxIndex_u8){
 80014da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	d0bb      	beq.n	800145a <CAN_SendData_v+0x2a>
			}
		}
	}

	/*Reset TX mailbox identifier register.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR = 0;
 80014e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4ab2      	ldr	r2, [pc, #712]	; (80017b4 <CAN_SendData_v+0x384>)
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f4:	3318      	adds	r3, #24
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	/*Reset mailbox datalength control and time-stamp control register.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDTR = 0;
 80014fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001502:	3b01      	subs	r3, #1
 8001504:	4aab      	ldr	r2, [pc, #684]	; (80017b4 <CAN_SendData_v+0x384>)
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	461a      	mov	r2, r3
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001510:	3318      	adds	r3, #24
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	3304      	adds	r3, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

	/*Configure Data length code.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDTR|= (Arg_TransmitData_cpcCAN_TxData->DataLength&0xF);
 800151c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001520:	3b01      	subs	r3, #1
 8001522:	4aa4      	ldr	r2, [pc, #656]	; (80017b4 <CAN_SendData_v+0x384>)
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	461a      	mov	r2, r3
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800152e:	3318      	adds	r3, #24
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	3304      	adds	r3, #4
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	7a1b      	ldrb	r3, [r3, #8]
 800153c:	f003 020f 	and.w	r2, r3, #15
 8001540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001544:	3b01      	subs	r3, #1
 8001546:	489b      	ldr	r0, [pc, #620]	; (80017b4 <CAN_SendData_v+0x384>)
 8001548:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800154c:	4618      	mov	r0, r3
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001552:	430a      	orrs	r2, r1
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4403      	add	r3, r0
 800155a:	3304      	adds	r3, #4
 800155c:	601a      	str	r2, [r3, #0]

	/*Configure identifier and it's type whether it's standard or extended.*/
	switch(Arg_TransmitData_cpcCAN_TxData->IdType){
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	7a5b      	ldrb	r3, [r3, #9]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <CAN_SendData_v+0x13c>
 8001566:	2b01      	cmp	r3, #1
 8001568:	d03b      	beq.n	80015e2 <CAN_SendData_v+0x1b2>
 800156a:	e075      	b.n	8001658 <CAN_SendData_v+0x228>
	case CAN_Standard_Id:
		/*Set standard id value.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR|=(Arg_TransmitData_cpcCAN_TxData->ID<<CAN_TIxR_STID);
 800156c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001570:	3b01      	subs	r3, #1
 8001572:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <CAN_SendData_v+0x384>)
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	461a      	mov	r2, r3
 800157a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800157e:	3318      	adds	r3, #24
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4413      	add	r3, r2
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	055a      	lsls	r2, r3, #21
 800158c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001590:	3b01      	subs	r3, #1
 8001592:	4888      	ldr	r0, [pc, #544]	; (80017b4 <CAN_SendData_v+0x384>)
 8001594:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001598:	4618      	mov	r0, r3
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	430a      	orrs	r2, r1
 80015a0:	3318      	adds	r3, #24
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4403      	add	r3, r0
 80015a6:	601a      	str	r2, [r3, #0]
		/*Clear TIxR to configure that it's standard.*/
		CLEAR_BIT(
 80015a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4a81      	ldr	r2, [pc, #516]	; (80017b4 <CAN_SendData_v+0x384>)
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	461a      	mov	r2, r3
 80015b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ba:	3318      	adds	r3, #24
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	497a      	ldr	r1, [pc, #488]	; (80017b4 <CAN_SendData_v+0x384>)
 80015ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ce:	4619      	mov	r1, r3
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	3318      	adds	r3, #24
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	440b      	add	r3, r1
 80015de:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_IDE);
		break;
 80015e0:	e03a      	b.n	8001658 <CAN_SendData_v+0x228>

	case CAN_Extended_Id:
		/*Set Extended id value.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR|=(Arg_TransmitData_cpcCAN_TxData->ID<<CAN_TIxR_EXID);
 80015e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <CAN_SendData_v+0x384>)
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f4:	3318      	adds	r3, #24
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	00da      	lsls	r2, r3, #3
 8001602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	486a      	ldr	r0, [pc, #424]	; (80017b4 <CAN_SendData_v+0x384>)
 800160a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800160e:	4618      	mov	r0, r3
 8001610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001614:	430a      	orrs	r2, r1
 8001616:	3318      	adds	r3, #24
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4403      	add	r3, r0
 800161c:	601a      	str	r2, [r3, #0]
		/*Set TIxR to configure that it's extended.*/
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR, CAN_TIxR_IDE);
 800161e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001622:	3b01      	subs	r3, #1
 8001624:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <CAN_SendData_v+0x384>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	461a      	mov	r2, r3
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001630:	3318      	adds	r3, #24
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800163c:	3b01      	subs	r3, #1
 800163e:	495d      	ldr	r1, [pc, #372]	; (80017b4 <CAN_SendData_v+0x384>)
 8001640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001644:	4619      	mov	r1, r3
 8001646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164a:	f042 0204 	orr.w	r2, r2, #4
 800164e:	3318      	adds	r3, #24
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	601a      	str	r2, [r3, #0]
		break;
 8001656:	bf00      	nop
	}

	/*Configure Frame type whether it's data frame or remote frame*/
	switch(Arg_TransmitData_cpcCAN_TxData->FrameType){
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	7a9b      	ldrb	r3, [r3, #10]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <CAN_SendData_v+0x238>
 8001660:	2b01      	cmp	r3, #1
 8001662:	f000 80a9 	beq.w	80017b8 <CAN_SendData_v+0x388>
 8001666:	e0c4      	b.n	80017f2 <CAN_SendData_v+0x3c2>
	case CAN_Data_Frame:
		CLEAR_BIT(
 8001668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166c:	3b01      	subs	r3, #1
 800166e:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <CAN_SendData_v+0x384>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	461a      	mov	r2, r3
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167a:	3318      	adds	r3, #24
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001686:	3b01      	subs	r3, #1
 8001688:	494a      	ldr	r1, [pc, #296]	; (80017b4 <CAN_SendData_v+0x384>)
 800168a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800168e:	4619      	mov	r1, r3
 8001690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	3318      	adds	r3, #24
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_RTR);

		/*Reset Mailbox data low and high register.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR = 0;
 80016a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <CAN_SendData_v+0x384>)
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	461a      	mov	r2, r3
 80016ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR = 0;
 80016be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <CAN_SendData_v+0x384>)
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

		for (u8 L_i_u8 = 0; L_i_u8 <Arg_TransmitData_cpcCAN_TxData->DataLength ;L_i_u8++){
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016e2:	e05f      	b.n	80017a4 <CAN_SendData_v+0x374>
			if (L_i_u8 > 3){
 80016e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d92c      	bls.n	8001746 <CAN_SendData_v+0x316>
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR
 80016ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <CAN_SendData_v+0x384>)
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	461a      	mov	r2, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8%4));
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001710:	440b      	add	r3, r1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	4618      	mov	r0, r3
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR
 8001726:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800172a:	3b01      	subs	r3, #1
 800172c:	4921      	ldr	r1, [pc, #132]	; (80017b4 <CAN_SendData_v+0x384>)
 800172e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001732:	4619      	mov	r1, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8%4));
 8001734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001738:	4302      	orrs	r2, r0
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e029      	b.n	800179a <CAN_SendData_v+0x36a>
			}
			else {
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR
 8001746:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <CAN_SendData_v+0x384>)
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	461a      	mov	r2, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8));
 8001754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800176a:	440b      	add	r3, r1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	4618      	mov	r0, r3
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR
 800177c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001780:	3b01      	subs	r3, #1
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <CAN_SendData_v+0x384>)
 8001784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001788:	4619      	mov	r1, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8));
 800178a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178e:	4302      	orrs	r2, r0
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	440b      	add	r3, r1
 8001794:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001798:	601a      	str	r2, [r3, #0]
		for (u8 L_i_u8 = 0; L_i_u8 <Arg_TransmitData_cpcCAN_TxData->DataLength ;L_i_u8++){
 800179a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800179e:	3301      	adds	r3, #1
 80017a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d399      	bcc.n	80016e4 <CAN_SendData_v+0x2b4>
			}
		}
		break;
 80017b0:	e01f      	b.n	80017f2 <CAN_SendData_v+0x3c2>
 80017b2:	bf00      	nop
 80017b4:	08003fb8 	.word	0x08003fb8

	case CAN_Remote_Frame:
		SET_BIT(
 80017b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <CAN_SendData_v+0x404>)
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ca:	3318      	adds	r3, #24
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <CAN_SendData_v+0x404>)
 80017da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017de:	4619      	mov	r1, r3
 80017e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e4:	f042 0202 	orr.w	r2, r2, #2
 80017e8:	3318      	adds	r3, #24
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	440b      	add	r3, r1
 80017ee:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_RTR);
		break;
 80017f0:	bf00      	nop
	}

	/*Transmit Request of Mailbox*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR, CAN_TIxR_TXRQ);
 80017f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <CAN_SendData_v+0x404>)
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	461a      	mov	r2, r3
 8001800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001804:	3318      	adds	r3, #24
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001810:	3b01      	subs	r3, #1
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <CAN_SendData_v+0x404>)
 8001814:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001818:	4619      	mov	r1, r3
 800181a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	3318      	adds	r3, #24
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	440b      	add	r3, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e000      	b.n	800182e <CAN_SendData_v+0x3fe>
			return ;
 800182c:	bf00      	nop
}
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	08003fb8 	.word	0x08003fb8

08001838 <CAN_AddRxFilter_v>:

void CAN_AddRxFilter_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_FilterConfig *Arg_FilterCfg_CAN_FilterConfig){
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	72fb      	strb	r3, [r7, #11]
	u8 L_FilterId_u8 = Arg_FilterCfg_CAN_FilterConfig->FilterId;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	72bb      	strb	r3, [r7, #10]
	u8 L_FilterScale_u8;
	u8 L_FrameType_u8 = Arg_FilterCfg_CAN_FilterConfig->FrameType;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	7f1b      	ldrb	r3, [r3, #28]
 8001852:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	727b      	strb	r3, [r7, #9]
	u8 L_IdType_u8 = Arg_FilterCfg_CAN_FilterConfig->IdType;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	723b      	strb	r3, [r7, #8]

	u32 L_FiR1Val_u32 = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
	u32 L_FiR2Val_u32 = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]


	/*Set filter initialization mode.*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	3b01      	subs	r3, #1
 8001872:	4ab1      	ldr	r2, [pc, #708]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800187c:	7afa      	ldrb	r2, [r7, #11]
 800187e:	3a01      	subs	r2, #1
 8001880:	49ad      	ldr	r1, [pc, #692]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001882:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/*Deactivate Filter*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FA1R, L_FilterId_u8);
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	3b01      	subs	r3, #1
 8001892:	4aa9      	ldr	r2, [pc, #676]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800189c:	7aba      	ldrb	r2, [r7, #10]
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	4610      	mov	r0, r2
 80018a8:	7afa      	ldrb	r2, [r7, #11]
 80018aa:	3a01      	subs	r2, #1
 80018ac:	49a2      	ldr	r1, [pc, #648]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 80018ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018b2:	4003      	ands	r3, r0
 80018b4:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	switch(Arg_FilterCfg_CAN_FilterConfig->FIFONumber){
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7f1b      	ldrb	r3, [r3, #28]
 80018bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d015      	beq.n	80018f2 <CAN_AddRxFilter_v+0xba>
	case CAN_FILTER_FIFONUMBER_1:
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FFA1R, L_FilterId_u8);
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018d4:	7aba      	ldrb	r2, [r7, #10]
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	43d2      	mvns	r2, r2
 80018de:	4610      	mov	r0, r2
 80018e0:	7afa      	ldrb	r2, [r7, #11]
 80018e2:	3a01      	subs	r2, #1
 80018e4:	4994      	ldr	r1, [pc, #592]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 80018e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018ea:	4003      	ands	r3, r0
 80018ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		break;
 80018f0:	e014      	b.n	800191c <CAN_AddRxFilter_v+0xe4>

	case CAN_FILTER_FIFONUMBER_2:
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FFA1R, L_FilterId_u8);
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001900:	7aba      	ldrb	r2, [r7, #10]
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	4610      	mov	r0, r2
 800190a:	7afa      	ldrb	r2, [r7, #11]
 800190c:	3a01      	subs	r2, #1
 800190e:	498a      	ldr	r1, [pc, #552]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001910:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001914:	4303      	orrs	r3, r0
 8001916:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		break;
 800191a:	bf00      	nop
	}




	switch (Arg_FilterCfg_CAN_FilterConfig->FilterType){
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	f200 819c 	bhi.w	8001c5e <CAN_AddRxFilter_v+0x426>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <CAN_AddRxFilter_v+0xf4>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	080019e5 	.word	0x080019e5
 8001934:	08001a8b 	.word	0x08001a8b
 8001938:	08001b77 	.word	0x08001b77
	/*Filter scale = CAN_FILTER_SCALE_SINGLE32*/
	case CAN_FILTER_TYPE_1ID32_1MASK32:
		L_FilterScale_u8 = CAN_Filter_Scale_Single;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]

		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a7c      	ldr	r2, [pc, #496]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800194e:	7aba      	ldrb	r2, [r7, #10]
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4610      	mov	r0, r2
 8001958:	7afa      	ldrb	r2, [r7, #11]
 800195a:	3a01      	subs	r2, #1
 800195c:	4976      	ldr	r1, [pc, #472]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 800195e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001962:	4303      	orrs	r3, r0
 8001964:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	3b01      	subs	r3, #1
 800196c:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001976:	7aba      	ldrb	r2, [r7, #10]
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	43d2      	mvns	r2, r2
 8001980:	4610      	mov	r0, r2
 8001982:	7afa      	ldrb	r2, [r7, #11]
 8001984:	3a01      	subs	r2, #1
 8001986:	496c      	ldr	r1, [pc, #432]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001988:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800198c:	4003      	ands	r3, r0
 800198e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7f1b      	ldrb	r3, [r3, #28]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <CAN_AddRxFilter_v+0x182>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB3);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB3);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21);
		}

		break;
 80019b8:	e14a      	b.n	8001c50 <CAN_AddRxFilter_v+0x418>
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 8143 	bne.w	8001c50 <CAN_AddRxFilter_v+0x418>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
		break;
 80019e2:	e135      	b.n	8001c50 <CAN_AddRxFilter_v+0x418>

		/*Filter scale = CAN_FILTER_SCALE_SINGLE32*/
	case CAN_FILTER_TYPE_2ID32:
		L_FilterScale_u8 = CAN_Filter_Scale_Single;
 80019e4:	2300      	movs	r3, #0
 80019e6:	75fb      	strb	r3, [r7, #23]

		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80019f6:	7aba      	ldrb	r2, [r7, #10]
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	4610      	mov	r0, r2
 8001a00:	7afa      	ldrb	r2, [r7, #11]
 8001a02:	3a01      	subs	r2, #1
 8001a04:	494c      	ldr	r1, [pc, #304]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001a06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a0a:	4303      	orrs	r3, r0
 8001a0c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a1e:	7aba      	ldrb	r2, [r7, #10]
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	4610      	mov	r0, r2
 8001a28:	7afa      	ldrb	r2, [r7, #11]
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	4942      	ldr	r1, [pc, #264]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a32:	4303      	orrs	r3, r0
 8001a34:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00c      	beq.n	8001a60 <CAN_AddRxFilter_v+0x228>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB3);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB3);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
		}
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21);
		}
		break;
 8001a5e:	e0f9      	b.n	8001c54 <CAN_AddRxFilter_v+0x41c>
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 80f2 	bne.w	8001c54 <CAN_AddRxFilter_v+0x41c>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	055b      	lsls	r3, r3, #21
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	055b      	lsls	r3, r3, #21
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
		break;
 8001a88:	e0e4      	b.n	8001c54 <CAN_AddRxFilter_v+0x41c>

		/*Filter scale = CAN_FILTER_SCALE_DUAL16*/
	case CAN_FILTER_TYPE_2ID16_2MASK16:
		L_FilterScale_u8 = CAN_Filter_Scale_Dual;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]

		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a9c:	7aba      	ldrb	r2, [r7, #10]
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	43d2      	mvns	r2, r2
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	7afa      	ldrb	r2, [r7, #11]
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	4922      	ldr	r1, [pc, #136]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001aae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ab2:	4003      	ands	r3, r0
 8001ab4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ac6:	7aba      	ldrb	r2, [r7, #10]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	43d2      	mvns	r2, r2
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	7afa      	ldrb	r2, [r7, #11]
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	4918      	ldr	r1, [pc, #96]	; (8001b38 <CAN_AddRxFilter_v+0x300>)
 8001ad8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001adc:	4003      	ands	r3, r0
 8001ade:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7f1b      	ldrb	r3, [r3, #28]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d025      	beq.n	8001b3c <CAN_AddRxFilter_v+0x304>
			L_FiR1Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID1&0x38000)>>15);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0bdb      	lsrs	r3, r3, #15
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->Mask1&0x38000)>>15)<<CAN_FiRx_FB16);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	0bdb      	lsrs	r3, r3, #15
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]

			L_FiR2Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID2&0x38000)>>15);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0bdb      	lsrs	r3, r3, #15
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->Mask2&0x38000)>>15)<<CAN_FiRx_FB16);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	0bdb      	lsrs	r3, r3, #15
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21;

			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB5;
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask2<<CAN_FiRx_FB21;
		}
		break;
 8001b34:	e090      	b.n	8001c58 <CAN_AddRxFilter_v+0x420>
 8001b36:	bf00      	nop
 8001b38:	08003fb8 	.word	0x08003fb8
		else if(CAN_Standard_Id == L_IdType_u8){
 8001b3c:	7a3b      	ldrb	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 808a 	bne.w	8001c58 <CAN_AddRxFilter_v+0x420>
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB5;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	015b      	lsls	r3, r3, #5
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	055b      	lsls	r3, r3, #21
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB5;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	015b      	lsls	r3, r3, #5
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask2<<CAN_FiRx_FB21;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	055b      	lsls	r3, r3, #21
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
		break;
 8001b74:	e070      	b.n	8001c58 <CAN_AddRxFilter_v+0x420>

		/*Filter scale = CAN_FILTER_SCALE_DUAL16*/
	case CAN_FILTER_TYPE_4ID16:
		L_FilterScale_u8 = CAN_Filter_Scale_Dual;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]

		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4a7d      	ldr	r2, [pc, #500]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b88:	7aba      	ldrb	r2, [r7, #10]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	4610      	mov	r0, r2
 8001b94:	7afa      	ldrb	r2, [r7, #11]
 8001b96:	3a01      	subs	r2, #1
 8001b98:	4976      	ldr	r1, [pc, #472]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001b9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bb2:	7aba      	ldrb	r2, [r7, #10]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4610      	mov	r0, r2
 8001bbc:	7afa      	ldrb	r2, [r7, #11]
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	496c      	ldr	r1, [pc, #432]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001bc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == L_IdType_u8){
 8001bcc:	7a3b      	ldrb	r3, [r7, #8]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d122      	bne.n	8001c18 <CAN_AddRxFilter_v+0x3e0>
			L_FiR1Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID1&0x38000)>>15);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0bdb      	lsrs	r3, r3, #15
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->ID2&0x38000)>>15)<<CAN_FiRx_FB16);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0bdb      	lsrs	r3, r3, #15
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

			L_FiR2Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID3&0x38000)>>15);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0bdb      	lsrs	r3, r3, #15
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->ID4&0x38000)>>15)<<CAN_FiRx_FB16);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	0bdb      	lsrs	r3, r3, #15
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21;

			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID3<<CAN_FiRx_FB5;
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID4<<CAN_FiRx_FB21;
		}
		break;
 8001c16:	e021      	b.n	8001c5c <CAN_AddRxFilter_v+0x424>
		else if(CAN_Standard_Id == L_IdType_u8){
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11e      	bne.n	8001c5c <CAN_AddRxFilter_v+0x424>
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB5;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	015b      	lsls	r3, r3, #5
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID3<<CAN_FiRx_FB5;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID4<<CAN_FiRx_FB21;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
		break;
 8001c4e:	e005      	b.n	8001c5c <CAN_AddRxFilter_v+0x424>
		break;
 8001c50:	bf00      	nop
 8001c52:	e004      	b.n	8001c5e <CAN_AddRxFilter_v+0x426>
		break;
 8001c54:	bf00      	nop
 8001c56:	e002      	b.n	8001c5e <CAN_AddRxFilter_v+0x426>
		break;
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <CAN_AddRxFilter_v+0x426>
		break;
 8001c5c:	bf00      	nop
	}

	switch(L_FilterScale_u8){
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <CAN_AddRxFilter_v+0x432>
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d018      	beq.n	8001c9a <CAN_AddRxFilter_v+0x462>
 8001c68:	e042      	b.n	8001cf0 <CAN_AddRxFilter_v+0x4b8>
	case CAN_Filter_Scale_Single:
		if (CAN_Remote_Frame == L_FrameType_u8){
 8001c6a:	7a7b      	ldrb	r3, [r7, #9]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <CAN_AddRxFilter_v+0x44a>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB1);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB1);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
		else{

		}


		break;
 8001c80:	e033      	b.n	8001cea <CAN_AddRxFilter_v+0x4b2>
		else if (CAN_Extended_Id == L_IdType_u8){
 8001c82:	7a3b      	ldrb	r3, [r7, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d130      	bne.n	8001cea <CAN_AddRxFilter_v+0x4b2>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB2);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB2);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
		break;
 8001c98:	e027      	b.n	8001cea <CAN_AddRxFilter_v+0x4b2>

	case CAN_Filter_Scale_Dual:
		if (CAN_Remote_Frame == L_FrameType_u8){
 8001c9a:	7a7b      	ldrb	r3, [r7, #9]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d110      	bne.n	8001cc2 <CAN_AddRxFilter_v+0x48a>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB4);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB20);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cae:	613b      	str	r3, [r7, #16]

			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB4);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB20);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cbe:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB19);
		}
		else{

		}
		break;
 8001cc0:	e015      	b.n	8001cee <CAN_AddRxFilter_v+0x4b6>
		else if (CAN_Extended_Id == L_IdType_u8){
 8001cc2:	7a3b      	ldrb	r3, [r7, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d112      	bne.n	8001cee <CAN_AddRxFilter_v+0x4b6>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB3);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB19);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cd6:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB3);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB19);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ce6:	60fb      	str	r3, [r7, #12]
		break;
 8001ce8:	e001      	b.n	8001cee <CAN_AddRxFilter_v+0x4b6>
		break;
 8001cea:	bf00      	nop
 8001cec:	e000      	b.n	8001cf0 <CAN_AddRxFilter_v+0x4b8>
		break;
 8001cee:	bf00      	nop
	}


	CAN_ID(L_CANInstanceId_u8)->FilterRegister[L_FilterId_u8].FR1 = L_FiR1Val_u32;
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	7abb      	ldrb	r3, [r7, #10]
 8001cfe:	3348      	adds	r3, #72	; 0x48
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN_ID(L_CANInstanceId_u8)->FilterRegister[L_FilterId_u8].FR2 = L_FiR2Val_u32;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	461a      	mov	r2, r3
 8001d12:	7abb      	ldrb	r3, [r7, #10]
 8001d14:	3348      	adds	r3, #72	; 0x48
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]
	/*Activate Filter*/

	SET_BIT(CAN_ID(L_CANInstanceId_u8)->FA1R, L_FilterId_u8);
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001d2c:	7aba      	ldrb	r2, [r7, #10]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4610      	mov	r0, r2
 8001d36:	7afa      	ldrb	r2, [r7, #11]
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d40:	4303      	orrs	r3, r0
 8001d42:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	/*De-active Filters Mode*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d54:	7afa      	ldrb	r2, [r7, #11]
 8001d56:	3a01      	subs	r2, #1
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <CAN_AddRxFilter_v+0x53c>)
 8001d5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	08003fb8 	.word	0x08003fb8

08001d78 <CAN_Receive_v>:
	/*De-active Filters Mode*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
}

void CAN_Receive_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_RxData *Arg_RXData_CAN_RxData,
		const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]

	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	u8 L_FIFONumber_u8 = -1;
 8001d8e:	23ff      	movs	r3, #255	; 0xff
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u8 L_PendingFlag_u8 = 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8 L_TimeoutCheckCondition_u8 = STD_FALSE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if ( STD_MAX_DELAY !=Arg_ToutVal_Cu32){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da6:	d04a      	beq.n	8001e3e <CAN_Receive_v+0xc6>

		Utils_TimeoutChecker L_timeout_Utils_TimeoutChecker;
		L_TimeoutCheckCondition_u8 = Utils_IsTimeoutOccurred_u8(&L_timeout_Utils_TimeoutChecker);
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 ff37 	bl	8003c20 <Utils_IsTimeoutOccurred_u8>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		Utils_TimeoutChecker_Init(&L_timeout_Utils_TimeoutChecker, Arg_ToutVal_Cu32);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 ff08 	bl	8003bd4 <Utils_TimeoutChecker_Init>
	}

	while(L_PendingFlag_u8){
 8001dc4:	e03b      	b.n	8001e3e <CAN_Receive_v+0xc6>
		for (u8 L_i_u8 = 0; L_i_u8<ARRAY_LENGTH(CAN_ID(L_CANInstanceId_u8)->RFxR);L_i_u8++){
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001dcc:	e033      	b.n	8001e36 <CAN_Receive_v+0xbe>

			if ((STD_TRUE == L_TimeoutCheckCondition_u8) ){
 8001dce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <CAN_Receive_v+0x6e>
				if (NULL != Arg_ToutErr_pCu32){
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 811a 	beq.w	8002012 <CAN_Receive_v+0x29a>
					*Arg_ToutErr_pCu32 = STD_TimeOutError;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
				}

				return ;
 8001de4:	e115      	b.n	8002012 <CAN_Receive_v+0x29a>
			}
			else if (STD_FALSE == L_TimeoutCheckCondition_u8){
 8001de6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <CAN_Receive_v+0x82>
				if (NULL != Arg_ToutErr_pCu32){
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <CAN_Receive_v+0x82>
					*Arg_ToutErr_pCu32 = STD_NoTimeOutError;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
			else{

			}


			if (0 != (CAN_ID(L_CANInstanceId_u8)->RFxR[L_i_u8] & 0x3)){
 8001dfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	4a86      	ldr	r2, [pc, #536]	; (800201c <CAN_Receive_v+0x2a4>)
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <CAN_Receive_v+0xb4>
				L_FIFONumber_u8 = L_i_u8;
 8001e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				L_PendingFlag_u8 = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8001e2a:	e008      	b.n	8001e3e <CAN_Receive_v+0xc6>
		for (u8 L_i_u8 = 0; L_i_u8<ARRAY_LENGTH(CAN_ID(L_CANInstanceId_u8)->RFxR);L_i_u8++){
 8001e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001e36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d9c7      	bls.n	8001dce <CAN_Receive_v+0x56>
	while(L_PendingFlag_u8){
 8001e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1bf      	bne.n	8001dc6 <CAN_Receive_v+0x4e>
		return ;
	}


	/*Check If FIFO 0 is not Empty*/
	Arg_RXData_CAN_RxData->FilterId = (u8)((CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDTR>>CAN_RDTxR_FMI)&0xFF);
 8001e46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a73      	ldr	r2, [pc, #460]	; (800201c <CAN_Receive_v+0x2a4>)
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e58:	331b      	adds	r3, #27
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	73da      	strb	r2, [r3, #15]

	Arg_RXData_CAN_RxData->DataLength = (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDTR&0xF);
 8001e6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <CAN_Receive_v+0x2a4>)
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e7c:	331b      	adds	r3, #27
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	b2d9      	uxtb	r1, r3
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	7b93      	ldrb	r3, [r2, #14]
 8001e90:	f361 0303 	bfi	r3, r1, #0, #4
 8001e94:	7393      	strb	r3, [r2, #14]

	Arg_RXData_CAN_RxData->FrameType = GET_BIT(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR, CAN_RIxR_RTR);
 8001e96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4a5f      	ldr	r2, [pc, #380]	; (800201c <CAN_Receive_v+0x2a4>)
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea8:	331b      	adds	r3, #27
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	735a      	strb	r2, [r3, #13]
	Arg_RXData_CAN_RxData->IdType = GET_BIT(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR, CAN_RIxR_IDE);
 8001ebe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4a55      	ldr	r2, [pc, #340]	; (800201c <CAN_Receive_v+0x2a4>)
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ed0:	331b      	adds	r3, #27
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	731a      	strb	r2, [r3, #12]

	if (CAN_Standard_Id == Arg_RXData_CAN_RxData->IdType){
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	7b1b      	ldrb	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d110      	bne.n	8001f10 <CAN_Receive_v+0x198>
		Arg_RXData_CAN_RxData->ID = CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR>>CAN_RIxR_STID;
 8001eee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <CAN_Receive_v+0x2a4>)
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f00:	331b      	adds	r3, #27
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0d5a      	lsrs	r2, r3, #21
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e013      	b.n	8001f38 <CAN_Receive_v+0x1c0>
	}
	else if(CAN_Extended_Id == Arg_RXData_CAN_RxData->IdType){
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10f      	bne.n	8001f38 <CAN_Receive_v+0x1c0>
		Arg_RXData_CAN_RxData->ID = CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR>>CAN_RIxR_EXID;
 8001f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	; (800201c <CAN_Receive_v+0x2a4>)
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	461a      	mov	r2, r3
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	331b      	adds	r3, #27
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	601a      	str	r2, [r3, #0]
	}
	else{

	}

	if (CAN_Data_Frame == Arg_RXData_CAN_RxData->FrameType){
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	7b5b      	ldrb	r3, [r3, #13]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d14b      	bne.n	8001fd8 <CAN_Receive_v+0x260>
		for (u8 L_DataIdx_u8=0; L_DataIdx_u8<Arg_RXData_CAN_RxData->DataLength; L_DataIdx_u8++){
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f46:	e03d      	b.n	8001fc4 <CAN_Receive_v+0x24c>
			if (L_DataIdx_u8<4){
 8001f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d819      	bhi.n	8001f84 <CAN_Receive_v+0x20c>
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDLR >> (8*L_DataIdx_u8));
 8001f50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4a31      	ldr	r2, [pc, #196]	; (800201c <CAN_Receive_v+0x2a4>)
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	40da      	lsrs	r2, r3
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDLR >> (8*L_DataIdx_u8));
 8001f78:	b2d1      	uxtb	r1, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	460a      	mov	r2, r1
 8001f80:	711a      	strb	r2, [r3, #4]
 8001f82:	e01a      	b.n	8001fba <CAN_Receive_v+0x242>
			}
			else{
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDHR >> (8*(L_DataIdx_u8%4)));
 8001f84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <CAN_Receive_v+0x2a4>)
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	40da      	lsrs	r2, r3
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDHR >> (8*(L_DataIdx_u8%4)));
 8001fb0:	b2d1      	uxtb	r1, r2
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	711a      	strb	r2, [r3, #4]
		for (u8 L_DataIdx_u8=0; L_DataIdx_u8<Arg_RXData_CAN_RxData->DataLength; L_DataIdx_u8++){
 8001fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	7b9b      	ldrb	r3, [r3, #14]
 8001fc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d3b7      	bcc.n	8001f48 <CAN_Receive_v+0x1d0>
	else{

	}

	/*Release FIFO for the next message.*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->RFxR[L_FIFONumber_u8], CAN_RF0R_RFOM0);
 8001fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <CAN_Receive_v+0x2a4>)
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fea:	3302      	adds	r3, #2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	4908      	ldr	r1, [pc, #32]	; (800201c <CAN_Receive_v+0x2a4>)
 8001ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	3302      	adds	r3, #2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	e000      	b.n	8002014 <CAN_Receive_v+0x29c>
				return ;
 8002012:	bf00      	nop


}
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08003fb8 	.word	0x08003fb8

08002020 <DMA_CheckInterruptAndClear_Bool>:
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[Arg_ChannelStream_Cu8 & 0x0F].M1AR = Arg_conf_cpcDMA_Cfg->MemoryAddressSecondBuffer;
	/*Enable DMA*/
	DMA_EnableDMA_v(Arg_conf_cpcDMA_Cfg, Arg_ChannelStream_Cu8);
}

Bool DMA_CheckInterruptAndClear_Bool(const u8 Arg_DMAInstanceId_u8,const  u8 Arg_StreamNum_Cu8,const  u8 Arg_InterruptFlagPos_Cu8){
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	460b      	mov	r3, r1
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	4613      	mov	r3, r2
 8002030:	717b      	strb	r3, [r7, #5]
	u8 L_PendRegPos_u8 = (Arg_StreamNum_Cu8 % 4);
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	73fb      	strb	r3, [r7, #15]
	Bool L_CheckInterrupt_Bool = STD_FALSE;
 800203a:	2300      	movs	r3, #0
 800203c:	73bb      	strb	r3, [r7, #14]
	switch(L_PendRegPos_u8){
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d825      	bhi.n	8002090 <DMA_CheckInterruptAndClear_Bool+0x70>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <DMA_CheckInterruptAndClear_Bool+0x2c>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	08002067 	.word	0x08002067
 8002054:	08002075 	.word	0x08002075
 8002058:	08002083 	.word	0x08002083
	case 0:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	797b      	ldrb	r3, [r7, #5]
 8002060:	4413      	add	r3, r2
 8002062:	73fb      	strb	r3, [r7, #15]
		break;
 8002064:	e015      	b.n	8002092 <DMA_CheckInterruptAndClear_Bool+0x72>

	case 1:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+6-1;
 8002066:	797a      	ldrb	r2, [r7, #5]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4413      	add	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3305      	adds	r3, #5
 8002070:	73fb      	strb	r3, [r7, #15]
		break;
 8002072:	e00e      	b.n	8002092 <DMA_CheckInterruptAndClear_Bool+0x72>

	case 2:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+16-2;
 8002074:	797a      	ldrb	r2, [r7, #5]
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	4413      	add	r3, r2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	330e      	adds	r3, #14
 800207e:	73fb      	strb	r3, [r7, #15]
		break;
 8002080:	e007      	b.n	8002092 <DMA_CheckInterruptAndClear_Bool+0x72>

	case 3:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+22-3;
 8002082:	797a      	ldrb	r2, [r7, #5]
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	4413      	add	r3, r2
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3313      	adds	r3, #19
 800208c:	73fb      	strb	r3, [r7, #15]
		break;
 800208e:	e000      	b.n	8002092 <DMA_CheckInterruptAndClear_Bool+0x72>
	default:
		break;
 8002090:	bf00      	nop
	}


	if ((Arg_StreamNum_Cu8 <= 3)&&(STD_TRUE == GET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->LISR, L_PendRegPos_u8))){
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d821      	bhi.n	80020dc <DMA_CheckInterruptAndClear_Bool+0xbc>
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	3b01      	subs	r3, #1
 800209c:	4a26      	ldr	r2, [pc, #152]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d114      	bne.n	80020dc <DMA_CheckInterruptAndClear_Bool+0xbc>
		SET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->LIFCR, L_PendRegPos_u8);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	4610      	mov	r0, r2
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	3a01      	subs	r2, #1
 80020cc:	491a      	ldr	r1, [pc, #104]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 80020ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020d2:	4303      	orrs	r3, r0
 80020d4:	6093      	str	r3, [r2, #8]
		L_CheckInterrupt_Bool = STD_TRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73bb      	strb	r3, [r7, #14]
 80020da:	e026      	b.n	800212a <DMA_CheckInterruptAndClear_Bool+0x10a>
	}
	else if ((Arg_StreamNum_Cu8 >= 4)&&(STD_TRUE == GET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->HISR, L_PendRegPos_u8))){
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d921      	bls.n	8002126 <DMA_CheckInterruptAndClear_Bool+0x106>
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d114      	bne.n	8002126 <DMA_CheckInterruptAndClear_Bool+0x106>
		SET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->HIFCR, L_PendRegPos_u8);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f202 	lsl.w	r2, r1, r2
 8002110:	4610      	mov	r0, r2
 8002112:	79fa      	ldrb	r2, [r7, #7]
 8002114:	3a01      	subs	r2, #1
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002118:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800211c:	4303      	orrs	r3, r0
 800211e:	60d3      	str	r3, [r2, #12]
		L_CheckInterrupt_Bool = STD_TRUE;
 8002120:	2301      	movs	r3, #1
 8002122:	73bb      	strb	r3, [r7, #14]
 8002124:	e001      	b.n	800212a <DMA_CheckInterruptAndClear_Bool+0x10a>
	}
	else{
		L_CheckInterrupt_Bool = STD_FALSE;
 8002126:	2300      	movs	r3, #0
 8002128:	73bb      	strb	r3, [r7, #14]
	}


	return L_CheckInterrupt_Bool;
 800212a:	7bbb      	ldrb	r3, [r7, #14]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	08003fc0 	.word	0x08003fc0

0800213c <EXTI_CheckInterrupt_Bool>:
    the existence of interrupt for specific pin number.
 * @param  Arg_PinNumber_u8 --> Pin number that you need to check whether it's source of interrupt or not.
 * @retval --> Bool value represents whether there is an interrupt or not.
 * */

Bool EXTI_CheckInterrupt_Bool(u8 Arg_PinNumber_u8){
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
	if (STD_TRUE == GET_BIT(EXTI->PR, Arg_PinNumber_u8)){
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <EXTI_CheckInterrupt_Bool+0x30>)
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <EXTI_CheckInterrupt_Bool+0x20>
		return STD_TRUE;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <EXTI_CheckInterrupt_Bool+0x22>
	}
	else{

		return STD_FALSE;
 800215c:	2300      	movs	r3, #0
	}
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40013c00 	.word	0x40013c00

08002170 <EXTI_ClearInterrupt_v>:
/* @brief  --> This function usually used by interrupt handler to check for
    the existence of interrupt for specific pin number and clear pending flag if it's exist.
 * @param  Arg_PinNumber_u8 --> Pin number that you need to clear pending flag.
 * @retval --> None.
 * */
void EXTI_ClearInterrupt_v(u8 Arg_PinNumber_u8){
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	if (STD_TRUE == GET_BIT(EXTI->PR, Arg_PinNumber_u8)){
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <EXTI_ClearInterrupt_v+0x40>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10a      	bne.n	80021a2 <EXTI_ClearInterrupt_v+0x32>
		SET_BIT(EXTI->PR, Arg_PinNumber_u8);
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <EXTI_ClearInterrupt_v+0x40>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f202 	lsl.w	r2, r1, r2
 8002198:	4611      	mov	r1, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <EXTI_ClearInterrupt_v+0x40>)
 800219c:	430b      	orrs	r3, r1
 800219e:	6153      	str	r3, [r2, #20]
		return;
 80021a0:	e000      	b.n	80021a4 <EXTI_ClearInterrupt_v+0x34>
	}
	else{
		return;
 80021a2:	bf00      	nop
	}
}
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <FMI_FlashWriteU8Data_v>:
/*
==================================================
  Start Section --> Functions implementation.
==================================================
*/
void FMI_FlashWriteU8Data_v(const u32 Arg_Address_Cu32, const u16 Arg_Data_Cu8){
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
	/*Wait till flash is not busy.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 80021c0:	bf00      	nop
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d0f8      	beq.n	80021c2 <FMI_FlashWriteU8Data_v+0xe>

	}

	/*Unlock Flash Register using KEYR*/
	if (STD_TRUE == GET_BIT(FMI_ID(1)->CR, FMI_CR_LOCK)){
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	0fdb      	lsrs	r3, r3, #31
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <FMI_FlashWriteU8Data_v+0x3a>
		FMI_ID(1)->KEYR = FMI_FPEC_KEY1;
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <FMI_FlashWriteU8Data_v+0x90>)
 80021e4:	6053      	str	r3, [r2, #4]
		FMI_ID(1)->KEYR = FMI_FPEC_KEY2;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <FMI_FlashWriteU8Data_v+0x94>)
 80021ec:	6053      	str	r3, [r2, #4]
	else{

	}

	/*Select Data Size*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_0);
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f8:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_1);
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	6113      	str	r3, [r2, #16]

	/*Activate Programming Mode*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6113      	str	r3, [r2, #16]

	/*Write data on Flash Address*/
	*(( volatile u16*)Arg_Address_Cu32) = Arg_Data_Cu8;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	887a      	ldrh	r2, [r7, #2]
 8002216:	801a      	strh	r2, [r3, #0]

	/*Wait for busy flag.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 8002218:	bf00      	nop
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d0f8      	beq.n	800221a <FMI_FlashWriteU8Data_v+0x66>

	}

	/*Deactivate programming mode.*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <FMI_FlashWriteU8Data_v+0x8c>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6113      	str	r3, [r2, #16]

}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40023c00 	.word	0x40023c00
 8002244:	45670123 	.word	0x45670123
 8002248:	cdef89ab 	.word	0xcdef89ab

0800224c <FMI_FlashWriteU16Data_v>:

void FMI_FlashWriteU16Data_v(const u32 Arg_Address_Cu32, const u16 Arg_Data_Cu16){
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
	/*Wait till flash is not busy.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 8002258:	bf00      	nop
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d0f8      	beq.n	800225a <FMI_FlashWriteU16Data_v+0xe>

	}

	/*Unlock Flash Register using KEYR*/
	if (STD_TRUE == GET_BIT(FMI_ID(1)->CR, FMI_CR_LOCK)){
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	0fdb      	lsrs	r3, r3, #31
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <FMI_FlashWriteU16Data_v+0x3a>
		FMI_ID(1)->KEYR = FMI_FPEC_KEY1;
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 8002278:	461a      	mov	r2, r3
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <FMI_FlashWriteU16Data_v+0x90>)
 800227c:	6053      	str	r3, [r2, #4]
		FMI_ID(1)->KEYR = FMI_FPEC_KEY2;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 8002280:	461a      	mov	r2, r3
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <FMI_FlashWriteU16Data_v+0x94>)
 8002284:	6053      	str	r3, [r2, #4]
	else{

	}

	/*Select Data Size*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_0);
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_1);
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 8002298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800229c:	6113      	str	r3, [r2, #16]

	/*Activate Programming Mode*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6113      	str	r3, [r2, #16]

	/*Write data on Flash Address*/
	*(( volatile u16*)Arg_Address_Cu32) = Arg_Data_Cu16;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	801a      	strh	r2, [r3, #0]

	/*Wait for busy flag.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 80022b0:	bf00      	nop
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d0f8      	beq.n	80022b2 <FMI_FlashWriteU16Data_v+0x66>

	}

	/*Deactivate programming mode.*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <FMI_FlashWriteU16Data_v+0x8c>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6113      	str	r3, [r2, #16]

}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40023c00 	.word	0x40023c00
 80022dc:	45670123 	.word	0x45670123
 80022e0:	cdef89ab 	.word	0xcdef89ab

080022e4 <FMI_FlashWriteU32Data_v>:

void FMI_FlashWriteU32Data_v(const u32 Arg_Address_Cu32, const u32 Arg_Data_Cu32){
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	/*Wait till flash is not busy.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 80022ee:	bf00      	nop
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d0f8      	beq.n	80022f0 <FMI_FlashWriteU32Data_v+0xc>

	}

	/*Unlock Flash Register using KEYR*/
	if (STD_TRUE == GET_BIT(FMI_ID(1)->CR, FMI_CR_LOCK)){
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	0fdb      	lsrs	r3, r3, #31
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <FMI_FlashWriteU32Data_v+0x38>
		FMI_ID(1)->KEYR = FMI_FPEC_KEY1;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800230e:	461a      	mov	r2, r3
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <FMI_FlashWriteU32Data_v+0x90>)
 8002312:	6053      	str	r3, [r2, #4]
		FMI_ID(1)->KEYR = FMI_FPEC_KEY2;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 8002316:	461a      	mov	r2, r3
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <FMI_FlashWriteU32Data_v+0x94>)
 800231a:	6053      	str	r3, [r2, #4]
	else{

	}

	/*Select Data Size*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_0);
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4a13      	ldr	r2, [pc, #76]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 8002322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002326:	6113      	str	r3, [r2, #16]
	SET_BIT(FMI_ID(1)->CR, FMI_CR_PSIZE_1);
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6113      	str	r3, [r2, #16]

	/*Activate Programming Mode*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6113      	str	r3, [r2, #16]

	/*Write data on Flash Address*/
	*(( volatile u32*)Arg_Address_Cu32) = Arg_Data_Cu32;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	601a      	str	r2, [r3, #0]

	/*Wait for busy flag.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 8002346:	bf00      	nop
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d0f8      	beq.n	8002348 <FMI_FlashWriteU32Data_v+0x64>

	}

	/*Deactivate programming mode.*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_PG);
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <FMI_FlashWriteU32Data_v+0x8c>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6113      	str	r3, [r2, #16]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	45670123 	.word	0x45670123
 8002378:	cdef89ab 	.word	0xcdef89ab

0800237c <FMI_EraseFlashSector_v>:

void FMI_EraseFlashSector_v(const u16 Arg_SectorNumber_Cu16)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
	/*Wait till flash is not busy.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 8002386:	bf00      	nop
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d0f8      	beq.n	8002388 <FMI_EraseFlashSector_v+0xc>

	}

	/*Unlock Flash Register using KEYR*/
	if (STD_TRUE == GET_BIT(FMI_ID(1)->CR, FMI_CR_LOCK)){
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	0fdb      	lsrs	r3, r3, #31
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <FMI_EraseFlashSector_v+0x38>
		FMI_ID(1)->KEYR = FMI_FPEC_KEY1;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <FMI_EraseFlashSector_v+0xa4>)
 80023aa:	6053      	str	r3, [r2, #4]
		FMI_ID(1)->KEYR = FMI_FPEC_KEY2;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <FMI_EraseFlashSector_v+0xa8>)
 80023b2:	6053      	str	r3, [r2, #4]
	}
	else{

	}
	/*Select sector number to erase.*/
	FMI_ID(1)->CR &=~(0b1111u<<3);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023ba:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80023be:	6113      	str	r3, [r2, #16]
	FMI_ID(1)->CR |= (Arg_SectorNumber_Cu16<<3);
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	00d2      	lsls	r2, r2, #3
 80023c8:	4611      	mov	r1, r2
 80023ca:	4a14      	ldr	r2, [pc, #80]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6113      	str	r3, [r2, #16]

	/*Select Erase operation.*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_SER);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	6113      	str	r3, [r2, #16]

	/*Start Erase operation.*/
	SET_BIT(FMI_ID(1)->CR, FMI_CR_STRT);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	6113      	str	r3, [r2, #16]

	/*Wait till flash is not busy.*/
	while(STD_TRUE == GET_BIT(FMI_ID(1)->SR, FMI_SR_BSY)){
 80023e8:	bf00      	nop
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d0f8      	beq.n	80023ea <FMI_EraseFlashSector_v+0x6e>

	}

	/*Clear EOP flag.*/
	SET_BIT(FMI_ID(1)->SR, FMI_SR_EOP);
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	60d3      	str	r3, [r2, #12]

	/*Deactivate Erase operation.*/
	CLEAR_BIT(FMI_ID(1)->CR, FMI_CR_SER);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <FMI_EraseFlashSector_v+0xa0>)
 800240a:	f023 0302 	bic.w	r3, r3, #2
 800240e:	6113      	str	r3, [r2, #16]

}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40023c00 	.word	0x40023c00
 8002420:	45670123 	.word	0x45670123
 8002424:	cdef89ab 	.word	0xcdef89ab

08002428 <GPIO_Config_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void GPIO_Config_v(GPIO_Cfg const * const Arg_conf_cpcGPIO_Cfg){
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	 * Target of this process is to get peripheral using user-friendly convention.
	 * For example instead of using GPIOA in APP/HAL layer, we decided to use 'A' or 'a'
	 * */

	/*Read input id from user.*/
	u8 L_GPIOid_u8 = Arg_conf_cpcGPIO_Cfg->InstanceId;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	77fb      	strb	r3, [r7, #31]
	/*
	 * GPIOA will have index 0 in L_GPIOid_u8 array
	 * So the following process check for the boundary of input value
	 * If input id exceeds the boundary an error will be issued.
	 * */
	if (('A' <= L_GPIOid_u8 ) && (L_GPIOid_u8 <= 'Z')){
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d906      	bls.n	800244a <GPIO_Config_v+0x22>
 800243c:	7ffb      	ldrb	r3, [r7, #31]
 800243e:	2b5a      	cmp	r3, #90	; 0x5a
 8002440:	d803      	bhi.n	800244a <GPIO_Config_v+0x22>
		L_GPIOid_u8 -= 'A';
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	3b41      	subs	r3, #65	; 0x41
 8002446:	77fb      	strb	r3, [r7, #31]
 8002448:	e008      	b.n	800245c <GPIO_Config_v+0x34>
	}
	else if (('a' <= L_GPIOid_u8 ) && (L_GPIOid_u8 <= 'z')){
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d905      	bls.n	800245c <GPIO_Config_v+0x34>
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	2b7a      	cmp	r3, #122	; 0x7a
 8002454:	d802      	bhi.n	800245c <GPIO_Config_v+0x34>
		L_GPIOid_u8 -= 'a';
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	3b61      	subs	r3, #97	; 0x61
 800245a:	77fb      	strb	r3, [r7, #31]

	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
 800245c:	7ffb      	ldrb	r3, [r7, #31]
			RCC_GetPeripheralBus_u8((u32)GPIO_ID(L_GPIOid_u8)),
 800245e:	4a9b      	ldr	r2, [pc, #620]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fa47 	bl	80038f8 <RCC_GetPeripheralBus_u8>
 800246a:	4603      	mov	r3, r0
 800246c:	461c      	mov	r4, r3
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	3301      	adds	r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fa8d 	bl	8003994 <RCC_GetRCCGPIOBit_u8>
 800247a:	4603      	mov	r3, r0
 800247c:	4619      	mov	r1, r3
 800247e:	4620      	mov	r0, r4
 8002480:	f001 f9a0 	bl	80037c4 <RCC_EnableClock_v>
	 * when we assign the value 0b0101
	 * pin 0 & 2 have the value of enabled attributes.
	 * pin 1 & 3 have the value of disabled attributes.
	 * */

	u16 L_PINsMask_u16 = Arg_conf_cpcGPIO_Cfg->PINs;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	885b      	ldrh	r3, [r3, #2]
 8002488:	81fb      	strh	r3, [r7, #14]
	 * for example if input is 0x0101
	 * the following loop assign value 0x00110011
	 * the first 2 bits(LSB) for pin 0
	 * the second 2 bits (LSB) bit 0 & bit 1 for pin 1
	 * */
	u32 L_PINsMask_u32 = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
	for (u8 L_i_u8 =0; L_i_u8<16; L_i_u8++){
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
 8002492:	e013      	b.n	80024bc <GPIO_Config_v+0x94>
		if (STD_TRUE == GET_BIT(L_PINsMask_u16, L_i_u8)){
 8002494:	89fa      	ldrh	r2, [r7, #14]
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	fa42 f303 	asr.w	r3, r2, r3
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <GPIO_Config_v+0x8e>
			L_PINsMask_u32 |= (0b11<<(L_i_u8*2));
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
	for (u8 L_i_u8 =0; L_i_u8<16; L_i_u8++){
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	3301      	adds	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d9e8      	bls.n	8002494 <GPIO_Config_v+0x6c>
	 * To configure input mode for PINs --> GPIO_Mode_INPUT
	 * To configure output mode for PINs --> GPIO_Mode_OUTPUT
	 * To configure Alternate Function mode for PINs --> GPIO_Mode_Alternate_Function
	 * To configure Analog Mode for PINs --> GPIO_Mode_Analog
	 * */
	u32 L_MODERVal_u32 = GPIO_ID(L_GPIOid_u8)->MODER;
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	4a81      	ldr	r2, [pc, #516]	; (80026cc <GPIO_Config_v+0x2a4>)
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
	switch (Arg_conf_cpcGPIO_Cfg->Mode){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	889b      	ldrh	r3, [r3, #4]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d831      	bhi.n	800253a <GPIO_Config_v+0x112>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <GPIO_Config_v+0xb4>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024f9 	.word	0x080024f9
 80024e4:	08002515 	.word	0x08002515
 80024e8:	08002531 	.word	0x08002531
	case GPIO_MODE_INPUT:
		L_MODERVal_u32 |= 0x00u & L_PINsMask_u32;
		L_MODERVal_u32 &= ~(~0x00u & L_PINsMask_u32);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
		break;
 80024f6:	e021      	b.n	800253c <GPIO_Config_v+0x114>
	case GPIO_MODE_OUTPUT:
		L_MODERVal_u32 |= 0x55555555 & L_PINsMask_u32;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0x55555555 & L_PINsMask_u32);
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
		break;
 8002512:	e013      	b.n	800253c <GPIO_Config_v+0x114>
	case GPIO_MODE_ALTERNATE_FUNCTION:
		L_MODERVal_u32 |= 0xAAAAAAAAu & L_PINsMask_u32;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0xAAAAAAAAu & L_PINsMask_u32);
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
		break;
 800252e:	e005      	b.n	800253c <GPIO_Config_v+0x114>
	case GPIO_MODE_ANALOG:
		L_MODERVal_u32 |= 0xFFFFFFFFu & L_PINsMask_u32;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0xFFFFFFFFu & L_PINsMask_u32);
		break;
 8002538:	e000      	b.n	800253c <GPIO_Config_v+0x114>
	default :
		/*Error*/
		break;
 800253a:	bf00      	nop
	}
	GPIO_ID(L_GPIOid_u8)->MODER = L_MODERVal_u32;
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	4a63      	ldr	r2, [pc, #396]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	461a      	mov	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6013      	str	r3, [r2, #0]
	/* Configure the output type of Pins
	 * either Push Pull can be configured by assigned OutputType with macro GPIO_Output_Type_Push_Pull
	 * or Open Drain can be configured by assigned OutputType with macro GPIO_Output_Type_Open_Drain
	 * */

	switch (Arg_conf_cpcGPIO_Cfg->OutputType){
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	88db      	ldrh	r3, [r3, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <GPIO_Config_v+0x130>
 8002552:	2b01      	cmp	r3, #1
 8002554:	d00f      	beq.n	8002576 <GPIO_Config_v+0x14e>
	case GPIO_OUTPUT_TYPE_OPEN_DRAIN:
		GPIO_ID(L_GPIOid_u8)->OTYPER |= 0xFFFF & L_PINsMask_u16;
		break;
	default :
		/*Error*/
		break;
 8002556:	e01b      	b.n	8002590 <GPIO_Config_v+0x168>
		GPIO_ID(L_GPIOid_u8)->OTYPER &= ~(~0x00 & L_PINsMask_u16);
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	4a5c      	ldr	r2, [pc, #368]	; (80026cc <GPIO_Config_v+0x2a4>)
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	89fa      	ldrh	r2, [r7, #14]
 8002564:	43d2      	mvns	r2, r2
 8002566:	4610      	mov	r0, r2
 8002568:	7ffa      	ldrb	r2, [r7, #31]
 800256a:	4958      	ldr	r1, [pc, #352]	; (80026cc <GPIO_Config_v+0x2a4>)
 800256c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002570:	4003      	ands	r3, r0
 8002572:	6053      	str	r3, [r2, #4]
		break;
 8002574:	e00c      	b.n	8002590 <GPIO_Config_v+0x168>
		GPIO_ID(L_GPIOid_u8)->OTYPER |= 0xFFFF & L_PINsMask_u16;
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <GPIO_Config_v+0x2a4>)
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	7ff9      	ldrb	r1, [r7, #31]
 8002584:	4851      	ldr	r0, [pc, #324]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002586:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
		break;
 800258e:	bf00      	nop
	}
	/* Configure output speed (higher speed higher slew rate) of selected pins.
	 * Can have the following options
	 * GPIO_Output_Speed_Low ,GPIO_Output_Speed_Medium, GPIO_Output_Speed_Fast, or GPIO_Output_Speed_High
	 * */
	switch (Arg_conf_cpcGPIO_Cfg->OutputSpeed){
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	891b      	ldrh	r3, [r3, #8]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d862      	bhi.n	800265e <GPIO_Config_v+0x236>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <GPIO_Config_v+0x178>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025cb 	.word	0x080025cb
 80025a8:	08002607 	.word	0x08002607
 80025ac:	08002643 	.word	0x08002643
	case GPIO_OUTPUT_SPEED_LOW:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0x00u &L_PINsMask_u32);
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	4a46      	ldr	r2, [pc, #280]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	4619      	mov	r1, r3
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	461a      	mov	r2, r3
 80025c4:	688b      	ldr	r3, [r1, #8]
 80025c6:	6093      	str	r3, [r2, #8]
		break;
 80025c8:	e04a      	b.n	8002660 <GPIO_Config_v+0x238>
	case GPIO_OUTPUT_SPEED_MEDIUM:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0x55555555u &L_PINsMask_u32);
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80025da:	43db      	mvns	r3, r3
 80025dc:	7ff9      	ldrb	r1, [r7, #31]
 80025de:	483b      	ldr	r0, [pc, #236]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025e0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80025e4:	4013      	ands	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0x55555555u &L_PINsMask_u32);
 80025e8:	7ffb      	ldrb	r3, [r7, #31]
 80025ea:	4a38      	ldr	r2, [pc, #224]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80025f8:	7ff9      	ldrb	r1, [r7, #31]
 80025fa:	4834      	ldr	r0, [pc, #208]	; (80026cc <GPIO_Config_v+0x2a4>)
 80025fc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
		break;
 8002604:	e02c      	b.n	8002660 <GPIO_Config_v+0x238>

	case GPIO_OUTPUT_SPEED_FAST:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0xAAAAAAAAu &L_PINsMask_u32);
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	4a30      	ldr	r2, [pc, #192]	; (80026cc <GPIO_Config_v+0x2a4>)
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002616:	43db      	mvns	r3, r3
 8002618:	7ff9      	ldrb	r1, [r7, #31]
 800261a:	482c      	ldr	r0, [pc, #176]	; (80026cc <GPIO_Config_v+0x2a4>)
 800261c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002620:	4013      	ands	r3, r2
 8002622:	608b      	str	r3, [r1, #8]
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0xAAAAAAAAu &L_PINsMask_u32);
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	4a29      	ldr	r2, [pc, #164]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002634:	7ff9      	ldrb	r1, [r7, #31]
 8002636:	4825      	ldr	r0, [pc, #148]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002638:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
		break;
 8002640:	e00e      	b.n	8002660 <GPIO_Config_v+0x238>
	case GPIO_OUTPUT_SPEED_HIGH:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0xFFFFFFFFu & L_PINsMask_u32);
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	4a21      	ldr	r2, [pc, #132]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	7ffb      	ldrb	r3, [r7, #31]
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002654:	4619      	mov	r1, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
		break;
 800265c:	e000      	b.n	8002660 <GPIO_Config_v+0x238>
	default :
		/*Error*/
		break;
 800265e:	bf00      	nop

	/* Configure the type of pulled resistors of selected pins.
	 * Can have the following options
	 * GPIO_Resistor_No_Pull ,GPIO_Resistor_Pull_Up, or GPIO_Resistor_Pull_Down
	 * */
	switch (Arg_conf_cpcGPIO_Cfg->PullUpPullDownResistor){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	895b      	ldrh	r3, [r3, #10]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d033      	beq.n	80026d0 <GPIO_Config_v+0x2a8>
 8002668:	2b02      	cmp	r3, #2
 800266a:	dc4f      	bgt.n	800270c <GPIO_Config_v+0x2e4>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <GPIO_Config_v+0x24e>
 8002670:	2b01      	cmp	r3, #1
 8002672:	d00d      	beq.n	8002690 <GPIO_Config_v+0x268>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0xAAAAAAAAu &L_PINsMask_u32);
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0xAAAAAAAAu &L_PINsMask_u32);
		break;
	default :
		/*Error*/
		break;
 8002674:	e04a      	b.n	800270c <GPIO_Config_v+0x2e4>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0x00 &L_PINsMask_u32);
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <GPIO_Config_v+0x2a4>)
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	4619      	mov	r1, r3
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	461a      	mov	r2, r3
 800268a:	68cb      	ldr	r3, [r1, #12]
 800268c:	60d3      	str	r3, [r2, #12]
		break;
 800268e:	e03e      	b.n	800270e <GPIO_Config_v+0x2e6>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0x55555555u &L_PINsMask_u32);
 8002690:	7ffb      	ldrb	r3, [r7, #31]
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <GPIO_Config_v+0x2a4>)
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80026a0:	43db      	mvns	r3, r3
 80026a2:	7ff9      	ldrb	r1, [r7, #31]
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <GPIO_Config_v+0x2a4>)
 80026a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80026aa:	4013      	ands	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0x55555555u &L_PINsMask_u32);
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <GPIO_Config_v+0x2a4>)
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80026be:	7ff9      	ldrb	r1, [r7, #31]
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <GPIO_Config_v+0x2a4>)
 80026c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
		break;
 80026ca:	e020      	b.n	800270e <GPIO_Config_v+0x2e6>
 80026cc:	08003fc8 	.word	0x08003fc8
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0xAAAAAAAAu &L_PINsMask_u32);
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <GPIO_Config_v+0x2f0>)
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80026e0:	43db      	mvns	r3, r3
 80026e2:	7ff9      	ldrb	r1, [r7, #31]
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <GPIO_Config_v+0x2f0>)
 80026e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80026ea:	4013      	ands	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0xAAAAAAAAu &L_PINsMask_u32);
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <GPIO_Config_v+0x2f0>)
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80026fe:	7ff9      	ldrb	r1, [r7, #31]
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <GPIO_Config_v+0x2f0>)
 8002702:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002706:	4313      	orrs	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]
		break;
 800270a:	e000      	b.n	800270e <GPIO_Config_v+0x2e6>
		break;
 800270c:	bf00      	nop
	}

}
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	bf00      	nop
 8002718:	08003fc8 	.word	0x08003fc8

0800271c <GPIO_MapGPIOPIN_v>:

}



void GPIO_MapGPIOPIN_v(GPIO_Cfg const * const Arg_conf_cpcGPIO_Cfg, const u8 Arg_PIN_Cu8, const u8 Arg_Peripheral_Cu8){
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
 8002728:	4613      	mov	r3, r2
 800272a:	70bb      	strb	r3, [r7, #2]

	/*Read input id from user.*/
	u8 L_GPIOid_u8 = Arg_conf_cpcGPIO_Cfg->InstanceId;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	73fb      	strb	r3, [r7, #15]
	/*
	 * GPIOA will have index 0 in L_GPIOid_u8 array
	 * So the following process check for the boundary of input value
	 * If input id exceeds the boundary an error will be issued.
	 * */
	if (('A' <= Arg_conf_cpcGPIO_Cfg->InstanceId ) && (Arg_conf_cpcGPIO_Cfg->InstanceId <= 'Z')){
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d907      	bls.n	800274a <GPIO_MapGPIOPIN_v+0x2e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b5a      	cmp	r3, #90	; 0x5a
 8002740:	d803      	bhi.n	800274a <GPIO_MapGPIOPIN_v+0x2e>
		L_GPIOid_u8 -= 'A';
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	3b41      	subs	r3, #65	; 0x41
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e00a      	b.n	8002760 <GPIO_MapGPIOPIN_v+0x44>
	}
	else if (('a' <= Arg_conf_cpcGPIO_Cfg->InstanceId ) && (Arg_conf_cpcGPIO_Cfg->InstanceId <= 'z')){
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b60      	cmp	r3, #96	; 0x60
 8002750:	d906      	bls.n	8002760 <GPIO_MapGPIOPIN_v+0x44>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b7a      	cmp	r3, #122	; 0x7a
 8002758:	d802      	bhi.n	8002760 <GPIO_MapGPIOPIN_v+0x44>
		L_GPIOid_u8 -= 'a';
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3b61      	subs	r3, #97	; 0x61
 800275e:	73fb      	strb	r3, [r7, #15]

	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
 8002760:	7bfb      	ldrb	r3, [r7, #15]
			RCC_GetPeripheralBus_u8((u32)GPIO_ID(L_GPIOid_u8)),
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <GPIO_MapGPIOPIN_v+0xc4>)
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8002768:	4618      	mov	r0, r3
 800276a:	f001 f8c5 	bl	80038f8 <RCC_GetPeripheralBus_u8>
 800276e:	4603      	mov	r3, r0
 8002770:	461c      	mov	r4, r3
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3301      	adds	r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f001 f90b 	bl	8003994 <RCC_GetRCCGPIOBit_u8>
 800277e:	4603      	mov	r3, r0
 8002780:	4619      	mov	r1, r3
 8002782:	4620      	mov	r0, r4
 8002784:	f001 f81e 	bl	80037c4 <RCC_EnableClock_v>
			RCC_GetRCCGPIOBit_u8(L_GPIOid_u8+1));

	if (Arg_PIN_Cu8 <= 7){
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	2b07      	cmp	r3, #7
 800278c:	d811      	bhi.n	80027b2 <GPIO_MapGPIOPIN_v+0x96>
		GPIO_ID(L_GPIOid_u8)->AFRL |= (Arg_Peripheral_Cu8<<(4*Arg_PIN_Cu8)) ;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <GPIO_MapGPIOPIN_v+0xc4>)
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	78b9      	ldrb	r1, [r7, #2]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4610      	mov	r0, r2
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	490e      	ldr	r1, [pc, #56]	; (80027e0 <GPIO_MapGPIOPIN_v+0xc4>)
 80027a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027ac:	4303      	orrs	r3, r0
 80027ae:	6213      	str	r3, [r2, #32]
	}
	else{
		GPIO_ID(L_GPIOid_u8)->AFRH |= (Arg_Peripheral_Cu8<<(4*(Arg_PIN_Cu8%8))) ;
	}
}
 80027b0:	e012      	b.n	80027d8 <GPIO_MapGPIOPIN_v+0xbc>
		GPIO_ID(L_GPIOid_u8)->AFRH |= (Arg_Peripheral_Cu8<<(4*(Arg_PIN_Cu8%8))) ;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <GPIO_MapGPIOPIN_v+0xc4>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	78b9      	ldrb	r1, [r7, #2]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	f002 0207 	and.w	r2, r2, #7
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ca:	4610      	mov	r0, r2
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <GPIO_MapGPIOPIN_v+0xc4>)
 80027d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027d4:	4303      	orrs	r3, r0
 80027d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}
 80027e0:	08003fc8 	.word	0x08003fc8

080027e4 <InterruptHandler_Init_v>:
 * */
static void (*GS_DMA_CallBacks_pF[DMA_INSTANCES_MAX_NUMs][DMA_INTERRUPT_STREAMS][DMA_INTERRUPT_FLAG_NUMs])(void);

static void (*GS_USART_CallBacks_pF[USART_INSTANCES_MAX_NUMs][USART_INTERRUPTS_TYPES_NUMs])(void);

void InterruptHandler_Init_v(void){
 80027e4:	b490      	push	{r4, r7}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
	/*Init EXTI Interrupts*/
	for (u8 L_GPIO_u8 = 0;L_GPIO_u8<8;L_GPIO_u8++){
 80027ea:	2300      	movs	r3, #0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	e013      	b.n	8002818 <InterruptHandler_Init_v+0x34>
		for (u8 L_PIN_u8 = 0;L_PIN_u8<16;L_PIN_u8++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	71bb      	strb	r3, [r7, #6]
 80027f4:	e00a      	b.n	800280c <InterruptHandler_Init_v+0x28>
			GS_EXTI_CallBacks_pF[L_GPIO_u8][L_PIN_u8] = NULL;
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	79bb      	ldrb	r3, [r7, #6]
 80027fa:	4930      	ldr	r1, [pc, #192]	; (80028bc <InterruptHandler_Init_v+0xd8>)
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	4413      	add	r3, r2
 8002800:	2200      	movs	r2, #0
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (u8 L_PIN_u8 = 0;L_PIN_u8<16;L_PIN_u8++){
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	3301      	adds	r3, #1
 800280a:	71bb      	strb	r3, [r7, #6]
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	d9f1      	bls.n	80027f6 <InterruptHandler_Init_v+0x12>
	for (u8 L_GPIO_u8 = 0;L_GPIO_u8<8;L_GPIO_u8++){
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	3301      	adds	r3, #1
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d9e8      	bls.n	80027f0 <InterruptHandler_Init_v+0xc>
		}
	}

	/*DMA*/
	for (u8 L_DMAInstanceId_u8 = 0; L_DMAInstanceId_u8<DMA_INSTANCES_MAX_NUMs; L_DMAInstanceId_u8++){
 800281e:	2300      	movs	r3, #0
 8002820:	717b      	strb	r3, [r7, #5]
 8002822:	e025      	b.n	8002870 <InterruptHandler_Init_v+0x8c>
		for (u8 L_DMAStreamId_u8 = 0; L_DMAStreamId_u8<=DMA_INTERRUPT_STREAMS; L_DMAStreamId_u8++){
 8002824:	2300      	movs	r3, #0
 8002826:	713b      	strb	r3, [r7, #4]
 8002828:	e01c      	b.n	8002864 <InterruptHandler_Init_v+0x80>
			for (u8 L_DMAInterruptFlags_u8 = 0; L_DMAInterruptFlags_u8<DMA_INTERRUPT_FLAG_NUMs; L_DMAInterruptFlags_u8++){
 800282a:	2300      	movs	r3, #0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	e013      	b.n	8002858 <InterruptHandler_Init_v+0x74>

				GS_DMA_CallBacks_pF[L_DMAInstanceId_u8][L_DMAStreamId_u8][L_DMAInterruptFlags_u8] = NULL;
 8002830:	7979      	ldrb	r1, [r7, #5]
 8002832:	793b      	ldrb	r3, [r7, #4]
 8002834:	78f8      	ldrb	r0, [r7, #3]
 8002836:	4c22      	ldr	r4, [pc, #136]	; (80028c0 <InterruptHandler_Init_v+0xdc>)
 8002838:	461a      	mov	r2, r3
 800283a:	00d2      	lsls	r2, r2, #3
 800283c:	1ad2      	subs	r2, r2, r3
 800283e:	460b      	mov	r3, r1
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a5b      	subs	r3, r3, r1
 8002844:	00d9      	lsls	r1, r3, #3
 8002846:	1ac9      	subs	r1, r1, r3
 8002848:	1853      	adds	r3, r2, r1
 800284a:	4403      	add	r3, r0
 800284c:	2200      	movs	r2, #0
 800284e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for (u8 L_DMAInterruptFlags_u8 = 0; L_DMAInterruptFlags_u8<DMA_INTERRUPT_FLAG_NUMs; L_DMAInterruptFlags_u8++){
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	3301      	adds	r3, #1
 8002856:	70fb      	strb	r3, [r7, #3]
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d9e8      	bls.n	8002830 <InterruptHandler_Init_v+0x4c>
		for (u8 L_DMAStreamId_u8 = 0; L_DMAStreamId_u8<=DMA_INTERRUPT_STREAMS; L_DMAStreamId_u8++){
 800285e:	793b      	ldrb	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	713b      	strb	r3, [r7, #4]
 8002864:	793b      	ldrb	r3, [r7, #4]
 8002866:	2b07      	cmp	r3, #7
 8002868:	d9df      	bls.n	800282a <InterruptHandler_Init_v+0x46>
	for (u8 L_DMAInstanceId_u8 = 0; L_DMAInstanceId_u8<DMA_INSTANCES_MAX_NUMs; L_DMAInstanceId_u8++){
 800286a:	797b      	ldrb	r3, [r7, #5]
 800286c:	3301      	adds	r3, #1
 800286e:	717b      	strb	r3, [r7, #5]
 8002870:	797b      	ldrb	r3, [r7, #5]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d9d6      	bls.n	8002824 <InterruptHandler_Init_v+0x40>
			}
		}
	}

	/*USART*/
	for (u8 L_USARTInstanceId_u8 = 0; L_USARTInstanceId_u8<USART_INSTANCES_MAX_NUMs; L_USARTInstanceId_u8++){
 8002876:	2300      	movs	r3, #0
 8002878:	70bb      	strb	r3, [r7, #2]
 800287a:	e016      	b.n	80028aa <InterruptHandler_Init_v+0xc6>
		for (u8 L_USARTInterruptType_u8 = 0; L_USARTInterruptType_u8<USART_INTERRUPTS_TYPES_NUMs; L_USARTInterruptType_u8++){
 800287c:	2300      	movs	r3, #0
 800287e:	707b      	strb	r3, [r7, #1]
 8002880:	e00d      	b.n	800289e <InterruptHandler_Init_v+0xba>
			GS_USART_CallBacks_pF[L_USARTInstanceId_u8][L_USARTInterruptType_u8] = NULL;
 8002882:	78ba      	ldrb	r2, [r7, #2]
 8002884:	7879      	ldrb	r1, [r7, #1]
 8002886:	480f      	ldr	r0, [pc, #60]	; (80028c4 <InterruptHandler_Init_v+0xe0>)
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	2200      	movs	r2, #0
 8002894:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (u8 L_USARTInterruptType_u8 = 0; L_USARTInterruptType_u8<USART_INTERRUPTS_TYPES_NUMs; L_USARTInterruptType_u8++){
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	3301      	adds	r3, #1
 800289c:	707b      	strb	r3, [r7, #1]
 800289e:	787b      	ldrb	r3, [r7, #1]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d9ee      	bls.n	8002882 <InterruptHandler_Init_v+0x9e>
	for (u8 L_USARTInstanceId_u8 = 0; L_USARTInstanceId_u8<USART_INSTANCES_MAX_NUMs; L_USARTInstanceId_u8++){
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	3301      	adds	r3, #1
 80028a8:	70bb      	strb	r3, [r7, #2]
 80028aa:	78bb      	ldrb	r3, [r7, #2]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d9e5      	bls.n	800287c <InterruptHandler_Init_v+0x98>
		}
	}

}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc90      	pop	{r4, r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000070 	.word	0x20000070
 80028c0:	20000270 	.word	0x20000270
 80028c4:	200003f8 	.word	0x200003f8

080028c8 <NMI_Handler>:





void NMI_Handler(void){
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HardFault_Handler>:
void HardFault_Handler(void){
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <MemManage_Handler>:
void MemManage_Handler(void){
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <BusFault_Handler>:
void BusFault_Handler(void){
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <UsageFault_Handler>:
void UsageFault_Handler(void){
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <SVC_Handler>:
#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)
void SVC_Handler(void){
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
#if CONFIG_USE_SVC_INTERUPT	== 1
	if (InterruptHandler_SVCCallback_void != NULL){
		InterruptHandler_SVCCallback_void();
	}
#endif
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DebugMon_Handler>:
#endif
void DebugMon_Handler(void){
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <PendSV_Handler>:

#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)
void PendSV_Handler(void){
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <WWDG_IRQHandler>:
#endif

void WWDG_IRQHandler(void){
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	/* Window Watchdog interrupt*/

}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <PVD_IRQHandler>:
void PVD_IRQHandler(void){
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
	/* PVD through EXTI line detection interrupt*/

}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <TAMP_STAMP_IRQHandler>:
void TAMP_STAMP_IRQHandler(void){
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
	/* Tamper and TimeStamp interrupts through the EXTI line*/

}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void){
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
	/* RTC Wakeup interrupt through the EXTI line*/

}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <RCC_IRQHandler>:
void RCC_IRQHandler(void){
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	/* RCC global interrupt*/

}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler (void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	/* EXTI Line0 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002986:	2300      	movs	r3, #0
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	e026      	b.n	80029da <EXTI0_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fbd4 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d11c      	bne.n	80029d4 <EXTI0_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(0)][L_i_u8]){
 800299a:	2000      	movs	r0, #0
 800299c:	f001 f828 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4911      	ldr	r1, [pc, #68]	; (80029ec <EXTI0_IRQHandler+0x6c>)
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <EXTI0_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(0)][L_i_u8]();
 80029b4:	2000      	movs	r0, #0
 80029b6:	f001 f81b 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	490a      	ldr	r1, [pc, #40]	; (80029ec <EXTI0_IRQHandler+0x6c>)
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029ca:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fbce 	bl	8002170 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	3301      	adds	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d9d5      	bls.n	800298c <EXTI0_IRQHandler+0xc>
		}
		else{

		}
	}
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000070 	.word	0x20000070

080029f0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	/* EXTI Line1 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	e026      	b.n	8002a4a <EXTI1_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fb9c 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d11c      	bne.n	8002a44 <EXTI1_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(1)][L_i_u8]){
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f000 fff0 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4911      	ldr	r1, [pc, #68]	; (8002a5c <EXTI1_IRQHandler+0x6c>)
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00f      	beq.n	8002a44 <EXTI1_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(1)][L_i_u8]();
 8002a24:	2001      	movs	r0, #1
 8002a26:	f000 ffe3 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	490a      	ldr	r1, [pc, #40]	; (8002a5c <EXTI1_IRQHandler+0x6c>)
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a3a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fb96 	bl	8002170 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	3301      	adds	r3, #1
 8002a48:	71fb      	strb	r3, [r7, #7]
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d9d5      	bls.n	80029fc <EXTI1_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000070 	.word	0x20000070

08002a60 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
	/* EXTI Line2 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002a66:	2300      	movs	r3, #0
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	e026      	b.n	8002aba <EXTI2_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fb64 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d11c      	bne.n	8002ab4 <EXTI2_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(2)][L_i_u8]){
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f000 ffb8 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4911      	ldr	r1, [pc, #68]	; (8002acc <EXTI2_IRQHandler+0x6c>)
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00f      	beq.n	8002ab4 <EXTI2_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(2)][L_i_u8]();
 8002a94:	2002      	movs	r0, #2
 8002a96:	f000 ffab 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	490a      	ldr	r1, [pc, #40]	; (8002acc <EXTI2_IRQHandler+0x6c>)
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aaa:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fb5e 	bl	8002170 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d9d5      	bls.n	8002a6c <EXTI2_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000070 	.word	0x20000070

08002ad0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
	/* EXTI Line3 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	e026      	b.n	8002b2a <EXTI3_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb2c 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d11c      	bne.n	8002b24 <EXTI3_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(3)][L_i_u8]){
 8002aea:	2003      	movs	r0, #3
 8002aec:	f000 ff80 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	4911      	ldr	r1, [pc, #68]	; (8002b3c <EXTI3_IRQHandler+0x6c>)
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00f      	beq.n	8002b24 <EXTI3_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(3)][L_i_u8]();
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 ff73 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	490a      	ldr	r1, [pc, #40]	; (8002b3c <EXTI3_IRQHandler+0x6c>)
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b1a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fb26 	bl	8002170 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	3301      	adds	r3, #1
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d9d5      	bls.n	8002adc <EXTI3_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000070 	.word	0x20000070

08002b40 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	/* EXTI Line4 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002b46:	2300      	movs	r3, #0
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	e026      	b.n	8002b9a <EXTI4_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff faf4 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d11c      	bne.n	8002b94 <EXTI4_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(4)][L_i_u8]){
 8002b5a:	2004      	movs	r0, #4
 8002b5c:	f000 ff48 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4911      	ldr	r1, [pc, #68]	; (8002bac <EXTI4_IRQHandler+0x6c>)
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00f      	beq.n	8002b94 <EXTI4_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(4)][L_i_u8]();
 8002b74:	2004      	movs	r0, #4
 8002b76:	f000 ff3b 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	490a      	ldr	r1, [pc, #40]	; (8002bac <EXTI4_IRQHandler+0x6c>)
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b8a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff faee 	bl	8002170 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	3301      	adds	r3, #1
 8002b98:	71fb      	strb	r3, [r7, #7]
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d9d5      	bls.n	8002b4c <EXTI4_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000070 	.word	0x20000070

08002bb0 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
	/* DMA1 Stream0 global interrupt*/
	DMA_HANDLER(1, 0);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e01b      	b.n	8002bf4 <DMA1_Stream0_IRQHandler+0x44>
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d014      	beq.n	8002bec <DMA1_Stream0_IRQHandler+0x3c>
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff fa29 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <DMA1_Stream0_IRQHandler+0x3e>
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <DMA1_Stream0_IRQHandler+0x54>)
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <DMA1_Stream0_IRQHandler+0x3e>
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <DMA1_Stream0_IRQHandler+0x54>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	4798      	blx	r3
 8002bea:	e000      	b.n	8002bee <DMA1_Stream0_IRQHandler+0x3e>
 8002bec:	bf00      	nop
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d9e0      	bls.n	8002bbc <DMA1_Stream0_IRQHandler+0xc>
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000270 	.word	0x20000270

08002c08 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
	/* DMA1 Stream1 global interrupt*/
	DMA_HANDLER(1, 1);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	71fb      	strb	r3, [r7, #7]
 8002c12:	e01d      	b.n	8002c50 <DMA1_Stream1_IRQHandler+0x48>
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d016      	beq.n	8002c48 <DMA1_Stream1_IRQHandler+0x40>
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7ff f9fd 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10e      	bne.n	8002c4a <DMA1_Stream1_IRQHandler+0x42>
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <DMA1_Stream1_IRQHandler+0x58>)
 8002c30:	3307      	adds	r3, #7
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <DMA1_Stream1_IRQHandler+0x42>
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <DMA1_Stream1_IRQHandler+0x58>)
 8002c3e:	3307      	adds	r3, #7
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	4798      	blx	r3
 8002c46:	e000      	b.n	8002c4a <DMA1_Stream1_IRQHandler+0x42>
 8002c48:	bf00      	nop
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	71fb      	strb	r3, [r7, #7]
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d9de      	bls.n	8002c14 <DMA1_Stream1_IRQHandler+0xc>
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000270 	.word	0x20000270

08002c64 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	/* DMA1 Stream2 global interrupt*/
	DMA_HANDLER(1, 2);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e01d      	b.n	8002cac <DMA1_Stream2_IRQHandler+0x48>
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d016      	beq.n	8002ca4 <DMA1_Stream2_IRQHandler+0x40>
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7ff f9cf 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10e      	bne.n	8002ca6 <DMA1_Stream2_IRQHandler+0x42>
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <DMA1_Stream2_IRQHandler+0x58>)
 8002c8c:	330e      	adds	r3, #14
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <DMA1_Stream2_IRQHandler+0x42>
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <DMA1_Stream2_IRQHandler+0x58>)
 8002c9a:	330e      	adds	r3, #14
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	4798      	blx	r3
 8002ca2:	e000      	b.n	8002ca6 <DMA1_Stream2_IRQHandler+0x42>
 8002ca4:	bf00      	nop
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d9de      	bls.n	8002c70 <DMA1_Stream2_IRQHandler+0xc>
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000270 	.word	0x20000270

08002cc0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
	/* DMA1 Stream3 global interrupt*/
	DMA_HANDLER(1, 3);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	e01d      	b.n	8002d08 <DMA1_Stream3_IRQHandler+0x48>
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d016      	beq.n	8002d00 <DMA1_Stream3_IRQHandler+0x40>
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7ff f9a1 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10e      	bne.n	8002d02 <DMA1_Stream3_IRQHandler+0x42>
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <DMA1_Stream3_IRQHandler+0x58>)
 8002ce8:	3315      	adds	r3, #21
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <DMA1_Stream3_IRQHandler+0x42>
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <DMA1_Stream3_IRQHandler+0x58>)
 8002cf6:	3315      	adds	r3, #21
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	4798      	blx	r3
 8002cfe:	e000      	b.n	8002d02 <DMA1_Stream3_IRQHandler+0x42>
 8002d00:	bf00      	nop
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	3301      	adds	r3, #1
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d9de      	bls.n	8002ccc <DMA1_Stream3_IRQHandler+0xc>
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000270 	.word	0x20000270

08002d1c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
	/* DMA1 Stream4 global interrupt*/
	DMA_HANDLER(1, 4);
 8002d22:	2300      	movs	r3, #0
 8002d24:	71fb      	strb	r3, [r7, #7]
 8002d26:	e01d      	b.n	8002d64 <DMA1_Stream4_IRQHandler+0x48>
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d016      	beq.n	8002d5c <DMA1_Stream4_IRQHandler+0x40>
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	461a      	mov	r2, r3
 8002d32:	2104      	movs	r1, #4
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff f973 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10e      	bne.n	8002d5e <DMA1_Stream4_IRQHandler+0x42>
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <DMA1_Stream4_IRQHandler+0x58>)
 8002d44:	331c      	adds	r3, #28
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <DMA1_Stream4_IRQHandler+0x42>
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <DMA1_Stream4_IRQHandler+0x58>)
 8002d52:	331c      	adds	r3, #28
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	4798      	blx	r3
 8002d5a:	e000      	b.n	8002d5e <DMA1_Stream4_IRQHandler+0x42>
 8002d5c:	bf00      	nop
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	3301      	adds	r3, #1
 8002d62:	71fb      	strb	r3, [r7, #7]
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d9de      	bls.n	8002d28 <DMA1_Stream4_IRQHandler+0xc>
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000270 	.word	0x20000270

08002d78 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
	/* DMA1 Stream5 global interrupt*/
	DMA_HANDLER(1, 5);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	e01d      	b.n	8002dc0 <DMA1_Stream5_IRQHandler+0x48>
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d016      	beq.n	8002db8 <DMA1_Stream5_IRQHandler+0x40>
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2105      	movs	r1, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7ff f945 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10e      	bne.n	8002dba <DMA1_Stream5_IRQHandler+0x42>
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <DMA1_Stream5_IRQHandler+0x58>)
 8002da0:	3323      	adds	r3, #35	; 0x23
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <DMA1_Stream5_IRQHandler+0x42>
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <DMA1_Stream5_IRQHandler+0x58>)
 8002dae:	3323      	adds	r3, #35	; 0x23
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	4798      	blx	r3
 8002db6:	e000      	b.n	8002dba <DMA1_Stream5_IRQHandler+0x42>
 8002db8:	bf00      	nop
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d9de      	bls.n	8002d84 <DMA1_Stream5_IRQHandler+0xc>
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000270 	.word	0x20000270

08002dd4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	/* DMA1 Stream6 global interrupt*/
	DMA_HANDLER(1, 6);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	71fb      	strb	r3, [r7, #7]
 8002dde:	e01d      	b.n	8002e1c <DMA1_Stream6_IRQHandler+0x48>
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d016      	beq.n	8002e14 <DMA1_Stream6_IRQHandler+0x40>
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	461a      	mov	r2, r3
 8002dea:	2106      	movs	r1, #6
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7ff f917 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10e      	bne.n	8002e16 <DMA1_Stream6_IRQHandler+0x42>
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <DMA1_Stream6_IRQHandler+0x58>)
 8002dfc:	332a      	adds	r3, #42	; 0x2a
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <DMA1_Stream6_IRQHandler+0x42>
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <DMA1_Stream6_IRQHandler+0x58>)
 8002e0a:	332a      	adds	r3, #42	; 0x2a
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	4798      	blx	r3
 8002e12:	e000      	b.n	8002e16 <DMA1_Stream6_IRQHandler+0x42>
 8002e14:	bf00      	nop
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d9de      	bls.n	8002de0 <DMA1_Stream6_IRQHandler+0xc>
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000270 	.word	0x20000270

08002e30 <ADC_IRQHandler>:
void ADC_IRQHandler(void){
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
	/* ADC3 global interrupts*/
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
	/* CAN1 TX interrupts*/

}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void){
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	/* CAN1 RX0 interrupts*/


}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
	/* CAN1 RX1 interrupts*/
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	/* CAN1 SCE interrupt*/

}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
	/* EXTI Line[9:5] interrupts*/

	for (u8 L_EXTILine_u8 = 5;L_EXTILine_u8<=9;L_EXTILine_u8++){
 8002e7e:	2305      	movs	r3, #5
 8002e80:	71fb      	strb	r3, [r7, #7]
 8002e82:	e031      	b.n	8002ee8 <EXTI9_5_IRQHandler+0x70>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002e84:	2300      	movs	r3, #0
 8002e86:	71bb      	strb	r3, [r7, #6]
 8002e88:	e028      	b.n	8002edc <EXTI9_5_IRQHandler+0x64>
			if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f955 	bl	800213c <EXTI_CheckInterrupt_Bool>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d11e      	bne.n	8002ed6 <EXTI9_5_IRQHandler+0x5e>
				if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8)][L_i_u8]){
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fda8 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	4914      	ldr	r1, [pc, #80]	; (8002ef8 <EXTI9_5_IRQHandler+0x80>)
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <EXTI9_5_IRQHandler+0x5e>
					GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8)][L_i_u8]();
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd9a 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79bb      	ldrb	r3, [r7, #6]
 8002ec2:	490d      	ldr	r1, [pc, #52]	; (8002ef8 <EXTI9_5_IRQHandler+0x80>)
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ecc:	4798      	blx	r3
					EXTI_ClearInterrupt_v(L_i_u8);
 8002ece:	79bb      	ldrb	r3, [r7, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f94d 	bl	8002170 <EXTI_ClearInterrupt_v>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	71bb      	strb	r3, [r7, #6]
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	d9d3      	bls.n	8002e8a <EXTI9_5_IRQHandler+0x12>
	for (u8 L_EXTILine_u8 = 5;L_EXTILine_u8<=9;L_EXTILine_u8++){
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	d9ca      	bls.n	8002e84 <EXTI9_5_IRQHandler+0xc>
		}
	}



}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000070 	.word	0x20000070

08002efc <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	/* TIM1 Break interrupt and TIM9 global interrupt*/
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void){
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
	/* TIM1 Update interrupt and TIM10 global interrupt*/
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	/* TIM1 Trigger and Commutation interrupts and TIM11 global interrupt */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void){
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
/* TIM1 Capture Compare interrupt*/}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void){
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	/* TIM2 global interrupt*/
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
	/* TIM3 global interrupt*/
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void){
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
	/* TIM4 global interrupt*/
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void){
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
	/* I2C1 event interrupt*/
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	/* I2C1 error interrupt*/
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void){
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
	/* I2C2 event interrupt*/
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler (void){
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	/* I2C2 error interrupt*/
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void){
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
		InterruptHandler_SPI1ErrorUnderrunCallback_void();
	}

#endif

}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void){
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
		InterruptHandler_SPI2ErrorUnderrunCallback_void();
	}

#endif

}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	/* USART1 global interrupt*/
	USART_HANDLER(1);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]
 8002fbe:	e015      	b.n	8002fec <USART1_IRQHandler+0x38>
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f000 fd35 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10a      	bne.n	8002fe6 <USART1_IRQHandler+0x32>
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <USART1_IRQHandler+0x48>)
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <USART1_IRQHandler+0x32>
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <USART1_IRQHandler+0x48>)
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	4798      	blx	r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b09      	cmp	r3, #9
 8002ff0:	d9e6      	bls.n	8002fc0 <USART1_IRQHandler+0xc>
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200003f8 	.word	0x200003f8

08003000 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
	/* USART2 global interrupt*/
	USART_HANDLER(2);
 8003006:	2300      	movs	r3, #0
 8003008:	71fb      	strb	r3, [r7, #7]
 800300a:	e017      	b.n	800303c <USART2_IRQHandler+0x3c>
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	4619      	mov	r1, r3
 8003010:	2002      	movs	r0, #2
 8003012:	f000 fd0f 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10c      	bne.n	8003036 <USART2_IRQHandler+0x36>
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <USART2_IRQHandler+0x4c>)
 8003020:	330a      	adds	r3, #10
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <USART2_IRQHandler+0x36>
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <USART2_IRQHandler+0x4c>)
 800302e:	330a      	adds	r3, #10
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	4798      	blx	r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	3301      	adds	r3, #1
 800303a:	71fb      	strb	r3, [r7, #7]
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b09      	cmp	r3, #9
 8003040:	d9e4      	bls.n	800300c <USART2_IRQHandler+0xc>
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200003f8 	.word	0x200003f8

08003050 <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
	/* USART3 global interrupt*/
	USART_HANDLER(3);
 8003056:	2300      	movs	r3, #0
 8003058:	71fb      	strb	r3, [r7, #7]
 800305a:	e017      	b.n	800308c <USART3_IRQHandler+0x3c>
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4619      	mov	r1, r3
 8003060:	2003      	movs	r0, #3
 8003062:	f000 fce7 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10c      	bne.n	8003086 <USART3_IRQHandler+0x36>
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <USART3_IRQHandler+0x4c>)
 8003070:	3314      	adds	r3, #20
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <USART3_IRQHandler+0x36>
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4a07      	ldr	r2, [pc, #28]	; (800309c <USART3_IRQHandler+0x4c>)
 800307e:	3314      	adds	r3, #20
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	4798      	blx	r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	3301      	adds	r3, #1
 800308a:	71fb      	strb	r3, [r7, #7]
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	2b09      	cmp	r3, #9
 8003090:	d9e4      	bls.n	800305c <USART3_IRQHandler+0xc>
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200003f8 	.word	0x200003f8

080030a0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
	/* EXTI Line[15:10] interrupts*/

	for (u8 L_EXTILine_u8 = 10;L_EXTILine_u8<=15;L_EXTILine_u8++){
 80030a6:	230a      	movs	r3, #10
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	e02d      	b.n	8003108 <EXTI15_10_IRQHandler+0x68>

		u8 L_ActiveGPIO_u8 = SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fc9e 	bl	80039f0 <SYSCFG_GetActiveGPIO_u8>
 80030b4:	4603      	mov	r3, r0
 80030b6:	717b      	strb	r3, [r7, #5]

		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 80030b8:	2300      	movs	r3, #0
 80030ba:	71bb      	strb	r3, [r7, #6]
 80030bc:	e01e      	b.n	80030fc <EXTI15_10_IRQHandler+0x5c>
			if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f83b 	bl	800213c <EXTI_CheckInterrupt_Bool>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d114      	bne.n	80030f6 <EXTI15_10_IRQHandler+0x56>
				if (NULL != GS_EXTI_CallBacks_pF[L_ActiveGPIO_u8][L_i_u8]){
 80030cc:	797a      	ldrb	r2, [r7, #5]
 80030ce:	79bb      	ldrb	r3, [r7, #6]
 80030d0:	4911      	ldr	r1, [pc, #68]	; (8003118 <EXTI15_10_IRQHandler+0x78>)
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	4413      	add	r3, r2
 80030d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <EXTI15_10_IRQHandler+0x56>

					GS_EXTI_CallBacks_pF[L_ActiveGPIO_u8][L_i_u8]();
 80030de:	797a      	ldrb	r2, [r7, #5]
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	490d      	ldr	r1, [pc, #52]	; (8003118 <EXTI15_10_IRQHandler+0x78>)
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	4413      	add	r3, r2
 80030e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ec:	4798      	blx	r3
					EXTI_ClearInterrupt_v(L_i_u8);
 80030ee:	79bb      	ldrb	r3, [r7, #6]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f83d 	bl	8002170 <EXTI_ClearInterrupt_v>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	3301      	adds	r3, #1
 80030fa:	71bb      	strb	r3, [r7, #6]
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d9dd      	bls.n	80030be <EXTI15_10_IRQHandler+0x1e>
	for (u8 L_EXTILine_u8 = 10;L_EXTILine_u8<=15;L_EXTILine_u8++){
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	3301      	adds	r3, #1
 8003106:	71fb      	strb	r3, [r7, #7]
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d9ce      	bls.n	80030ac <EXTI15_10_IRQHandler+0xc>

			}
		}
	}

}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000070 	.word	0x20000070

0800311c <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void){
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
	/* RTC Alarms (A and B) through EXTI line interrupt*/
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <OTG_FS_WKUP_IRQHandler>:
void OTG_FS_WKUP_IRQHandler(void){
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
	/* USB On-The-Go FS Wakeup through EXTI line interrupt*/
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void){
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	/* TIM8 Break interrupt and TIM12 global interrupt*/
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void){
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
	/* TIM8 Update interrupt and TIM13 global interrupt*/
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
	/* TIM8 Trigger and Commutation interrupts and TIM14 global interrupt*/
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void){
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
	/* TIM8 Capture Compare interrupt*/
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
	/* DMA1 Stream7 global interrupt*/
	DMA_HANDLER(1, 7);
 8003176:	2300      	movs	r3, #0
 8003178:	71fb      	strb	r3, [r7, #7]
 800317a:	e01d      	b.n	80031b8 <DMA1_Stream7_IRQHandler+0x48>
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d016      	beq.n	80031b0 <DMA1_Stream7_IRQHandler+0x40>
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	461a      	mov	r2, r3
 8003186:	2107      	movs	r1, #7
 8003188:	2001      	movs	r0, #1
 800318a:	f7fe ff49 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10e      	bne.n	80031b2 <DMA1_Stream7_IRQHandler+0x42>
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <DMA1_Stream7_IRQHandler+0x58>)
 8003198:	3331      	adds	r3, #49	; 0x31
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <DMA1_Stream7_IRQHandler+0x42>
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <DMA1_Stream7_IRQHandler+0x58>)
 80031a6:	3331      	adds	r3, #49	; 0x31
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	4798      	blx	r3
 80031ae:	e000      	b.n	80031b2 <DMA1_Stream7_IRQHandler+0x42>
 80031b0:	bf00      	nop
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	3301      	adds	r3, #1
 80031b6:	71fb      	strb	r3, [r7, #7]
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d9de      	bls.n	800317c <DMA1_Stream7_IRQHandler+0xc>
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000270 	.word	0x20000270

080031cc <FSMC_IRQHandler>:
void FSMC_IRQHandler(void){
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	/* FSMC global interrupt*/
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <SDIO_IRQHandler>:
void SDIO_IRQHandler(void){
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
	/* SDIO global interrupt*/
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	/* TIM5 global interrupt*/
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void){
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
	}

#endif


}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART4_IRQHandler>:
void UART4_IRQHandler(void){
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
	/* UART4 global interrupt*/
	USART_HANDLER(4);
 800320a:	2300      	movs	r3, #0
 800320c:	71fb      	strb	r3, [r7, #7]
 800320e:	e017      	b.n	8003240 <UART4_IRQHandler+0x3c>
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4619      	mov	r1, r3
 8003214:	2004      	movs	r0, #4
 8003216:	f000 fc0d 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <UART4_IRQHandler+0x36>
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <UART4_IRQHandler+0x4c>)
 8003224:	331e      	adds	r3, #30
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <UART4_IRQHandler+0x36>
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	4a07      	ldr	r2, [pc, #28]	; (8003250 <UART4_IRQHandler+0x4c>)
 8003232:	331e      	adds	r3, #30
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	4798      	blx	r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	3301      	adds	r3, #1
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2b09      	cmp	r3, #9
 8003244:	d9e4      	bls.n	8003210 <UART4_IRQHandler+0xc>
}
 8003246:	bf00      	nop
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200003f8 	.word	0x200003f8

08003254 <UART5_IRQHandler>:
void UART5_IRQHandler(void){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
	/*UART5 global interrupt*/
	USART_HANDLER(5);
 800325a:	2300      	movs	r3, #0
 800325c:	71fb      	strb	r3, [r7, #7]
 800325e:	e017      	b.n	8003290 <UART5_IRQHandler+0x3c>
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	4619      	mov	r1, r3
 8003264:	2005      	movs	r0, #5
 8003266:	f000 fbe5 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10c      	bne.n	800328a <UART5_IRQHandler+0x36>
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <UART5_IRQHandler+0x4c>)
 8003274:	3328      	adds	r3, #40	; 0x28
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <UART5_IRQHandler+0x36>
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <UART5_IRQHandler+0x4c>)
 8003282:	3328      	adds	r3, #40	; 0x28
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	4798      	blx	r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	3301      	adds	r3, #1
 800328e:	71fb      	strb	r3, [r7, #7]
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b09      	cmp	r3, #9
 8003294:	d9e4      	bls.n	8003260 <UART5_IRQHandler+0xc>

}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200003f8 	.word	0x200003f8

080032a4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void){
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
	if (InterruptHandler_TIM6UpdateCallback_void != NULL){
		CLEAR_BIT(TIM6->SR, 0);
		InterruptHandler_TIM6UpdateCallback_void();
	}
#endif
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void){
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
	if (InterruptHandler_TIM7UpdateCallback_void != NULL){
		CLEAR_BIT(TIM7->SR, 0);
		InterruptHandler_TIM7UpdateCallback_void();
	}
#endif
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	/* DMA2 Stream0 global interrupt*/
	DMA_HANDLER(2, 0);
 80032c6:	2300      	movs	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
 80032ca:	e01d      	b.n	8003308 <DMA2_Stream0_IRQHandler+0x48>
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d016      	beq.n	8003300 <DMA2_Stream0_IRQHandler+0x40>
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	461a      	mov	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	2002      	movs	r0, #2
 80032da:	f7fe fea1 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10e      	bne.n	8003302 <DMA2_Stream0_IRQHandler+0x42>
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <DMA2_Stream0_IRQHandler+0x58>)
 80032e8:	3331      	adds	r3, #49	; 0x31
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <DMA2_Stream0_IRQHandler+0x42>
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	4a08      	ldr	r2, [pc, #32]	; (8003318 <DMA2_Stream0_IRQHandler+0x58>)
 80032f6:	3331      	adds	r3, #49	; 0x31
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	4798      	blx	r3
 80032fe:	e000      	b.n	8003302 <DMA2_Stream0_IRQHandler+0x42>
 8003300:	bf00      	nop
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	3301      	adds	r3, #1
 8003306:	71fb      	strb	r3, [r7, #7]
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d9de      	bls.n	80032cc <DMA2_Stream0_IRQHandler+0xc>

}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000270 	.word	0x20000270

0800331c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
	/* DMA2 Stream1 global interrupt*/
	DMA_HANDLER(2, 1);
 8003322:	2300      	movs	r3, #0
 8003324:	71fb      	strb	r3, [r7, #7]
 8003326:	e01d      	b.n	8003364 <DMA2_Stream1_IRQHandler+0x48>
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d016      	beq.n	800335c <DMA2_Stream1_IRQHandler+0x40>
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	461a      	mov	r2, r3
 8003332:	2101      	movs	r1, #1
 8003334:	2002      	movs	r0, #2
 8003336:	f7fe fe73 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 800333a:	4603      	mov	r3, r0
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10e      	bne.n	800335e <DMA2_Stream1_IRQHandler+0x42>
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <DMA2_Stream1_IRQHandler+0x58>)
 8003344:	3338      	adds	r3, #56	; 0x38
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <DMA2_Stream1_IRQHandler+0x42>
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <DMA2_Stream1_IRQHandler+0x58>)
 8003352:	3338      	adds	r3, #56	; 0x38
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	4798      	blx	r3
 800335a:	e000      	b.n	800335e <DMA2_Stream1_IRQHandler+0x42>
 800335c:	bf00      	nop
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	3301      	adds	r3, #1
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	2b06      	cmp	r3, #6
 8003368:	d9de      	bls.n	8003328 <DMA2_Stream1_IRQHandler+0xc>
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000270 	.word	0x20000270

08003378 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
	/* DMA2 Stream2 global interrupt*/
	DMA_HANDLER(2, 2);
 800337e:	2300      	movs	r3, #0
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	e01d      	b.n	80033c0 <DMA2_Stream2_IRQHandler+0x48>
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d016      	beq.n	80033b8 <DMA2_Stream2_IRQHandler+0x40>
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	461a      	mov	r2, r3
 800338e:	2102      	movs	r1, #2
 8003390:	2002      	movs	r0, #2
 8003392:	f7fe fe45 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 8003396:	4603      	mov	r3, r0
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10e      	bne.n	80033ba <DMA2_Stream2_IRQHandler+0x42>
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <DMA2_Stream2_IRQHandler+0x58>)
 80033a0:	333f      	adds	r3, #63	; 0x3f
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <DMA2_Stream2_IRQHandler+0x42>
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <DMA2_Stream2_IRQHandler+0x58>)
 80033ae:	333f      	adds	r3, #63	; 0x3f
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	4798      	blx	r3
 80033b6:	e000      	b.n	80033ba <DMA2_Stream2_IRQHandler+0x42>
 80033b8:	bf00      	nop
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	3301      	adds	r3, #1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d9de      	bls.n	8003384 <DMA2_Stream2_IRQHandler+0xc>
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000270 	.word	0x20000270

080033d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
	/* DMA2 Stream3 global interrupt*/
	DMA_HANDLER(2, 3);
 80033da:	2300      	movs	r3, #0
 80033dc:	71fb      	strb	r3, [r7, #7]
 80033de:	e01d      	b.n	800341c <DMA2_Stream3_IRQHandler+0x48>
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d016      	beq.n	8003414 <DMA2_Stream3_IRQHandler+0x40>
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	461a      	mov	r2, r3
 80033ea:	2103      	movs	r1, #3
 80033ec:	2002      	movs	r0, #2
 80033ee:	f7fe fe17 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10e      	bne.n	8003416 <DMA2_Stream3_IRQHandler+0x42>
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <DMA2_Stream3_IRQHandler+0x58>)
 80033fc:	3346      	adds	r3, #70	; 0x46
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <DMA2_Stream3_IRQHandler+0x42>
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <DMA2_Stream3_IRQHandler+0x58>)
 800340a:	3346      	adds	r3, #70	; 0x46
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	4798      	blx	r3
 8003412:	e000      	b.n	8003416 <DMA2_Stream3_IRQHandler+0x42>
 8003414:	bf00      	nop
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	3301      	adds	r3, #1
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	2b06      	cmp	r3, #6
 8003420:	d9de      	bls.n	80033e0 <DMA2_Stream3_IRQHandler+0xc>
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000270 	.word	0x20000270

08003430 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
	/* DMA2 Stream4 global interrupt*/
	DMA_HANDLER(2, 4);
 8003436:	2300      	movs	r3, #0
 8003438:	71fb      	strb	r3, [r7, #7]
 800343a:	e01d      	b.n	8003478 <DMA2_Stream4_IRQHandler+0x48>
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d016      	beq.n	8003470 <DMA2_Stream4_IRQHandler+0x40>
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	461a      	mov	r2, r3
 8003446:	2104      	movs	r1, #4
 8003448:	2002      	movs	r0, #2
 800344a:	f7fe fde9 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10e      	bne.n	8003472 <DMA2_Stream4_IRQHandler+0x42>
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <DMA2_Stream4_IRQHandler+0x58>)
 8003458:	334d      	adds	r3, #77	; 0x4d
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <DMA2_Stream4_IRQHandler+0x42>
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <DMA2_Stream4_IRQHandler+0x58>)
 8003466:	334d      	adds	r3, #77	; 0x4d
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	4798      	blx	r3
 800346e:	e000      	b.n	8003472 <DMA2_Stream4_IRQHandler+0x42>
 8003470:	bf00      	nop
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	3301      	adds	r3, #1
 8003476:	71fb      	strb	r3, [r7, #7]
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d9de      	bls.n	800343c <DMA2_Stream4_IRQHandler+0xc>
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000270 	.word	0x20000270

0800348c <ETH_IRQHandler>:
void ETH_IRQHandler(void){
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
	/* Ethernet global interrupt*/
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void){
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
	/*Ethernet Wakeup through EXTI line interrupt*/
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <CAN2_TX_IRQHandler>:
void CAN2_TX_IRQHandler(void){
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
	/* CAN2 TX interrupts*/
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void){
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
	/* CAN2 RX0 interrupts*/
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void){
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	/* CAN2 RX1 interrupts*/
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void){
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
	/* CAN2 SCE interrupt*/

}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void){
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	/* USB On The Go FS global interrupt*/
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
	/* DMA2 Stream5 global interrupt*/
	DMA_HANDLER(2, 5);
 80034f6:	2300      	movs	r3, #0
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	e01d      	b.n	8003538 <DMA2_Stream5_IRQHandler+0x48>
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d016      	beq.n	8003530 <DMA2_Stream5_IRQHandler+0x40>
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	461a      	mov	r2, r3
 8003506:	2105      	movs	r1, #5
 8003508:	2002      	movs	r0, #2
 800350a:	f7fe fd89 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10e      	bne.n	8003532 <DMA2_Stream5_IRQHandler+0x42>
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <DMA2_Stream5_IRQHandler+0x58>)
 8003518:	3354      	adds	r3, #84	; 0x54
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <DMA2_Stream5_IRQHandler+0x42>
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <DMA2_Stream5_IRQHandler+0x58>)
 8003526:	3354      	adds	r3, #84	; 0x54
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	e000      	b.n	8003532 <DMA2_Stream5_IRQHandler+0x42>
 8003530:	bf00      	nop
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	3301      	adds	r3, #1
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d9de      	bls.n	80034fc <DMA2_Stream5_IRQHandler+0xc>
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000270 	.word	0x20000270

0800354c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
	/* DMA2 Stream6 global interrupt*/
	DMA_HANDLER(2, 6);
 8003552:	2300      	movs	r3, #0
 8003554:	71fb      	strb	r3, [r7, #7]
 8003556:	e01d      	b.n	8003594 <DMA2_Stream6_IRQHandler+0x48>
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d016      	beq.n	800358c <DMA2_Stream6_IRQHandler+0x40>
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	461a      	mov	r2, r3
 8003562:	2106      	movs	r1, #6
 8003564:	2002      	movs	r0, #2
 8003566:	f7fe fd5b 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10e      	bne.n	800358e <DMA2_Stream6_IRQHandler+0x42>
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <DMA2_Stream6_IRQHandler+0x58>)
 8003574:	335b      	adds	r3, #91	; 0x5b
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <DMA2_Stream6_IRQHandler+0x42>
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <DMA2_Stream6_IRQHandler+0x58>)
 8003582:	335b      	adds	r3, #91	; 0x5b
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	4798      	blx	r3
 800358a:	e000      	b.n	800358e <DMA2_Stream6_IRQHandler+0x42>
 800358c:	bf00      	nop
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	3301      	adds	r3, #1
 8003592:	71fb      	strb	r3, [r7, #7]
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d9de      	bls.n	8003558 <DMA2_Stream6_IRQHandler+0xc>
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000270 	.word	0x20000270

080035a8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	/* DMA2 Stream7 global interrupt*/
	DMA_HANDLER(2, 7);
 80035ae:	2300      	movs	r3, #0
 80035b0:	71fb      	strb	r3, [r7, #7]
 80035b2:	e01d      	b.n	80035f0 <DMA2_Stream7_IRQHandler+0x48>
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d016      	beq.n	80035e8 <DMA2_Stream7_IRQHandler+0x40>
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	461a      	mov	r2, r3
 80035be:	2107      	movs	r1, #7
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fe fd2d 	bl	8002020 <DMA_CheckInterruptAndClear_Bool>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10e      	bne.n	80035ea <DMA2_Stream7_IRQHandler+0x42>
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <DMA2_Stream7_IRQHandler+0x58>)
 80035d0:	3362      	adds	r3, #98	; 0x62
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <DMA2_Stream7_IRQHandler+0x42>
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <DMA2_Stream7_IRQHandler+0x58>)
 80035de:	3362      	adds	r3, #98	; 0x62
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	4798      	blx	r3
 80035e6:	e000      	b.n	80035ea <DMA2_Stream7_IRQHandler+0x42>
 80035e8:	bf00      	nop
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	3301      	adds	r3, #1
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d9de      	bls.n	80035b4 <DMA2_Stream7_IRQHandler+0xc>
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000270 	.word	0x20000270

08003604 <USART6_IRQHandler>:
void USART6_IRQHandler(void){
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
	/* USART6 global interrupt*/
	USART_HANDLER(6);
 800360a:	2300      	movs	r3, #0
 800360c:	71fb      	strb	r3, [r7, #7]
 800360e:	e017      	b.n	8003640 <USART6_IRQHandler+0x3c>
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	4619      	mov	r1, r3
 8003614:	2006      	movs	r0, #6
 8003616:	f000 fa0d 	bl	8003a34 <USART_CheckInterruptAndClear_Bool>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10c      	bne.n	800363a <USART6_IRQHandler+0x36>
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <USART6_IRQHandler+0x4c>)
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <USART6_IRQHandler+0x36>
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <USART6_IRQHandler+0x4c>)
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	4798      	blx	r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	3301      	adds	r3, #1
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d9e4      	bls.n	8003610 <USART6_IRQHandler+0xc>
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200003f8 	.word	0x200003f8

08003654 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void){
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	/* I2C3 event interrupt*/
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void){
 8003662:	b480      	push	{r7}
 8003664:	af00      	add	r7, sp, #0
	/* I2C3 error interrupt*/
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <OTG_HS_EP1_OUT_IRQHandler>:
void OTG_HS_EP1_OUT_IRQHandler(void){
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	/* USB On The Go HS End Point 1 Out global interrupt*/
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <OTG_HS_EP1_IN_IRQHandler>:
void OTG_HS_EP1_IN_IRQHandler(void){
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
	/* USB On The Go HS End Point 1 In global interrupt*/
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <OTG_HS_WKUP_IRQHandler>:
void OTG_HS_WKUP_IRQHandler(void){
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	/* USB On The Go HS Wakeup through EXTI interrupt*/
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void){
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
	/* USB On The Go HS global interrupt*/
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void){
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
	/* DCMI global interrupt*/
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <CRYP_IRQHandler>:
void CRYP_IRQHandler(void){
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
	/* CRYP crypto global interrupt*/
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HASH_RNG_IRQHandler>:
void HASH_RNG_IRQHandler(void){
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
	/* Hash and Rng global interrupt*/
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <FPU_IRQHandler>:
void FPU_IRQHandler(void){
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
	/* Floating point interrupt*/
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LCD_TFT_IRQHandler>:
void LCD_TFT_IRQHandler(void){
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	/* LTDC global interrupt*/
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LCD_TFT_1_IRQHandler>:
void LCD_TFT_1_IRQHandler(void){
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
	/* LTDC global error interrupt.*/
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <RCC_InitClock_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void RCC_InitClock_v(void){
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
	 * "L_CFGRVal_u32" 	 stores the value of RCC_CFGR register.
	 * "L_CRVal_u32" 	 stores the value of RCC_CR register.
	 * After configurations these variable will store values that match configured parameters,then
	 * registers 's values will be assigned based on these variables.
	 * */
	u32 L_PLLCFGVal_u32 = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
	u32 L_CFGRVal_u32 = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
	u32 L_CRVal_u32 = RCC->CR;
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <RCC_InitClock_v+0xbc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	607b      	str	r3, [r7, #4]
	/* Set PLL M, N, Q */
	L_PLLCFGVal_u32 |= CLOCK_PLL_M | (CLOCK_PLL_N<<6) | (CLOCK_PLL_Q<<24);
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <RCC_InitClock_v+0xc0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
	/* Set PLL P. */
#if CLOCK_PLL_P==2
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_0);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	60fb      	str	r3, [r7, #12]
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_1);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003726:	60fb      	str	r3, [r7, #12]
	SET_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_1);
#endif

	/*Select PLL Clock source, whether it's HSI or HSE*/
#if CLOCK_PLL_SOURCE_MUX == CLOCK_PLL_SOURCE_HSI
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLSRC);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800372e:	60fb      	str	r3, [r7, #12]
	SET_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLSRC);
#endif

	/*Set APB2 prescaler*/
#if CLOCK_APB2_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_0);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003736:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_1);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373e:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_2);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003746:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_2);
#endif

	/*Set APB1 prescaler*/
#if CLOCK_APB1_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_0);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374e:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_1);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003756:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_2);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375e:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_2);
#endif

	/*Set AHB prescaler*/
#if CLOCK_AHB_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_0);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_1);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 0320 	bic.w	r3, r3, #32
 800376e:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_2);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003776:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_3);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377e:	60bb      	str	r3, [r7, #8]
#endif

	/*Select System Clock source, whether it's HSI, HSE, or PLL*/

#if CLOCK_SYSTEM_CLOCK_MUX == CLOCK_SYSTEM_CLOCK_MUX_HSI
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_SWS_0);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 0304 	bic.w	r3, r3, #4
 8003786:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_SWS_1);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f023 0308 	bic.w	r3, r3, #8
 800378e:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CRVal_u32, RCC_CR_PLLON);
#endif
	/*Assigne register values (RCC_PLLCFGR, RCC_CR, or RCC_CFGR) to be as assigned configurations.*/


	RCC->PLLCFGR = L_PLLCFGVal_u32;
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <RCC_InitClock_v+0xbc>)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6053      	str	r3, [r2, #4]
	RCC->CR = L_CRVal_u32;
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <RCC_InitClock_v+0xbc>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]
	RCC->CFGR = L_CFGRVal_u32;
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <RCC_InitClock_v+0xbc>)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6093      	str	r3, [r2, #8]
#else
#error "Undefined voltage region !"
#endif

#if ((OPERATING_FREQUENCY>WAIT_STATE_0_FROM_FREQ) && (OPERATING_FREQUENCY<=WAIT_STATE_0_TO_FREQ))
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 0;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <RCC_InitClock_v+0xc4>)
 80037a4:	4a06      	ldr	r2, [pc, #24]	; (80037c0 <RCC_InitClock_v+0xc4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6013      	str	r3, [r2, #0]
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 7;
#elif ((OPERATING_FREQUENCY>WAIT_STATE_8_FROM_FREQ) && (OPERATING_FREQUENCY<=WAIT_STATE_8_TO_FREQ))
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 8;
#endif

}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	04001208 	.word	0x04001208
 80037c0:	40023c00 	.word	0x40023c00

080037c4 <RCC_EnableClock_v>:


void RCC_EnableClock_v(const u8 Arg_PeripheralBus_Cu8,const u8 Arg_Peripheral_Cu8){
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	460a      	mov	r2, r1
 80037ce:	71fb      	strb	r3, [r7, #7]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71bb      	strb	r3, [r7, #6]
	/*Enable clock of peripheral,
	 * Arg_Peripheral_Cu8 is the location of peripheral's bit on
	 * peripheral bus.*/
	switch (Arg_PeripheralBus_Cu8) {
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d875      	bhi.n	80038c6 <RCC_EnableClock_v+0x102>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <RCC_EnableClock_v+0x1c>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f5 	.word	0x080037f5
 80037e4:	0800381f 	.word	0x0800381f
 80037e8:	08003849 	.word	0x08003849
 80037ec:	08003873 	.word	0x08003873
 80037f0:	0800389d 	.word	0x0800389d
	case RCC_AHB1:
		SET_BIT(RCC->AHB1ENR, Arg_Peripheral_Cu8);
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <RCC_EnableClock_v+0x110>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	79ba      	ldrb	r2, [r7, #6]
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	4611      	mov	r1, r2
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6313      	str	r3, [r2, #48]	; 0x30
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB1ENR, Arg_Peripheral_Cu8)){
 8003808:	bf00      	nop
 800380a:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <RCC_EnableClock_v+0x110>)
 800380c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380e:	79bb      	ldrb	r3, [r7, #6]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f6      	beq.n	800380a <RCC_EnableClock_v+0x46>

		}
		break;
 800381c:	e054      	b.n	80038c8 <RCC_EnableClock_v+0x104>
	case RCC_AHB2:
		SET_BIT(RCC->AHB2ENR, Arg_Peripheral_Cu8);
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	79ba      	ldrb	r2, [r7, #6]
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <RCC_EnableClock_v+0x110>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6353      	str	r3, [r2, #52]	; 0x34
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB2ENR, Arg_Peripheral_Cu8)){
 8003832:	bf00      	nop
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	79bb      	ldrb	r3, [r7, #6]
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f6      	beq.n	8003834 <RCC_EnableClock_v+0x70>

		}
		break;
 8003846:	e03f      	b.n	80038c8 <RCC_EnableClock_v+0x104>
	case RCC_AHB3:
		SET_BIT(RCC->AHB3ENR, Arg_Peripheral_Cu8);
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <RCC_EnableClock_v+0x110>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	79ba      	ldrb	r2, [r7, #6]
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003858:	430b      	orrs	r3, r1
 800385a:	6393      	str	r3, [r2, #56]	; 0x38
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB3ENR, Arg_Peripheral_Cu8)){
 800385c:	bf00      	nop
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	79bb      	ldrb	r3, [r7, #6]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f6      	beq.n	800385e <RCC_EnableClock_v+0x9a>

		}
		break;
 8003870:	e02a      	b.n	80038c8 <RCC_EnableClock_v+0x104>
	case RCC_APB1:
		SET_BIT(RCC->APB1ENR, Arg_Peripheral_Cu8);
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	79ba      	ldrb	r2, [r7, #6]
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4611      	mov	r1, r2
 8003880:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <RCC_EnableClock_v+0x110>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->APB1ENR, Arg_Peripheral_Cu8)){
 8003886:	bf00      	nop
 8003888:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <RCC_EnableClock_v+0x110>)
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	79bb      	ldrb	r3, [r7, #6]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f6      	beq.n	8003888 <RCC_EnableClock_v+0xc4>

		}
		break;
 800389a:	e015      	b.n	80038c8 <RCC_EnableClock_v+0x104>
	case RCC_APB2:
		SET_BIT(RCC->APB2ENR, Arg_Peripheral_Cu8);
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <RCC_EnableClock_v+0x110>)
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	79ba      	ldrb	r2, [r7, #6]
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <RCC_EnableClock_v+0x110>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6453      	str	r3, [r2, #68]	; 0x44
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->APB2ENR, Arg_Peripheral_Cu8)){
 80038b0:	bf00      	nop
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <RCC_EnableClock_v+0x110>)
 80038b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b6:	79bb      	ldrb	r3, [r7, #6]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f6      	beq.n	80038b2 <RCC_EnableClock_v+0xee>

		}
		break;
 80038c4:	e000      	b.n	80038c8 <RCC_EnableClock_v+0x104>
	default:
		/*Error*/
		break;
 80038c6:	bf00      	nop
	}
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40023800 	.word	0x40023800

080038d8 <RCC_GetCortexSystemTimerFrequency_f32>:
f32 RCC_GetHCLKFrequency_f32(void){
	return (((f32)CLOCK_SYSCLK_MHz)/CLOCK_AHB_PRESCALER);
}


f32 RCC_GetCortexSystemTimerFrequency_f32(void){
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	return (f32)(CLOCK_SYSCLK_MHz / (CLOCK_AHB_PRESCALER*CLOCK_PRESCALLER_TO_CORTEX_SYSTEM_TIMER));
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80038e8:	eeb0 0a47 	vmov.f32	s0, s14
 80038ec:	eef0 0a67 	vmov.f32	s1, s15
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <RCC_GetPeripheralBus_u8>:
#else
	return ((f32)CLOCK_SYSCLK_MHz)/(CLOCK_APB2_PRESCALER*CLOCK_AHB_PRESCALER);
#endif
}

u8 RCC_GetPeripheralBus_u8(const u32 Arg_PeripheralAddress_Cu32){
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	u8 L_PeripheralBus_u8 = -1;
 8003900:	23ff      	movs	r3, #255	; 0xff
 8003902:	73fb      	strb	r3, [r7, #15]
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB3_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB3_BUS_TO_ADDRESS) ){
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800390a:	d305      	bcc.n	8003918 <RCC_GetPeripheralBus_u8+0x20>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <RCC_GetPeripheralBus_u8+0x80>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d801      	bhi.n	8003918 <RCC_GetPeripheralBus_u8+0x20>
		L_PeripheralBus_u8 = RCC_AHB3;
 8003914:	2302      	movs	r3, #2
 8003916:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB2_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB2_BUS_TO_ADDRESS) ){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391e:	d305      	bcc.n	800392c <RCC_GetPeripheralBus_u8+0x34>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <RCC_GetPeripheralBus_u8+0x84>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d801      	bhi.n	800392c <RCC_GetPeripheralBus_u8+0x34>
		L_PeripheralBus_u8 = RCC_AHB2;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB1_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB1_BUS_TO_ADDRESS) ){
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <RCC_GetPeripheralBus_u8+0x88>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d905      	bls.n	8003940 <RCC_GetPeripheralBus_u8+0x48>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a13      	ldr	r2, [pc, #76]	; (8003984 <RCC_GetPeripheralBus_u8+0x8c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d801      	bhi.n	8003940 <RCC_GetPeripheralBus_u8+0x48>
		L_PeripheralBus_u8 = RCC_AHB1;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_APB2_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_APB2_BUS_TO_ADDRESS) ){
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <RCC_GetPeripheralBus_u8+0x90>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d905      	bls.n	8003954 <RCC_GetPeripheralBus_u8+0x5c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <RCC_GetPeripheralBus_u8+0x94>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d201      	bcs.n	8003954 <RCC_GetPeripheralBus_u8+0x5c>
		L_PeripheralBus_u8 = RCC_APB2;
 8003950:	2304      	movs	r3, #4
 8003952:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_APB1_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_APB1_BUS_TO_ADDRESS) ){
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395a:	d305      	bcc.n	8003968 <RCC_GetPeripheralBus_u8+0x70>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <RCC_GetPeripheralBus_u8+0x98>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d201      	bcs.n	8003968 <RCC_GetPeripheralBus_u8+0x70>
		L_PeripheralBus_u8 = RCC_APB1;
 8003964:	2303      	movs	r3, #3
 8003966:	73fb      	strb	r3, [r7, #15]
	}

	return L_PeripheralBus_u8;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	a0000fff 	.word	0xa0000fff
 800397c:	50060bff 	.word	0x50060bff
 8003980:	4001ffff 	.word	0x4001ffff
 8003984:	4007ffff 	.word	0x4007ffff
 8003988:	4000ffff 	.word	0x4000ffff
 800398c:	40016c00 	.word	0x40016c00
 8003990:	40008000 	.word	0x40008000

08003994 <RCC_GetRCCGPIOBit_u8>:
	};
	return L_TimerBit_Cu8[Arg_TimerInstanceId_Cu8-1];
}


u8 RCC_GetRCCGPIOBit_u8(const u8 Arg_GPIOInstanceId_Cu8){
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	/*Map each GPIO instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_GPIOBit_Cu8[] = {
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <RCC_GetRCCGPIOBit_u8+0x30>)
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a8:	e883 0003 	stmia.w	r3, {r0, r1}
			RCC_GPIOF, // GPIOF
			RCC_GPIOG, // GPIOG
			RCC_GPIOH, // GPIOH

	};
	return L_GPIOBit_Cu8[Arg_GPIOInstanceId_Cu8-1];
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	3310      	adds	r3, #16
 80039b2:	443b      	add	r3, r7
 80039b4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	08003fa0 	.word	0x08003fa0

080039c8 <RCC_GetRCCCANBit_u8>:

	return L_USARTBit_Cu8[Arg_USARTInstanceId_Cu8 - 1];
}


u8 RCC_GetRCCCANBit_u8(const u8 Arg_CANInstanceId_Cu8){
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
	/*Map each CAN instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_CANBit_Cu8[] = {
 80039d2:	f641 2319 	movw	r3, #6681	; 0x1a19
 80039d6:	81bb      	strh	r3, [r7, #12]
			RCC_CAN1,
			RCC_CAN2,
	};

	return L_CANBit_Cu8[Arg_CANInstanceId_Cu8 - 1];
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	3b01      	subs	r3, #1
 80039dc:	3310      	adds	r3, #16
 80039de:	443b      	add	r3, r7
 80039e0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <SYSCFG_GetActiveGPIO_u8>:
	RCC_EnableClock_v(RCC_GetPeripheralBus_u8((u32)SYSCFG), RCC_SYSCFG);
	SYSCFG->EXTICR[Arg_EXTIPinNum_u8/4] &= ~((0xF) << ((Arg_EXTIPinNum_u8%4)*4));
	SYSCFG->EXTICR[Arg_EXTIPinNum_u8/4] |= ((Arg_GPIO_u8&0xF) << ((Arg_EXTIPinNum_u8%4)*4));
}

u8 SYSCFG_GetActiveGPIO_u8(u8 Arg_LineNumber_u8){
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
	u8 L_ActiveGPIO_u8;
	L_ActiveGPIO_u8 = SYSCFG->EXTICR[Arg_LineNumber_u8/4];
 80039fa:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <SYSCFG_GetActiveGPIO_u8+0x40>)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3302      	adds	r3, #2
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	73fb      	strb	r3, [r7, #15]
	L_ActiveGPIO_u8 >>= ((Arg_LineNumber_u8%4)*4);
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa42 f303 	asr.w	r3, r2, r3
 8003a18:	73fb      	strb	r3, [r7, #15]
	L_ActiveGPIO_u8 &= 0xF;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	73fb      	strb	r3, [r7, #15]

	return L_ActiveGPIO_u8;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40013800 	.word	0x40013800

08003a34 <USART_CheckInterruptAndClear_Bool>:
u32 USART_GetAdressForDMA_u32(USART_Cfg const * const Arg_conf_cpcUSART_Cfg){
	return (u32)&USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->DR;
}


Bool USART_CheckInterruptAndClear_Bool(u8 Arg_USARTInstanceId_u8, u8 Arg_USARTInterruptType_u8){
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
	switch (Arg_USARTInterruptType_u8){
 8003a44:	79bb      	ldrb	r3, [r7, #6]
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	f200 80ba 	bhi.w	8003bc0 <USART_CheckInterruptAndClear_Bool+0x18c>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <USART_CheckInterruptAndClear_Bool+0x20>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a9b 	.word	0x08003a9b
 8003a5c:	08003ad5 	.word	0x08003ad5
 8003a60:	08003b0f 	.word	0x08003b0f
 8003a64:	08003b2d 	.word	0x08003b2d
 8003a68:	08003bc1 	.word	0x08003bc1
 8003a6c:	08003b4b 	.word	0x08003b4b
 8003a70:	08003b69 	.word	0x08003b69
 8003a74:	08003b87 	.word	0x08003b87
 8003a78:	08003ba5 	.word	0x08003ba5

	/*USART_INTERRUPT_TRANSMIT_DATA_EMPTY*/
	case 0:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TXE)){
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4a53      	ldr	r2, [pc, #332]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	09db      	lsrs	r3, r3, #7
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <USART_CheckInterruptAndClear_Bool+0x62>

			return STD_TRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e095      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e093      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_TRANSMIT_COMPLETE*/
	case 1:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TC)){
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	4a4c      	ldr	r2, [pc, #304]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10f      	bne.n	8003ad0 <USART_CheckInterruptAndClear_Bool+0x9c>
			CLEAR_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TC);
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	4943      	ldr	r1, [pc, #268]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003ac2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aca:	6013      	str	r3, [r2, #0]
			return STD_TRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e078      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e076      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_READ_DATA_REGISTER_NOT_EMPTY*/
	case 2:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_RXNE)){
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	4a3d      	ldr	r2, [pc, #244]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10f      	bne.n	8003b0a <USART_CheckInterruptAndClear_Bool+0xd6>
			CLEAR_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_RXNE);
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	79fa      	ldrb	r2, [r7, #7]
 8003af8:	3a01      	subs	r2, #1
 8003afa:	4935      	ldr	r1, [pc, #212]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003afc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b00:	f023 0320 	bic.w	r3, r3, #32
 8003b04:	6013      	str	r3, [r2, #0]
			return STD_TRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e05b      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e059      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;
		/*USART_INTERRUPT_IDLE_LINE_DETECTED*/
	case 3:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_IDLE)){
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <USART_CheckInterruptAndClear_Bool+0xf4>
			return STD_TRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04c      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e04a      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;
		/*USART_INTERRUPT_CTS*/
	case 4:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_CTS)){
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0a5b      	lsrs	r3, r3, #9
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <USART_CheckInterruptAndClear_Bool+0x112>

			return STD_TRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e03d      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e03b      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		/*Not Implemented yet !*/
		break;

		/*USART_INTERRUPT_OVERRUN_ERROR*/
	case 6:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_ORE)){
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <USART_CheckInterruptAndClear_Bool+0x130>
			return STD_TRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e02e      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e02c      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_NOISE_DETECTED*/
	case 7:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_NF)){
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <USART_CheckInterruptAndClear_Bool+0x14e>
			return STD_TRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e01f      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e01d      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_FRAME_ERROR*/
	case 8:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_FE)){
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <USART_CheckInterruptAndClear_Bool+0x16c>
			return STD_TRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e010      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e00e      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_PARITY_ERROR*/
	case 9:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_PE)){
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	4a09      	ldr	r2, [pc, #36]	; (8003bd0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <USART_CheckInterruptAndClear_Bool+0x188>
			return STD_TRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e002      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

	}

	return STD_FALSE;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <Utils_TimeoutChecker_Init>:
==================================================
 */
void Utils_TimeoutChecker_Init(
		Utils_TimeoutChecker *Arg_Tout_Utils_TimeoutChecker,
		u32 Arg_TimeoutValueInmS_u32
){
 8003bd4:	b5b0      	push	{r4, r5, r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]

	Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue=SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32();
 8003bde:	f000 f8b9 	bl	8003d54 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>
 8003be2:	eeb0 7a40 	vmov.f32	s14, s0
 8003be6:	eef0 7a60 	vmov.f32	s15, s1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	ed83 7b00 	vstr	d7, [r3]
	Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue+=(f32)Arg_TimeoutValueInmS_u32;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003bf6:	6838      	ldr	r0, [r7, #0]
 8003bf8:	f7fc fc38 	bl	800046c <__aeabi_ui2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc faf6 	bl	80001f4 <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	e9c1 2300 	strd	r2, r3, [r1]
	Arg_Tout_Utils_TimeoutChecker->TimeoutValueInMilliSeconds = Arg_TimeoutValueInmS_u32;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	609a      	str	r2, [r3, #8]

}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bdb0      	pop	{r4, r5, r7, pc}

08003c20 <Utils_IsTimeoutOccurred_u8>:

u8 Utils_IsTimeoutOccurred_u8(Utils_TimeoutChecker *Arg_Tout_Utils_TimeoutChecker){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	if (STD_MAX_DELAY == Arg_Tout_Utils_TimeoutChecker->TimeoutValueInMilliSeconds){
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c30:	d101      	bne.n	8003c36 <Utils_IsTimeoutOccurred_u8+0x16>
		return STD_FALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e00e      	b.n	8003c54 <Utils_IsTimeoutOccurred_u8+0x34>
	}
	if(SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32() > Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue){
 8003c36:	f000 f88d 	bl	8003d54 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>
 8003c3a:	ec51 0b10 	vmov	r0, r1, d0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc ff1c 	bl	8000a80 <__aeabi_dcmpgt>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <Utils_IsTimeoutOccurred_u8+0x32>
		/*Timeout Occur*/
		return STD_TRUE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <Utils_IsTimeoutOccurred_u8+0x34>
	}
	return STD_FALSE;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <NVIC_EnableInterrupt_v>:
/*
==================================================
  Start Section --> Implementation
==================================================
*/
void NVIC_EnableInterrupt_v(u8 Arg_InterruptNumber_u8){
 8003c5c:	b490      	push	{r4, r7}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
	SET_BIT(NVIC->ISER[Arg_InterruptNumber_u8/32], Arg_InterruptNumber_u8%32);
 8003c66:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <NVIC_EnableInterrupt_v+0x3c>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	b2d8      	uxtb	r0, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	79fa      	ldrb	r2, [r7, #7]
 8003c76:	f002 021f 	and.w	r2, r2, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	4614      	mov	r4, r2
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <NVIC_EnableInterrupt_v+0x3c>)
 8003c84:	4601      	mov	r1, r0
 8003c86:	4323      	orrs	r3, r4
 8003c88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc90      	pop	{r4, r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <SCB_EnableFPU_v>:

u16 SCB_GetImplementerId_u16(void){
	return (SCB->CPUID & 0xFF000000)>>24;
}

void SCB_EnableFPU_v(void){
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
#define SCB_FPU *((volatile u32* const)0xE000ED88)
	SCB_FPU |= (0xF<<20);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <SCB_EnableFPU_v+0x20>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <SCB_EnableFPU_v+0x20>)
 8003ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003caa:	6013      	str	r3, [r2, #0]
	asm volatile ("dsb 0xF":::"memory");
 8003cac:	f3bf 8f4f 	dsb	sy


}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000ed88 	.word	0xe000ed88

08003cc0 <SCB_SetVectorTableOffset_void>:
void SCB_SetVectorTableOffset_void(u32 Arg_VectorTableOffset_u32, u8 Arg_VectorTableLocation){
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
	u32 L_VOffset_u32 = Arg_VectorTableOffset_u32 & 0x1FFFFE00;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <SCB_SetVectorTableOffset_void+0x48>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
	switch (Arg_VectorTableLocation){
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <SCB_SetVectorTableOffset_void+0x20>
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d005      	beq.n	8003cea <SCB_SetVectorTableOffset_void+0x2a>
 8003cde:	e009      	b.n	8003cf4 <SCB_SetVectorTableOffset_void+0x34>
	case SCB_VectorTableInFlash:
		CLEAR_BIT(L_VOffset_u32, 29);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ce6:	60fb      	str	r3, [r7, #12]
		break;
 8003ce8:	e004      	b.n	8003cf4 <SCB_SetVectorTableOffset_void+0x34>

	case SCB_VectorTableInSRAM:
		SET_BIT(L_VOffset_u32, 29);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	60fb      	str	r3, [r7, #12]
		break;
 8003cf2:	bf00      	nop
	}
	SCB->VTOR = L_VOffset_u32;
 8003cf4:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <SCB_SetVectorTableOffset_void+0x4c>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6093      	str	r3, [r2, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	1ffffe00 	.word	0x1ffffe00
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <SCB_SWReset>:

void SCB_SWReset(void){
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	/*Data synchronization register*/
	asm volatile ("dsb 0xF":::"memory");
 8003d14:	f3bf 8f4f 	dsb	sy
	SCB->AIRCR = (0x5FA<<16) | (1<<2) | (SCB->AIRCR&(7<<8));
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <SCB_SWReset+0x20>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <SCB_SWReset+0x20>)
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <SCB_SWReset+0x24>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60cb      	str	r3, [r1, #12]
	/*Data synchronization register*/
	asm volatile ("dsb 0xF":::"memory");
 8003d28:	f3bf 8f4f 	dsb	sy
	while(1){
		asm volatile ("NOP");
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <SCB_SWReset+0x1c>
 8003d30:	e000ed00 	.word	0xe000ed00
 8003d34:	05fa0004 	.word	0x05fa0004

08003d38 <SysTick_Handler>:
 */
static u32 StaticGlobal_Ticks_u32 = 0;

#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)

void SysTick_Handler(void){
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	StaticGlobal_Ticks_u32++;
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <SysTick_Handler+0x18>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a03      	ldr	r2, [pc, #12]	; (8003d50 <SysTick_Handler+0x18>)
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	200004e8 	.word	0x200004e8

08003d54 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>:
#endif

f32 SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32(void){
 8003d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d58:	af00      	add	r7, sp, #0
	return (f32)(SYSTICK_GetCurrentTicks_u32()/CONFIG_TICK_TIME_IN_MilliSeconds) + (f32)(SYSTICK->CVR)/((f32)SYSTICK->RVR);
 8003d5a:	f000 f82b 	bl	8003db4 <SYSTICK_GetCurrentTicks_u32>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fb83 	bl	800046c <__aeabi_ui2d>
 8003d66:	4604      	mov	r4, r0
 8003d68:	460d      	mov	r5, r1
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32+0x5c>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fb7c 	bl	800046c <__aeabi_ui2d>
 8003d74:	4680      	mov	r8, r0
 8003d76:	4689      	mov	r9, r1
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32+0x5c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb75 	bl	800046c <__aeabi_ui2d>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4640      	mov	r0, r8
 8003d88:	4649      	mov	r1, r9
 8003d8a:	f7fc fd13 	bl	80007b4 <__aeabi_ddiv>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f7fc fa2d 	bl	80001f4 <__adddf3>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003da2:	eeb0 0a47 	vmov.f32	s0, s14
 8003da6:	eef0 0a67 	vmov.f32	s1, s15
 8003daa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dae:	bf00      	nop
 8003db0:	e000e010 	.word	0xe000e010

08003db4 <SYSTICK_GetCurrentTicks_u32>:

u32 SYSTICK_GetCurrentTicks_u32(void){
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	return StaticGlobal_Ticks_u32;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <SYSTICK_GetCurrentTicks_u32+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	200004e8 	.word	0x200004e8
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <SYSTICK_Init_v>:



void SYSTICK_Init_v(void){
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
#if CONFIG_SYSTICK_USE_EXTERNAL_CLOCK
	CLEAR_BIT(SYSTICK->CSR, SYSTICK_CSR_CLKSOURCE);
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6013      	str	r3, [r2, #0]
#else
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_CLKSOURCE);
#endif

	f32 Local_MaxTickTime = 0xffffff / (RCC_GetCortexSystemTimerFrequency_f32()*1000000);
 8003de2:	f7ff fd79 	bl	80038d8 <RCC_GetCortexSystemTimerFrequency_f32>
 8003de6:	ec51 0b10 	vmov	r0, r1, d0
 8003dea:	a323      	add	r3, pc, #140	; (adr r3, 8003e78 <SYSTICK_Init_v+0xa8>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fbb6 	bl	8000560 <__aeabi_dmul>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8003dfc:	4921      	ldr	r1, [pc, #132]	; (8003e84 <SYSTICK_Init_v+0xb4>)
 8003dfe:	f7fc fcd9 	bl	80007b4 <__aeabi_ddiv>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	e9c7 2300 	strd	r2, r3, [r7]
	if (CONFIG_TICK_TIME_IN_MilliSeconds > Local_MaxTickTime){
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <SYSTICK_Init_v+0xb8>)
 8003e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e14:	f7fc fe16 	bl	8000a44 <__aeabi_dcmplt>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d000      	beq.n	8003e20 <SYSTICK_Init_v+0x50>
		while(1){
 8003e1e:	e7fe      	b.n	8003e1e <SYSTICK_Init_v+0x4e>
			 * */
		}
	}

	/*Set Systick Reload Value*/
	SYSTICK->RVR = (RCC_GetCortexSystemTimerFrequency_f32()*1000*CONFIG_TICK_TIME_IN_MilliSeconds)-1;
 8003e20:	f7ff fd5a 	bl	80038d8 <RCC_GetCortexSystemTimerFrequency_f32>
 8003e24:	ec51 0b10 	vmov	r0, r1, d0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <SYSTICK_Init_v+0xbc>)
 8003e2e:	f7fc fb97 	bl	8000560 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <SYSTICK_Init_v+0xb8>)
 8003e40:	f7fc f9d6 	bl	80001f0 <__aeabi_dsub>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4c0d      	ldr	r4, [pc, #52]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7fc fe21 	bl	8000a94 <__aeabi_d2uiz>
 8003e52:	4603      	mov	r3, r0
 8003e54:	6063      	str	r3, [r4, #4]
	/*Enable SYSTICK Interrupt*/
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_TICKINT);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6013      	str	r3, [r2, #0]
	/*Enable SYSTICK*/
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_ENABLE);
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a06      	ldr	r2, [pc, #24]	; (8003e80 <SYSTICK_Init_v+0xb0>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]


}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	412e8480 	.word	0x412e8480
 8003e80:	e000e010 	.word	0xe000e010
 8003e84:	416fffff 	.word	0x416fffff
 8003e88:	3ff00000 	.word	0x3ff00000
 8003e8c:	408f4000 	.word	0x408f4000

08003e90 <SystemInit>:
/*
==================================================
  Start Section --> Function Definitions
==================================================
*/
void SystemInit(void){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	/*Configure FPU*/
#if CONFIG_USE_HARDWARE_FPU==1
	SCB_EnableFPU_v();
 8003e94:	f7ff ff02 	bl	8003c9c <SCB_EnableFPU_v>
#endif
	/*Configure RCC*/
	RCC_InitClock_v();
 8003e98:	f7ff fc30 	bl	80036fc <RCC_InitClock_v>
	/*Init Systick*/
#if CONFIG_USE_RTOS==CONFIG_NO_RTOS
	SYSTICK_Init_v();
 8003e9c:	f7ff ff98 	bl	8003dd0 <SYSTICK_Init_v>
#endif
	/*Init Interrupt Handlers*/
	InterruptHandler_Init_v();
 8003ea0:	f7fe fca0 	bl	80027e4 <InterruptHandler_Init_v>

	/*Configure CRC*/
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <main>:
}

#elif BOOTLOADER_TYPE == CAN_BOOTLOADER

int main(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	BL_Init_v();
 8003eac:	f7fc ff2e 	bl	8000d0c <BL_Init_v>

	while(1){
		BL_Pooling_v();
 8003eb0:	f7fc fee0 	bl	8000c74 <BL_Pooling_v>
		if ((VALID_IMAGE_FLAG_VALUE) == (UTILS_READ_ADDRESS(VALID_IMAGE_FLAG_ADDRESS))){
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <main+0x1c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 3f5a 	cmp.w	r3, #1515870810	; 0x5a5a5a5a
 8003ebc:	d1f8      	bne.n	8003eb0 <main+0x8>
			BL_Jump_To_App();
 8003ebe:	f7fc fe95 	bl	8000bec <BL_Jump_To_App>
		BL_Pooling_v();
 8003ec2:	e7f5      	b.n	8003eb0 <main+0x8>
 8003ec4:	0807fff8 	.word	0x0807fff8

08003ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ec8:	480d      	ldr	r0, [pc, #52]	; (8003f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ecc:	f7ff ffe0 	bl	8003e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ed2:	490d      	ldr	r1, [pc, #52]	; (8003f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <LoopForever+0xe>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed8:	e002      	b.n	8003ee0 <LoopCopyDataInit>

08003eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ede:	3304      	adds	r3, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee4:	d3f9      	bcc.n	8003eda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <LoopForever+0x16>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eec:	e001      	b.n	8003ef2 <LoopFillZerobss>

08003eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef0:	3204      	adds	r2, #4

08003ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef4:	d3fb      	bcc.n	8003eee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ef6:	f000 f80f 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003efa:	f7ff ffd5 	bl	8003ea8 <main>

08003efe <LoopForever>:

LoopForever:
  b LoopForever
 8003efe:	e7fe      	b.n	8003efe <LoopForever>
  ldr   r0, =_estack
 8003f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003f0c:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8003f10:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003f14:	200004ec 	.word	0x200004ec

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4d0d      	ldr	r5, [pc, #52]	; (8003f50 <__libc_init_array+0x38>)
 8003f1c:	4c0d      	ldr	r4, [pc, #52]	; (8003f54 <__libc_init_array+0x3c>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	2600      	movs	r6, #0
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	4d0b      	ldr	r5, [pc, #44]	; (8003f58 <__libc_init_array+0x40>)
 8003f2a:	4c0c      	ldr	r4, [pc, #48]	; (8003f5c <__libc_init_array+0x44>)
 8003f2c:	f000 f820 	bl	8003f70 <_init>
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	2600      	movs	r6, #0
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08003ff4 	.word	0x08003ff4
 8003f54:	08003ff4 	.word	0x08003ff4
 8003f58:	08003ff4 	.word	0x08003ff4
 8003f5c:	08003ff8 	.word	0x08003ff8

08003f60 <memset>:
 8003f60:	4402      	add	r2, r0
 8003f62:	4603      	mov	r3, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d100      	bne.n	8003f6a <memset+0xa>
 8003f68:	4770      	bx	lr
 8003f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6e:	e7f9      	b.n	8003f64 <memset+0x4>

08003f70 <_init>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr

08003f7c <_fini>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr
