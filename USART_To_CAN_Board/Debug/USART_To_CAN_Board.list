
USART_To_CAN_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004964  08004964  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004964  08004964  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000004f4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000054d3  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001583  00000000  00000000  0002551b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00026aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  00027240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c77  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a33  00000000  00000000  0002c587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00015987  00000000  00000000  00031fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00047941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e8c  00000000  00000000  00047994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080048c0 	.word	0x080048c0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	080048c0 	.word	0x080048c0

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <CAN_Config_v>:
/*
==================================================
  Start Section --> Functions implementation.
==================================================
 */
void CAN_Config_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg){
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b08d      	sub	sp, #52	; 0x34
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Cfg L_CANConfig_GPIO_Cfg;
	L_CANConfig_GPIO_Cfg.InstanceId = Arg_conf_cpcCAN_Cfg->GPIOInstanceId;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	79db      	ldrb	r3, [r3, #7]
 8000ae8:	763b      	strb	r3, [r7, #24]
	L_CANConfig_GPIO_Cfg.Mode = GPIO_MODE_ALTERNATE_FUNCTION;
 8000aea:	2302      	movs	r3, #2
 8000aec:	83bb      	strh	r3, [r7, #28]
	L_CANConfig_GPIO_Cfg.PINs = Arg_conf_cpcCAN_Cfg->GPIOPins;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	891b      	ldrh	r3, [r3, #8]
 8000af2:	837b      	strh	r3, [r7, #26]
	L_CANConfig_GPIO_Cfg.OutputSpeed = GPIO_OUTPUT_SPEED_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	843b      	strh	r3, [r7, #32]
	L_CANConfig_GPIO_Cfg.OutputType = GPIO_OUTPUT_TYPE_PUSH_PULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	83fb      	strh	r3, [r7, #30]
	L_CANConfig_GPIO_Cfg.PullUpPullDownResistor = GPIO_RESISTOR_NO_PULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	847b      	strh	r3, [r7, #34]	; 0x22



	/*Mapping Pins*/
	u8 L_CANMappingPins[] = {
 8000b00:	f640 1309 	movw	r3, #2313	; 0x909
 8000b04:	82bb      	strh	r3, [r7, #20]
			CAN1_MAP_PIN,
			CAN2_MAP_PIN,
	};

	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b0c:	e01d      	b.n	8000b4a <CAN_Config_v+0x76>
		if (GET_BIT(Arg_conf_cpcCAN_Cfg->GPIOPins, L_i_u8)){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	891b      	ldrh	r3, [r3, #8]
 8000b12:	461a      	mov	r2, r3
 8000b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b18:	fa42 f303 	asr.w	r3, r2, r3
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00d      	beq.n	8000b40 <CAN_Config_v+0x6c>
			GPIO_MapGPIOPIN_v(
					&L_CANConfig_GPIO_Cfg,
					L_i_u8,
					L_CANMappingPins[L_CANInstanceId_u8-1]);
 8000b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b28:	3b01      	subs	r3, #1
			GPIO_MapGPIOPIN_v(
 8000b2a:	3330      	adds	r3, #48	; 0x30
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b32:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fe00 	bl	8002740 <GPIO_MapGPIOPIN_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8000b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b44:	3301      	adds	r3, #1
 8000b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d9dd      	bls.n	8000b0e <CAN_Config_v+0x3a>
		}
	}

	GPIO_Config_v(&L_CANConfig_GPIO_Cfg);
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fc78 	bl	800244c <GPIO_Config_v>
	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
			RCC_GetPeripheralBus_u8((u32)CAN_ID(L_CANInstanceId_u8)),
 8000b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b60:	3b01      	subs	r3, #1
 8000b62:	4a9e      	ldr	r2, [pc, #632]	; (8000ddc <CAN_Config_v+0x308>)
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 ff31 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461c      	mov	r4, r3
 8000b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 ffae 	bl	8003ad8 <RCC_GetRCCCANBit_u8>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4620      	mov	r0, r4
 8000b82:	f002 fe67 	bl	8003854 <RCC_EnableClock_v>
			RCC_GetRCCCANBit_u8(L_CANInstanceId_u8));

	/*Reset registers*/
	CAN_ID(L_CANInstanceId_u8)->MCR = 0x10002;
 8000b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a93      	ldr	r2, [pc, #588]	; (8000ddc <CAN_Config_v+0x308>)
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b92      	ldr	r3, [pc, #584]	; (8000de0 <CAN_Config_v+0x30c>)
 8000b96:	6013      	str	r3, [r2, #0]
	CAN_ID(L_CANInstanceId_u8)->MSR = 0xc02;
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4a8f      	ldr	r2, [pc, #572]	; (8000ddc <CAN_Config_v+0x308>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	f640 4302 	movw	r3, #3074	; 0xc02
 8000baa:	6053      	str	r3, [r2, #4]
	CAN_ID(L_CANInstanceId_u8)->TSR = 0x1c000000;
 8000bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	4a8a      	ldr	r2, [pc, #552]	; (8000ddc <CAN_Config_v+0x308>)
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8000bbe:	6093      	str	r3, [r2, #8]
	CAN_ID(L_CANInstanceId_u8)->RFxR[0] = 0x0;
 8000bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4a85      	ldr	r2, [pc, #532]	; (8000ddc <CAN_Config_v+0x308>)
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60d3      	str	r3, [r2, #12]
	CAN_ID(L_CANInstanceId_u8)->RFxR[1] = 0x0;
 8000bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	4a80      	ldr	r2, [pc, #512]	; (8000ddc <CAN_Config_v+0x308>)
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	461a      	mov	r2, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	6113      	str	r3, [r2, #16]
	CAN_ID(L_CANInstanceId_u8)->IER = 0x0;
 8000be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a7c      	ldr	r2, [pc, #496]	; (8000ddc <CAN_Config_v+0x308>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6153      	str	r3, [r2, #20]
	CAN_ID(L_CANInstanceId_u8)->ESR = 0x0;
 8000bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a77      	ldr	r2, [pc, #476]	; (8000ddc <CAN_Config_v+0x308>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	461a      	mov	r2, r3
 8000c04:	2300      	movs	r3, #0
 8000c06:	6193      	str	r3, [r2, #24]
	CAN_ID(L_CANInstanceId_u8)->BTR = 0x1230000;
 8000c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	4a73      	ldr	r2, [pc, #460]	; (8000ddc <CAN_Config_v+0x308>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <CAN_Config_v+0x310>)
 8000c18:	61d3      	str	r3, [r2, #28]


	/*Begin Configurations*/
	/* Enable or disable time triggered communication.*/
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->TimeTriggeredEn){
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d010      	beq.n	8000c4a <CAN_Config_v+0x176>
		SET_BIT(
 8000c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a6b      	ldr	r2, [pc, #428]	; (8000ddc <CAN_Config_v+0x308>)
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c3a:	3a01      	subs	r2, #1
 8000c3c:	4967      	ldr	r1, [pc, #412]	; (8000ddc <CAN_Config_v+0x308>)
 8000c3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e00f      	b.n	8000c6a <CAN_Config_v+0x196>


	}
	else{

		CLEAR_BIT(
 8000c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a62      	ldr	r2, [pc, #392]	; (8000ddc <CAN_Config_v+0x308>)
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	495f      	ldr	r1, [pc, #380]	; (8000ddc <CAN_Config_v+0x308>)
 8000c60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c68:	6013      	str	r3, [r2, #0]
	 * by hardware once 128 occurrence of 11 recessive bits have been monitored.
	 *
	 * When Disabling this mode, Bus-Off state is left on software request, once 128 occurances of
	 * 11 recessive bits have been monitored and software has first set and cleared the INRQ bit of the CAN_MCR
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoBusOffEn){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d010      	beq.n	8000c9a <CAN_Config_v+0x1c6>
		SET_BIT(
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <CAN_Config_v+0x308>)
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c8a:	3a01      	subs	r2, #1
 8000c8c:	4953      	ldr	r1, [pc, #332]	; (8000ddc <CAN_Config_v+0x308>)
 8000c8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e00f      	b.n	8000cba <CAN_Config_v+0x1e6>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_ABOM);

	}
	else{
		CLEAR_BIT(
 8000c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <CAN_Config_v+0x308>)
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cac:	3a01      	subs	r2, #1
 8000cae:	494b      	ldr	r1, [pc, #300]	; (8000ddc <CAN_Config_v+0x308>)
 8000cb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb8:	6013      	str	r3, [r2, #0]
	 * This mode controls the behavior of the CAN hardware on message reception during sleep mode.
	 * When Enabling this mode, Sleep mode is left automatically by hardware on CAN message detection
	 *
	 * When Disabling this mode, Sleep mode is left on software request by clearing the SLEEP bit of the CAN_MCR register.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoWakeUpEn){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d010      	beq.n	8000cea <CAN_Config_v+0x216>
		SET_BIT(
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	4a43      	ldr	r2, [pc, #268]	; (8000ddc <CAN_Config_v+0x308>)
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	493f      	ldr	r1, [pc, #252]	; (8000ddc <CAN_Config_v+0x308>)
 8000cde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e00f      	b.n	8000d0a <CAN_Config_v+0x236>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_AWUM);

	}
	else{
		CLEAR_BIT(
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <CAN_Config_v+0x308>)
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	4937      	ldr	r1, [pc, #220]	; (8000ddc <CAN_Config_v+0x308>)
 8000d00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d04:	f023 0320 	bic.w	r3, r3, #32
 8000d08:	6013      	str	r3, [r2, #0]
	 * until it has been successfully transmitted according to the CAN standard.
	 *
	 * When Disabling this mode, Message will be transmitted only once independently of
	 * the transmission result.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->AutoReTransmissionEn){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d010      	beq.n	8000d3a <CAN_Config_v+0x266>
		CLEAR_BIT(
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <CAN_Config_v+0x308>)
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d2a:	3a01      	subs	r2, #1
 8000d2c:	492b      	ldr	r1, [pc, #172]	; (8000ddc <CAN_Config_v+0x308>)
 8000d2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d32:	f023 0310 	bic.w	r3, r3, #16
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e00f      	b.n	8000d5a <CAN_Config_v+0x286>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_NART);
	}
	else{
		SET_BIT(
 8000d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <CAN_Config_v+0x308>)
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	4923      	ldr	r1, [pc, #140]	; (8000ddc <CAN_Config_v+0x308>)
 8000d50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6013      	str	r3, [r2, #0]
	 * and once a receive FIFO is full the next incoming message will be discarded.
	 *
	 * When Disabling this mode, Receive FIFO is not-locked against overrun,
	 * and once a receive FIFO is full the next incoming message will override the previous one.
	 * */
	if (STD_ENABLE == Arg_conf_cpcCAN_Cfg->ReceiveFifoLockOnOverrunEn){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d010      	beq.n	8000d8a <CAN_Config_v+0x2b6>
		SET_BIT(
 8000d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <CAN_Config_v+0x308>)
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	4917      	ldr	r1, [pc, #92]	; (8000ddc <CAN_Config_v+0x308>)
 8000d7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e00f      	b.n	8000daa <CAN_Config_v+0x2d6>
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_RFLM);

	}
	else{
		CLEAR_BIT(
 8000d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <CAN_Config_v+0x308>)
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	490f      	ldr	r1, [pc, #60]	; (8000ddc <CAN_Config_v+0x308>)
 8000da0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000da4:	f023 0308 	bic.w	r3, r3, #8
 8000da8:	6013      	str	r3, [r2, #0]
	}
	/* Select the priority of Transmit FIFO whether
	 * priority is driven by ID of the message, or
	 * priority is driven by the request order.
	 * */
	if (CAN_TRANSMIT_FIFO_PRIORITY_BY_REQ_ORDER == Arg_conf_cpcCAN_Cfg->TransmitFifoPriority){
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d017      	beq.n	8000de8 <CAN_Config_v+0x314>
		SET_BIT(
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <CAN_Config_v+0x308>)
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000dca:	3a01      	subs	r2, #1
 8000dcc:	4903      	ldr	r1, [pc, #12]	; (8000ddc <CAN_Config_v+0x308>)
 8000dce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e01d      	b.n	8000e16 <CAN_Config_v+0x342>
 8000dda:	bf00      	nop
 8000ddc:	08004928 	.word	0x08004928
 8000de0:	00010002 	.word	0x00010002
 8000de4:	01230000 	.word	0x01230000
				CAN_ID(L_CANInstanceId_u8)->MCR,
				CAN_MCR_TXFP);

	}
	else if (CAN_TRANSMIT_FIFO_PRIORITY_BY_MSG_ID == Arg_conf_cpcCAN_Cfg->TransmitFifoPriority){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <CAN_Config_v+0x342>
		CLEAR_BIT(
 8000df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	4a74      	ldr	r2, [pc, #464]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e08:	3a01      	subs	r2, #1
 8000e0a:	4971      	ldr	r1, [pc, #452]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6013      	str	r3, [r2, #0]
	else{

	}

	/*Enter Initialization Mode*/
	SET_BIT(
 8000e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a6c      	ldr	r2, [pc, #432]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	4969      	ldr	r1, [pc, #420]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_INRQ);

	while(!(
 8000e36:	bf00      	nop
			!GET_BIT(CAN_ID(L_CANInstanceId_u8)->MSR,
 8000e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	f003 0301 	and.w	r3, r3, #1
	while(!(
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00a      	beq.n	8000e66 <CAN_Config_v+0x392>
					CAN_MSR_SLAK) )
			&&
			(GET_BIT(CAN_ID(L_CANInstanceId_u8)->MSR,
 8000e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a5e      	ldr	r2, [pc, #376]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
			&&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e8      	bne.n	8000e38 <CAN_Config_v+0x364>
					CAN_MSR_INAK)));
	/*Exit Sleep Mode.*/
	CLEAR_BIT(
 8000e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	4955      	ldr	r1, [pc, #340]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e80:	f023 0302 	bic.w	r3, r3, #2
 8000e84:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_SLEEP);

	/*Interrupt*/
	CAN_ID(L_CANInstanceId_u8)->IER = Arg_conf_cpcCAN_Cfg->Interrupt;
 8000e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4a50      	ldr	r2, [pc, #320]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	6153      	str	r3, [r2, #20]
	/*Mapping between USART interrupt and It's corresponding NVIC*/

	u8 L_CANInterruptMapping_u8[2][4] = {
 8000e9a:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <CAN_Config_v+0x500>)
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea4:	e883 0003 	stmia.w	r3, {r0, r1}
			{NVIC_CAN1_TX, NVIC_CAN1_RX0, NVIC_CAN1_RX1, NVIC_CAN1_SCE},
			{NVIC_CAN2_TX, NVIC_CAN2_RX0, NVIC_CAN2_RX1, NVIC_CAN2_SCE}};

	if (0 != (Arg_conf_cpcCAN_Cfg->Interrupt & CAN_INTERRUPT_TRANSMIT_EMPTY) ){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00a      	beq.n	8000eca <CAN_Config_v+0x3f6>
		NVIC_EnableInterrupt_v(L_CANInterruptMapping_u8[Arg_conf_cpcCAN_Cfg->InstanceId-1][0]);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	3330      	adds	r3, #48	; 0x30
 8000ebe:	443b      	add	r3, r7
 8000ec0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fab1 	bl	800442c <NVIC_EnableInterrupt_v>
	) ){
		NVIC_EnableInterrupt_v(L_CANInterruptMapping_u8[Arg_conf_cpcCAN_Cfg->InstanceId-1][3]);
	}

	/*Configure test mode.*/
	u32 L_BitTimingRegisterValue_u32=0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	switch (Arg_conf_cpcCAN_Cfg->OperatingMode){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d020      	beq.n	8000f1e <CAN_Config_v+0x44a>
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	dc03      	bgt.n	8000ee8 <CAN_Config_v+0x414>
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d00a      	beq.n	8000efa <CAN_Config_v+0x426>
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d011      	beq.n	8000f0c <CAN_Config_v+0x438>
	case CAN_OPERATING_MODE_NORMAL:
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 8000ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000ef8:	e01a      	b.n	8000f30 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_LOOPBACK:
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8000efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
		SET_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000f0a:	e011      	b.n	8000f30 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_SILENT:
		SET_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_SILM);
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
		CLEAR_BIT(L_BitTimingRegisterValue_u32,CAN_BTR_LBKM);
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000f1c:	e008      	b.n	8000f30 <CAN_Config_v+0x45c>
	case CAN_OPERATING_MODE_LoopbackWithSilent:
		SET_BIT(L_BitTimingRegisterValue_u32, CAN_BTR_SILM);
 8000f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
		SET_BIT(L_BitTimingRegisterValue_u32, CAN_BTR_LBKM);
 8000f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000f2e:	bf00      	nop
	}
	/*Baud Rate Configurations*/

	L_BitTimingRegisterValue_u32 |= ((Arg_conf_cpcCAN_Cfg->BaudRatePrescaller-1)&0x3F);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	885b      	ldrh	r3, [r3, #2]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->TimeSegment_1-1)<<CAN_BTR_TS1) & 0xF0000);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->TimeSegment_2-1)<<CAN_BTR_TS2) & 0x700000);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	795b      	ldrb	r3, [r3, #5]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	051b      	lsls	r3, r3, #20
 8000f5a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8000f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f60:	4313      	orrs	r3, r2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
	L_BitTimingRegisterValue_u32 |= (((Arg_conf_cpcCAN_Cfg->ResychronizationJump-1)<<CAN_BTR_SJW) & 0x3000000);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8000f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f72:	4313      	orrs	r3, r2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_ID(L_CANInstanceId_u8)->BTR = L_BitTimingRegisterValue_u32;
 8000f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	61d3      	str	r3, [r2, #28]
	/*Enter Normal mode by clearing CAN_MCR_SLEEP bit and CAN_MCR_INRQ bit.*/
	CLEAR_BIT(
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_INRQ);
	CLEAR_BIT(
 8000fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000fba:	3a01      	subs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <CAN_Config_v+0x4fc>)
 8000fbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fc2:	f023 0302 	bic.w	r3, r3, #2
 8000fc6:	6013      	str	r3, [r2, #0]
			CAN_ID(L_CANInstanceId_u8)->MCR,
			CAN_MCR_SLEEP);
}
 8000fc8:	bf00      	nop
 8000fca:	3734      	adds	r7, #52	; 0x34
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	08004928 	.word	0x08004928
 8000fd4:	080048d8 	.word	0x080048d8

08000fd8 <CAN_SendData_v>:

void CAN_SendData_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_TxData const * const Arg_TransmitData_cpcCAN_TxData,
		const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]

	u8 L_TimeoutCheckCondition_u8;

	Utils_TimeoutChecker L_timeout_Utils_TimeoutChecker;
	Utils_TimeoutChecker_Init(&L_timeout_Utils_TimeoutChecker, Arg_ToutVal_Cu32);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f9d9 	bl	80043a4 <Utils_TimeoutChecker_Init>




	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	u8 L_FreeMailBoxIndex_u8 = 255;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*Search for empty mail boc*/
	while(255 == L_FreeMailBoxIndex_u8){
 8001000:	e03f      	b.n	8001082 <CAN_SendData_v+0xaa>
		L_TimeoutCheckCondition_u8 = Utils_IsTimeoutOccurred_u8(&L_timeout_Utils_TimeoutChecker);
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f9f2 	bl	80043f0 <Utils_IsTimeoutOccurred_u8>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if ((STD_TRUE == L_TimeoutCheckCondition_u8) ){
 8001012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <CAN_SendData_v+0x52>
			if (NULL != Arg_ToutErr_pCu32){
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 81d9 	beq.w	80013d4 <CAN_SendData_v+0x3fc>
				*Arg_ToutErr_pCu32 = STD_TimeOutError;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e1d5      	b.n	80013d6 <CAN_SendData_v+0x3fe>
			}

			return ;
		}
		else if (STD_FALSE == L_TimeoutCheckCondition_u8){
 800102a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <CAN_SendData_v+0x66>
			if (NULL != Arg_ToutErr_pCu32){
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <CAN_SendData_v+0x66>
				*Arg_ToutErr_pCu32 = STD_NoTimeOutError;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
		else{

		}


		for (u8 L_MailBoxIdx_u8 = 0; L_MailBoxIdx_u8 <CAN_TRANSMIT_MAILBOX_NUMS ;L_MailBoxIdx_u8++){
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001044:	e019      	b.n	800107a <CAN_SendData_v+0xa2>
			if (GET_BIT(CAN_ID(L_CANInstanceId_u8)->TSR, (CAN_TSR_TME + L_MailBoxIdx_u8))){
 8001046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800104a:	3b01      	subs	r3, #1
 800104c:	4ac3      	ldr	r2, [pc, #780]	; (800135c <CAN_SendData_v+0x384>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	331a      	adds	r3, #26
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <CAN_SendData_v+0x98>
				L_FreeMailBoxIndex_u8 = L_MailBoxIdx_u8;
 8001066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800106a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800106e:	e008      	b.n	8001082 <CAN_SendData_v+0xaa>
		for (u8 L_MailBoxIdx_u8 = 0; L_MailBoxIdx_u8 <CAN_TRANSMIT_MAILBOX_NUMS ;L_MailBoxIdx_u8++){
 8001070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001074:	3301      	adds	r3, #1
 8001076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800107a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800107e:	2b02      	cmp	r3, #2
 8001080:	d9e1      	bls.n	8001046 <CAN_SendData_v+0x6e>
	while(255 == L_FreeMailBoxIndex_u8){
 8001082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d0bb      	beq.n	8001002 <CAN_SendData_v+0x2a>
			}
		}
	}

	/*Reset TX mailbox identifier register.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR = 0;
 800108a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800108e:	3b01      	subs	r3, #1
 8001090:	4ab2      	ldr	r2, [pc, #712]	; (800135c <CAN_SendData_v+0x384>)
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	461a      	mov	r2, r3
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	3318      	adds	r3, #24
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
	/*Reset mailbox datalength control and time-stamp control register.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDTR = 0;
 80010a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4aab      	ldr	r2, [pc, #684]	; (800135c <CAN_SendData_v+0x384>)
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010b8:	3318      	adds	r3, #24
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

	/*Configure Data length code.*/
	CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDTR|= (Arg_TransmitData_cpcCAN_TxData->DataLength&0xF);
 80010c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4aa4      	ldr	r2, [pc, #656]	; (800135c <CAN_SendData_v+0x384>)
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	461a      	mov	r2, r3
 80010d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d6:	3318      	adds	r3, #24
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	3304      	adds	r3, #4
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	7a1b      	ldrb	r3, [r3, #8]
 80010e4:	f003 020f 	and.w	r2, r3, #15
 80010e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ec:	3b01      	subs	r3, #1
 80010ee:	489b      	ldr	r0, [pc, #620]	; (800135c <CAN_SendData_v+0x384>)
 80010f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fa:	430a      	orrs	r2, r1
 80010fc:	3318      	adds	r3, #24
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4403      	add	r3, r0
 8001102:	3304      	adds	r3, #4
 8001104:	601a      	str	r2, [r3, #0]

	/*Configure identifier and it's type whether it's standard or extended.*/
	switch(Arg_TransmitData_cpcCAN_TxData->IdType){
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	7a5b      	ldrb	r3, [r3, #9]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <CAN_SendData_v+0x13c>
 800110e:	2b01      	cmp	r3, #1
 8001110:	d03b      	beq.n	800118a <CAN_SendData_v+0x1b2>
 8001112:	e075      	b.n	8001200 <CAN_SendData_v+0x228>
	case CAN_Standard_Id:
		/*Set standard id value.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR|=(Arg_TransmitData_cpcCAN_TxData->ID<<CAN_TIxR_STID);
 8001114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001118:	3b01      	subs	r3, #1
 800111a:	4a90      	ldr	r2, [pc, #576]	; (800135c <CAN_SendData_v+0x384>)
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	461a      	mov	r2, r3
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	3318      	adds	r3, #24
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	055a      	lsls	r2, r3, #21
 8001134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001138:	3b01      	subs	r3, #1
 800113a:	4888      	ldr	r0, [pc, #544]	; (800135c <CAN_SendData_v+0x384>)
 800113c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001140:	4618      	mov	r0, r3
 8001142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001146:	430a      	orrs	r2, r1
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4403      	add	r3, r0
 800114e:	601a      	str	r2, [r3, #0]
		/*Clear TIxR to configure that it's standard.*/
		CLEAR_BIT(
 8001150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001154:	3b01      	subs	r3, #1
 8001156:	4a81      	ldr	r2, [pc, #516]	; (800135c <CAN_SendData_v+0x384>)
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	461a      	mov	r2, r3
 800115e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001162:	3318      	adds	r3, #24
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800116e:	3b01      	subs	r3, #1
 8001170:	497a      	ldr	r1, [pc, #488]	; (800135c <CAN_SendData_v+0x384>)
 8001172:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001176:	4619      	mov	r1, r3
 8001178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	3318      	adds	r3, #24
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_IDE);
		break;
 8001188:	e03a      	b.n	8001200 <CAN_SendData_v+0x228>

	case CAN_Extended_Id:
		/*Set Extended id value.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR|=(Arg_TransmitData_cpcCAN_TxData->ID<<CAN_TIxR_EXID);
 800118a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800118e:	3b01      	subs	r3, #1
 8001190:	4a72      	ldr	r2, [pc, #456]	; (800135c <CAN_SendData_v+0x384>)
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	461a      	mov	r2, r3
 8001198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800119c:	3318      	adds	r3, #24
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	00da      	lsls	r2, r3, #3
 80011aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011ae:	3b01      	subs	r3, #1
 80011b0:	486a      	ldr	r0, [pc, #424]	; (800135c <CAN_SendData_v+0x384>)
 80011b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011bc:	430a      	orrs	r2, r1
 80011be:	3318      	adds	r3, #24
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4403      	add	r3, r0
 80011c4:	601a      	str	r2, [r3, #0]
		/*Set TIxR to configure that it's extended.*/
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR, CAN_TIxR_IDE);
 80011c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a63      	ldr	r2, [pc, #396]	; (800135c <CAN_SendData_v+0x384>)
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e4:	3b01      	subs	r3, #1
 80011e6:	495d      	ldr	r1, [pc, #372]	; (800135c <CAN_SendData_v+0x384>)
 80011e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	f042 0204 	orr.w	r2, r2, #4
 80011f6:	3318      	adds	r3, #24
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	440b      	add	r3, r1
 80011fc:	601a      	str	r2, [r3, #0]
		break;
 80011fe:	bf00      	nop
	}

	/*Configure Frame type whether it's data frame or remote frame*/
	switch(Arg_TransmitData_cpcCAN_TxData->FrameType){
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	7a9b      	ldrb	r3, [r3, #10]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <CAN_SendData_v+0x238>
 8001208:	2b01      	cmp	r3, #1
 800120a:	f000 80a9 	beq.w	8001360 <CAN_SendData_v+0x388>
 800120e:	e0c4      	b.n	800139a <CAN_SendData_v+0x3c2>
	case CAN_Data_Frame:
		CLEAR_BIT(
 8001210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001214:	3b01      	subs	r3, #1
 8001216:	4a51      	ldr	r2, [pc, #324]	; (800135c <CAN_SendData_v+0x384>)
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	461a      	mov	r2, r3
 800121e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001222:	3318      	adds	r3, #24
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800122e:	3b01      	subs	r3, #1
 8001230:	494a      	ldr	r1, [pc, #296]	; (800135c <CAN_SendData_v+0x384>)
 8001232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001236:	4619      	mov	r1, r3
 8001238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800123c:	f022 0202 	bic.w	r2, r2, #2
 8001240:	3318      	adds	r3, #24
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	440b      	add	r3, r1
 8001246:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_RTR);

		/*Reset Mailbox data low and high register.*/
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR = 0;
 8001248:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800124c:	3b01      	subs	r3, #1
 800124e:	4a43      	ldr	r2, [pc, #268]	; (800135c <CAN_SendData_v+0x384>)
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	461a      	mov	r2, r3
 8001256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
		CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR = 0;
 8001266:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800126a:	3b01      	subs	r3, #1
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <CAN_SendData_v+0x384>)
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	461a      	mov	r2, r3
 8001274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

		for (u8 L_i_u8 = 0; L_i_u8 <Arg_TransmitData_cpcCAN_TxData->DataLength ;L_i_u8++){
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800128a:	e05f      	b.n	800134c <CAN_SendData_v+0x374>
			if (L_i_u8 > 3){
 800128c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001290:	2b03      	cmp	r3, #3
 8001292:	d92c      	bls.n	80012ee <CAN_SendData_v+0x316>
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR
 8001294:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001298:	3b01      	subs	r3, #1
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <CAN_SendData_v+0x384>)
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	461a      	mov	r2, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8%4));
 80012a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012b8:	440b      	add	r3, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4618      	mov	r0, r3
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDHR
 80012ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4921      	ldr	r1, [pc, #132]	; (800135c <CAN_SendData_v+0x384>)
 80012d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012da:	4619      	mov	r1, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8%4));
 80012dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e0:	4302      	orrs	r2, r0
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e029      	b.n	8001342 <CAN_SendData_v+0x36a>
			}
			else {
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR
 80012ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <CAN_SendData_v+0x384>)
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	461a      	mov	r2, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8));
 80012fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	6859      	ldr	r1, [r3, #4]
 800130e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	4618      	mov	r0, r3
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TDLR
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	3b01      	subs	r3, #1
 800132a:	490c      	ldr	r1, [pc, #48]	; (800135c <CAN_SendData_v+0x384>)
 800132c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001330:	4619      	mov	r1, r3
						|= Arg_TransmitData_cpcCAN_TxData->DataPtr[L_i_u8]<<(8*(L_i_u8));
 8001332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001336:	4302      	orrs	r2, r0
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	440b      	add	r3, r1
 800133c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001340:	601a      	str	r2, [r3, #0]
		for (u8 L_i_u8 = 0; L_i_u8 <Arg_TransmitData_cpcCAN_TxData->DataLength ;L_i_u8++){
 8001342:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001346:	3301      	adds	r3, #1
 8001348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	7a1b      	ldrb	r3, [r3, #8]
 8001350:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001354:	429a      	cmp	r2, r3
 8001356:	d399      	bcc.n	800128c <CAN_SendData_v+0x2b4>
			}
		}
		break;
 8001358:	e01f      	b.n	800139a <CAN_SendData_v+0x3c2>
 800135a:	bf00      	nop
 800135c:	08004928 	.word	0x08004928

	case CAN_Remote_Frame:
		SET_BIT(
 8001360:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001364:	3b01      	subs	r3, #1
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <CAN_SendData_v+0x404>)
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	461a      	mov	r2, r3
 800136e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001372:	3318      	adds	r3, #24
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800137e:	3b01      	subs	r3, #1
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <CAN_SendData_v+0x404>)
 8001382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001386:	4619      	mov	r1, r3
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800138c:	f042 0202 	orr.w	r2, r2, #2
 8001390:	3318      	adds	r3, #24
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	440b      	add	r3, r1
 8001396:	601a      	str	r2, [r3, #0]
				CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR,
				CAN_TIxR_RTR);
		break;
 8001398:	bf00      	nop
	}

	/*Transmit Request of Mailbox*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->TxMailBox[L_FreeMailBoxIndex_u8].TIR, CAN_TIxR_TXRQ);
 800139a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <CAN_SendData_v+0x404>)
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ac:	3318      	adds	r3, #24
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013b8:	3b01      	subs	r3, #1
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <CAN_SendData_v+0x404>)
 80013bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	3318      	adds	r3, #24
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e000      	b.n	80013d6 <CAN_SendData_v+0x3fe>
			return ;
 80013d4:	bf00      	nop
}
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	08004928 	.word	0x08004928

080013e0 <CAN_AddRxFilter_v>:

void CAN_AddRxFilter_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_FilterConfig *Arg_FilterCfg_CAN_FilterConfig){
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	72fb      	strb	r3, [r7, #11]
	u8 L_FilterId_u8 = Arg_FilterCfg_CAN_FilterConfig->FilterId;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	72bb      	strb	r3, [r7, #10]
	u8 L_FilterScale_u8;
	u8 L_FrameType_u8 = Arg_FilterCfg_CAN_FilterConfig->FrameType;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	7f1b      	ldrb	r3, [r3, #28]
 80013fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	727b      	strb	r3, [r7, #9]
	u8 L_IdType_u8 = Arg_FilterCfg_CAN_FilterConfig->IdType;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	7f1b      	ldrb	r3, [r3, #28]
 8001406:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	723b      	strb	r3, [r7, #8]

	u32 L_FiR1Val_u32 = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
	u32 L_FiR2Val_u32 = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]


	/*Set filter initialization mode.*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	3b01      	subs	r3, #1
 800141a:	4ab1      	ldr	r2, [pc, #708]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001424:	7afa      	ldrb	r2, [r7, #11]
 8001426:	3a01      	subs	r2, #1
 8001428:	49ad      	ldr	r1, [pc, #692]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 800142a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/*Deactivate Filter*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FA1R, L_FilterId_u8);
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	3b01      	subs	r3, #1
 800143a:	4aa9      	ldr	r2, [pc, #676]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001444:	7aba      	ldrb	r2, [r7, #10]
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	43d2      	mvns	r2, r2
 800144e:	4610      	mov	r0, r2
 8001450:	7afa      	ldrb	r2, [r7, #11]
 8001452:	3a01      	subs	r2, #1
 8001454:	49a2      	ldr	r1, [pc, #648]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001456:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800145a:	4003      	ands	r3, r0
 800145c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	switch(Arg_FilterCfg_CAN_FilterConfig->FIFONumber){
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d015      	beq.n	800149a <CAN_AddRxFilter_v+0xba>
	case CAN_FILTER_FIFONUMBER_1:
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FFA1R, L_FilterId_u8);
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a9b      	ldr	r2, [pc, #620]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800147c:	7aba      	ldrb	r2, [r7, #10]
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	43d2      	mvns	r2, r2
 8001486:	4610      	mov	r0, r2
 8001488:	7afa      	ldrb	r2, [r7, #11]
 800148a:	3a01      	subs	r2, #1
 800148c:	4994      	ldr	r1, [pc, #592]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 800148e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001492:	4003      	ands	r3, r0
 8001494:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		break;
 8001498:	e014      	b.n	80014c4 <CAN_AddRxFilter_v+0xe4>

	case CAN_FILTER_FIFONUMBER_2:
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FFA1R, L_FilterId_u8);
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a90      	ldr	r2, [pc, #576]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80014a8:	7aba      	ldrb	r2, [r7, #10]
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4610      	mov	r0, r2
 80014b2:	7afa      	ldrb	r2, [r7, #11]
 80014b4:	3a01      	subs	r2, #1
 80014b6:	498a      	ldr	r1, [pc, #552]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80014b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014bc:	4303      	orrs	r3, r0
 80014be:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		break;
 80014c2:	bf00      	nop
	}




	switch (Arg_FilterCfg_CAN_FilterConfig->FilterType){
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	f200 819c 	bhi.w	8001806 <CAN_AddRxFilter_v+0x426>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <CAN_AddRxFilter_v+0xf4>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	0800158d 	.word	0x0800158d
 80014dc:	08001633 	.word	0x08001633
 80014e0:	0800171f 	.word	0x0800171f
	/*Filter scale = CAN_FILTER_SCALE_SINGLE32*/
	case CAN_FILTER_TYPE_1ID32_1MASK32:
		L_FilterScale_u8 = CAN_Filter_Scale_Single;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]

		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	4a7c      	ldr	r2, [pc, #496]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80014f6:	7aba      	ldrb	r2, [r7, #10]
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	4610      	mov	r0, r2
 8001500:	7afa      	ldrb	r2, [r7, #11]
 8001502:	3a01      	subs	r2, #1
 8001504:	4976      	ldr	r1, [pc, #472]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001506:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800150a:	4303      	orrs	r3, r0
 800150c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a72      	ldr	r2, [pc, #456]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800151e:	7aba      	ldrb	r2, [r7, #10]
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	43d2      	mvns	r2, r2
 8001528:	4610      	mov	r0, r2
 800152a:	7afa      	ldrb	r2, [r7, #11]
 800152c:	3a01      	subs	r2, #1
 800152e:	496c      	ldr	r1, [pc, #432]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001530:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001534:	4003      	ands	r3, r0
 8001536:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00c      	beq.n	8001562 <CAN_AddRxFilter_v+0x182>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB3);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB3);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21);
		}

		break;
 8001560:	e14a      	b.n	80017f8 <CAN_AddRxFilter_v+0x418>
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7f1b      	ldrb	r3, [r3, #28]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 8143 	bne.w	80017f8 <CAN_AddRxFilter_v+0x418>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	055b      	lsls	r3, r3, #21
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
		break;
 800158a:	e135      	b.n	80017f8 <CAN_AddRxFilter_v+0x418>

		/*Filter scale = CAN_FILTER_SCALE_SINGLE32*/
	case CAN_FILTER_TYPE_2ID32:
		L_FilterScale_u8 = CAN_Filter_Scale_Single;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	3b01      	subs	r3, #1
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800159e:	7aba      	ldrb	r2, [r7, #10]
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	4610      	mov	r0, r2
 80015a8:	7afa      	ldrb	r2, [r7, #11]
 80015aa:	3a01      	subs	r2, #1
 80015ac:	494c      	ldr	r1, [pc, #304]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80015ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015b2:	4303      	orrs	r3, r0
 80015b4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015c6:	7aba      	ldrb	r2, [r7, #10]
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4610      	mov	r0, r2
 80015d0:	7afa      	ldrb	r2, [r7, #11]
 80015d2:	3a01      	subs	r2, #1
 80015d4:	4942      	ldr	r1, [pc, #264]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 80015d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015da:	4303      	orrs	r3, r0
 80015dc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7f1b      	ldrb	r3, [r3, #28]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <CAN_AddRxFilter_v+0x228>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB3);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB3);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
		}
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21);
		}
		break;
 8001606:	e0f9      	b.n	80017fc <CAN_AddRxFilter_v+0x41c>
		else if(CAN_Standard_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7f1b      	ldrb	r3, [r3, #28]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80f2 	bne.w	80017fc <CAN_AddRxFilter_v+0x41c>
			L_FiR1Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB21);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	055b      	lsls	r3, r3, #21
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= (Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
		break;
 8001630:	e0e4      	b.n	80017fc <CAN_AddRxFilter_v+0x41c>

		/*Filter scale = CAN_FILTER_SCALE_DUAL16*/
	case CAN_FILTER_TYPE_2ID16_2MASK16:
		L_FilterScale_u8 = CAN_Filter_Scale_Dual;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]

		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001644:	7aba      	ldrb	r2, [r7, #10]
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	43d2      	mvns	r2, r2
 800164e:	4610      	mov	r0, r2
 8001650:	7afa      	ldrb	r2, [r7, #11]
 8001652:	3a01      	subs	r2, #1
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001656:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800165a:	4003      	ands	r3, r0
 800165c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800166e:	7aba      	ldrb	r2, [r7, #10]
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	43d2      	mvns	r2, r2
 8001678:	4610      	mov	r0, r2
 800167a:	7afa      	ldrb	r2, [r7, #11]
 800167c:	3a01      	subs	r2, #1
 800167e:	4918      	ldr	r1, [pc, #96]	; (80016e0 <CAN_AddRxFilter_v+0x300>)
 8001680:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001684:	4003      	ands	r3, r0
 8001686:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == Arg_FilterCfg_CAN_FilterConfig->IdType){
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	7f1b      	ldrb	r3, [r3, #28]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d025      	beq.n	80016e4 <CAN_AddRxFilter_v+0x304>
			L_FiR1Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID1&0x38000)>>15);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0bdb      	lsrs	r3, r3, #15
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->Mask1&0x38000)>>15)<<CAN_FiRx_FB16);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	0bdb      	lsrs	r3, r3, #15
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]

			L_FiR2Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID2&0x38000)>>15);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0bdb      	lsrs	r3, r3, #15
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->Mask2&0x38000)>>15)<<CAN_FiRx_FB16);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	0bdb      	lsrs	r3, r3, #15
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21;

			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB5;
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask2<<CAN_FiRx_FB21;
		}
		break;
 80016dc:	e090      	b.n	8001800 <CAN_AddRxFilter_v+0x420>
 80016de:	bf00      	nop
 80016e0:	08004928 	.word	0x08004928
		else if(CAN_Standard_Id == L_IdType_u8){
 80016e4:	7a3b      	ldrb	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 808a 	bne.w	8001800 <CAN_AddRxFilter_v+0x420>
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB5;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask1<<CAN_FiRx_FB21;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	055b      	lsls	r3, r3, #21
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB5;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->Mask2<<CAN_FiRx_FB21;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	055b      	lsls	r3, r3, #21
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
		break;
 800171c:	e070      	b.n	8001800 <CAN_AddRxFilter_v+0x420>

		/*Filter scale = CAN_FILTER_SCALE_DUAL16*/
	case CAN_FILTER_TYPE_4ID16:
		L_FilterScale_u8 = CAN_Filter_Scale_Dual;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]

		CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FS1R, L_FilterId_u8);
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	3b01      	subs	r3, #1
 8001726:	4a7d      	ldr	r2, [pc, #500]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001730:	7aba      	ldrb	r2, [r7, #10]
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	43d2      	mvns	r2, r2
 800173a:	4610      	mov	r0, r2
 800173c:	7afa      	ldrb	r2, [r7, #11]
 800173e:	3a01      	subs	r2, #1
 8001740:	4976      	ldr	r1, [pc, #472]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 8001742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001746:	4003      	ands	r3, r0
 8001748:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		SET_BIT(CAN_ID(L_CANInstanceId_u8)->FM1R, L_FilterId_u8);
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a72      	ldr	r2, [pc, #456]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800175a:	7aba      	ldrb	r2, [r7, #10]
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4610      	mov	r0, r2
 8001764:	7afa      	ldrb	r2, [r7, #11]
 8001766:	3a01      	subs	r2, #1
 8001768:	496c      	ldr	r1, [pc, #432]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 800176a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800176e:	4303      	orrs	r3, r0
 8001770:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		if (CAN_Extended_Id == L_IdType_u8){
 8001774:	7a3b      	ldrb	r3, [r7, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d122      	bne.n	80017c0 <CAN_AddRxFilter_v+0x3e0>
			L_FiR1Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID1&0x38000)>>15);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	0bdb      	lsrs	r3, r3, #15
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->ID2&0x38000)>>15)<<CAN_FiRx_FB16);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	0bdb      	lsrs	r3, r3, #15
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

			L_FiR2Val_u32 |= ((Arg_FilterCfg_CAN_FilterConfig->ID3&0x38000)>>15);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0bdb      	lsrs	r3, r3, #15
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= (((Arg_FilterCfg_CAN_FilterConfig->ID4&0x38000)>>15)<<CAN_FiRx_FB16);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	0bdb      	lsrs	r3, r3, #15
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21;

			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID3<<CAN_FiRx_FB5;
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID4<<CAN_FiRx_FB21;
		}
		break;
 80017be:	e021      	b.n	8001804 <CAN_AddRxFilter_v+0x424>
		else if(CAN_Standard_Id == L_IdType_u8){
 80017c0:	7a3b      	ldrb	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11e      	bne.n	8001804 <CAN_AddRxFilter_v+0x424>
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID1<<CAN_FiRx_FB5;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	015b      	lsls	r3, r3, #5
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
			L_FiR1Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID2<<CAN_FiRx_FB21;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID3<<CAN_FiRx_FB5;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
			L_FiR2Val_u32 |= Arg_FilterCfg_CAN_FilterConfig->ID4<<CAN_FiRx_FB21;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
		break;
 80017f6:	e005      	b.n	8001804 <CAN_AddRxFilter_v+0x424>
		break;
 80017f8:	bf00      	nop
 80017fa:	e004      	b.n	8001806 <CAN_AddRxFilter_v+0x426>
		break;
 80017fc:	bf00      	nop
 80017fe:	e002      	b.n	8001806 <CAN_AddRxFilter_v+0x426>
		break;
 8001800:	bf00      	nop
 8001802:	e000      	b.n	8001806 <CAN_AddRxFilter_v+0x426>
		break;
 8001804:	bf00      	nop
	}

	switch(L_FilterScale_u8){
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <CAN_AddRxFilter_v+0x432>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d018      	beq.n	8001842 <CAN_AddRxFilter_v+0x462>
 8001810:	e042      	b.n	8001898 <CAN_AddRxFilter_v+0x4b8>
	case CAN_Filter_Scale_Single:
		if (CAN_Remote_Frame == L_FrameType_u8){
 8001812:	7a7b      	ldrb	r3, [r7, #9]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <CAN_AddRxFilter_v+0x44a>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB1);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB1);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
		else{

		}


		break;
 8001828:	e033      	b.n	8001892 <CAN_AddRxFilter_v+0x4b2>
		else if (CAN_Extended_Id == L_IdType_u8){
 800182a:	7a3b      	ldrb	r3, [r7, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d130      	bne.n	8001892 <CAN_AddRxFilter_v+0x4b2>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB2);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB2);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
		break;
 8001840:	e027      	b.n	8001892 <CAN_AddRxFilter_v+0x4b2>

	case CAN_Filter_Scale_Dual:
		if (CAN_Remote_Frame == L_FrameType_u8){
 8001842:	7a7b      	ldrb	r3, [r7, #9]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d110      	bne.n	800186a <CAN_AddRxFilter_v+0x48a>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB4);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB20);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001856:	613b      	str	r3, [r7, #16]

			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB4);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB20);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001866:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB19);
		}
		else{

		}
		break;
 8001868:	e015      	b.n	8001896 <CAN_AddRxFilter_v+0x4b6>
		else if (CAN_Extended_Id == L_IdType_u8){
 800186a:	7a3b      	ldrb	r3, [r7, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d112      	bne.n	8001896 <CAN_AddRxFilter_v+0x4b6>
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB3);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR1Val_u32, CAN_FiRx_FB19);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800187e:	613b      	str	r3, [r7, #16]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB3);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
			SET_BIT(L_FiR2Val_u32, CAN_FiRx_FB19);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800188e:	60fb      	str	r3, [r7, #12]
		break;
 8001890:	e001      	b.n	8001896 <CAN_AddRxFilter_v+0x4b6>
		break;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <CAN_AddRxFilter_v+0x4b8>
		break;
 8001896:	bf00      	nop
	}


	CAN_ID(L_CANInstanceId_u8)->FilterRegister[L_FilterId_u8].FR1 = L_FiR1Val_u32;
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	4619      	mov	r1, r3
 80018a4:	7abb      	ldrb	r3, [r7, #10]
 80018a6:	3348      	adds	r3, #72	; 0x48
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN_ID(L_CANInstanceId_u8)->FilterRegister[L_FilterId_u8].FR2 = L_FiR2Val_u32;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	461a      	mov	r2, r3
 80018ba:	7abb      	ldrb	r3, [r7, #10]
 80018bc:	3348      	adds	r3, #72	; 0x48
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
	/*Activate Filter*/

	SET_BIT(CAN_ID(L_CANInstanceId_u8)->FA1R, L_FilterId_u8);
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80018d4:	7aba      	ldrb	r2, [r7, #10]
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	4610      	mov	r0, r2
 80018de:	7afa      	ldrb	r2, [r7, #11]
 80018e0:	3a01      	subs	r2, #1
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 80018e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018e8:	4303      	orrs	r3, r0
 80018ea:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	/*De-active Filters Mode*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018fc:	7afa      	ldrb	r2, [r7, #11]
 80018fe:	3a01      	subs	r2, #1
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <CAN_AddRxFilter_v+0x53c>)
 8001902:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	08004928 	.word	0x08004928

08001920 <CAN_Receive_v>:
	/*De-active Filters Mode*/
	CLEAR_BIT(CAN_ID(L_CANInstanceId_u8)->FMR, CAN_FMR_FINIT);
}

void CAN_Receive_v(CAN_Cfg const * const Arg_conf_cpcCAN_Cfg, CAN_RxData *Arg_RXData_CAN_RxData,
		const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]

	u8 L_CANInstanceId_u8 = Arg_conf_cpcCAN_Cfg->InstanceId;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	u8 L_FIFONumber_u8 = -1;
 8001936:	23ff      	movs	r3, #255	; 0xff
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u8 L_PendingFlag_u8 = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8 L_TimeoutCheckCondition_u8 = STD_FALSE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if ( STD_MAX_DELAY !=Arg_ToutVal_Cu32){
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194e:	d04a      	beq.n	80019e6 <CAN_Receive_v+0xc6>

		Utils_TimeoutChecker L_timeout_Utils_TimeoutChecker;
		L_TimeoutCheckCondition_u8 = Utils_IsTimeoutOccurred_u8(&L_timeout_Utils_TimeoutChecker);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fd4b 	bl	80043f0 <Utils_IsTimeoutOccurred_u8>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		Utils_TimeoutChecker_Init(&L_timeout_Utils_TimeoutChecker, Arg_ToutVal_Cu32);
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fd1c 	bl	80043a4 <Utils_TimeoutChecker_Init>
	}

	while(L_PendingFlag_u8){
 800196c:	e03b      	b.n	80019e6 <CAN_Receive_v+0xc6>
		for (u8 L_i_u8 = 0; L_i_u8<ARRAY_LENGTH(CAN_ID(L_CANInstanceId_u8)->RFxR);L_i_u8++){
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001974:	e033      	b.n	80019de <CAN_Receive_v+0xbe>

			if ((STD_TRUE == L_TimeoutCheckCondition_u8) ){
 8001976:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <CAN_Receive_v+0x6e>
				if (NULL != Arg_ToutErr_pCu32){
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 811a 	beq.w	8001bba <CAN_Receive_v+0x29a>
					*Arg_ToutErr_pCu32 = STD_TimeOutError;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
				}

				return ;
 800198c:	e115      	b.n	8001bba <CAN_Receive_v+0x29a>
			}
			else if (STD_FALSE == L_TimeoutCheckCondition_u8){
 800198e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <CAN_Receive_v+0x82>
				if (NULL != Arg_ToutErr_pCu32){
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <CAN_Receive_v+0x82>
					*Arg_ToutErr_pCu32 = STD_NoTimeOutError;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
			else{

			}


			if (0 != (CAN_ID(L_CANInstanceId_u8)->RFxR[L_i_u8] & 0x3)){
 80019a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019a6:	3b01      	subs	r3, #1
 80019a8:	4a86      	ldr	r2, [pc, #536]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019b4:	3302      	adds	r3, #2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <CAN_Receive_v+0xb4>
				L_FIFONumber_u8 = L_i_u8;
 80019c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				L_PendingFlag_u8 = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 80019d2:	e008      	b.n	80019e6 <CAN_Receive_v+0xc6>
		for (u8 L_i_u8 = 0; L_i_u8<ARRAY_LENGTH(CAN_ID(L_CANInstanceId_u8)->RFxR);L_i_u8++){
 80019d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80019de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d9c7      	bls.n	8001976 <CAN_Receive_v+0x56>
	while(L_PendingFlag_u8){
 80019e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1bf      	bne.n	800196e <CAN_Receive_v+0x4e>
		return ;
	}


	/*Check If FIFO 0 is not Empty*/
	Arg_RXData_CAN_RxData->FilterId = (u8)((CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDTR>>CAN_RDTxR_FMI)&0xFF);
 80019ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a73      	ldr	r2, [pc, #460]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a00:	331b      	adds	r3, #27
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	73da      	strb	r2, [r3, #15]

	Arg_RXData_CAN_RxData->DataLength = (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDTR&0xF);
 8001a12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a16:	3b01      	subs	r3, #1
 8001a18:	4a6a      	ldr	r2, [pc, #424]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	b2d9      	uxtb	r1, r3
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	7b93      	ldrb	r3, [r2, #14]
 8001a38:	f361 0303 	bfi	r3, r1, #0, #4
 8001a3c:	7393      	strb	r3, [r2, #14]

	Arg_RXData_CAN_RxData->FrameType = GET_BIT(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR, CAN_RIxR_RTR);
 8001a3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a50:	331b      	adds	r3, #27
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	735a      	strb	r2, [r3, #13]
	Arg_RXData_CAN_RxData->IdType = GET_BIT(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR, CAN_RIxR_IDE);
 8001a66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a78:	331b      	adds	r3, #27
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	731a      	strb	r2, [r3, #12]

	if (CAN_Standard_Id == Arg_RXData_CAN_RxData->IdType){
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	7b1b      	ldrb	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d110      	bne.n	8001ab8 <CAN_Receive_v+0x198>
		Arg_RXData_CAN_RxData->ID = CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR>>CAN_RIxR_STID;
 8001a96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	4a49      	ldr	r2, [pc, #292]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa8:	331b      	adds	r3, #27
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4413      	add	r3, r2
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0d5a      	lsrs	r2, r3, #21
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e013      	b.n	8001ae0 <CAN_Receive_v+0x1c0>
	}
	else if(CAN_Extended_Id == Arg_RXData_CAN_RxData->IdType){
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	7b1b      	ldrb	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10f      	bne.n	8001ae0 <CAN_Receive_v+0x1c0>
		Arg_RXData_CAN_RxData->ID = CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RIR>>CAN_RIxR_EXID;
 8001ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad2:	331b      	adds	r3, #27
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	601a      	str	r2, [r3, #0]
	}
	else{

	}

	if (CAN_Data_Frame == Arg_RXData_CAN_RxData->FrameType){
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	7b5b      	ldrb	r3, [r3, #13]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d14b      	bne.n	8001b80 <CAN_Receive_v+0x260>
		for (u8 L_DataIdx_u8=0; L_DataIdx_u8<Arg_RXData_CAN_RxData->DataLength; L_DataIdx_u8++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001aee:	e03d      	b.n	8001b6c <CAN_Receive_v+0x24c>
			if (L_DataIdx_u8<4){
 8001af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d819      	bhi.n	8001b2c <CAN_Receive_v+0x20c>
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDLR >> (8*L_DataIdx_u8));
 8001af8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	40da      	lsrs	r2, r3
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
 8001b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDLR >> (8*L_DataIdx_u8));
 8001b20:	b2d1      	uxtb	r1, r2
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	460a      	mov	r2, r1
 8001b28:	711a      	strb	r2, [r3, #4]
 8001b2a:	e01a      	b.n	8001b62 <CAN_Receive_v+0x242>
			}
			else{
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDHR >> (8*(L_DataIdx_u8%4)));
 8001b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b30:	3b01      	subs	r3, #1
 8001b32:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	40da      	lsrs	r2, r3
				Arg_RXData_CAN_RxData->ReceivedData[L_DataIdx_u8]
 8001b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
													= (u8)(CAN_ID(L_CANInstanceId_u8)->FIFOMailBox[L_FIFONumber_u8].RDHR >> (8*(L_DataIdx_u8%4)));
 8001b58:	b2d1      	uxtb	r1, r2
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	711a      	strb	r2, [r3, #4]
		for (u8 L_DataIdx_u8=0; L_DataIdx_u8<Arg_RXData_CAN_RxData->DataLength; L_DataIdx_u8++){
 8001b62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b66:	3301      	adds	r3, #1
 8001b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	7b9b      	ldrb	r3, [r3, #14]
 8001b70:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d3b7      	bcc.n	8001af0 <CAN_Receive_v+0x1d0>
	else{

	}

	/*Release FIFO for the next message.*/
	SET_BIT(CAN_ID(L_CANInstanceId_u8)->RFxR[L_FIFONumber_u8], CAN_RF0R_RFOM0);
 8001b80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b92:	3302      	adds	r3, #2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <CAN_Receive_v+0x2a4>)
 8001ba2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	e000      	b.n	8001bbc <CAN_Receive_v+0x29c>
				return ;
 8001bba:	bf00      	nop


}
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08004928 	.word	0x08004928

08001bc8 <DMA_Config_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void DMA_Config_v(DMA_Cfg const * const Arg_conf_cpcDMA_Cfg,const u8 Arg_ChannelStream_Cu8){
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Extract stream number value & channel number from function parameter Arg_ChannelStream_Cu8.
	 * */
	const u8 L_StreamNum_Cu8 = Arg_ChannelStream_Cu8 & 0x0F;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	77fb      	strb	r3, [r7, #31]
	const u8 L_ChannelNum_Cu8 = ((Arg_ChannelStream_Cu8 & 0x70) >> 4);
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	111b      	asrs	r3, r3, #4
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	77bb      	strb	r3, [r7, #30]
	 * to RCC_GetPeripheralBus_u8
	 * 2. Get the corresponding bit number of peripheral on it's but through RCC_GetRCCDMABit_u8
	 * by passing instance id of DMA peripheral.
	 * */
	RCC_EnableClock_v(
			RCC_GetPeripheralBus_u8((u32)DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)),
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	4aaa      	ldr	r2, [pc, #680]	; (8001e98 <DMA_Config_v+0x2d0>)
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 feeb 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461c      	mov	r4, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 ff7c 	bl	8003b00 <RCC_GetRCCDMABit_u8>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f001 fe21 	bl	8003854 <RCC_EnableClock_v>
			RCC_GetRCCDMABit_u8(Arg_conf_cpcDMA_Cfg->InstanceId));

	/*Disable DMA*/
	DMA_DisableDMA_v(Arg_conf_cpcDMA_Cfg, Arg_ChannelStream_Cu8);
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fb06 	bl	8002228 <DMA_DisableDMA_v>
	/*
	 * Clear all interrupt flags for selected DMA
	 * If stream number is 0, 1, 2, and 3, it's cleared from LIFCR register.
	 * If stream number is 4, 5, 6, and 7, it's cleared from HIFCR register
	 * */
	if (L_StreamNum_Cu8 <4){
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d815      	bhi.n	8001c4e <DMA_Config_v+0x86>
		DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->LIFCR &= ~((u32)0xF<<(L_StreamNum_Cu8*8));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	4a9b      	ldr	r2, [pc, #620]	; (8001e98 <DMA_Config_v+0x2d0>)
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	210f      	movs	r1, #15
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	7809      	ldrb	r1, [r1, #0]
 8001c40:	3901      	subs	r1, #1
 8001c42:	4895      	ldr	r0, [pc, #596]	; (8001e98 <DMA_Config_v+0x2d0>)
 8001c44:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
 8001c4c:	e016      	b.n	8001c7c <DMA_Config_v+0xb4>
	}
	else{
		DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->HIFCR &= ~((u32)0xF<<((L_StreamNum_Cu8%4)*8));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <DMA_Config_v+0x2d0>)
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	7ffb      	ldrb	r3, [r7, #31]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	210f      	movs	r1, #15
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	7809      	ldrb	r1, [r1, #0]
 8001c70:	3901      	subs	r1, #1
 8001c72:	4889      	ldr	r0, [pc, #548]	; (8001e98 <DMA_Config_v+0x2d0>)
 8001c74:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
	 * To optimize code size and execution time.
	 * These variables are defined by their corresponding register reset value,
	 * and set/clear only bits that differ from reset value.
	 * */

	u32 L_CR_Reg_Val_u32 = DMA_CR_RESET_VALUE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
	u32 L_FCR_Reg_Val_u32 = DMA_FCR_RESET_VALUE;
 8001c80:	2321      	movs	r3, #33	; 0x21
 8001c82:	623b      	str	r3, [r7, #32]

	/*Set Channel Number.*/
	/*
	 * If transfer direction is not Memory to memory, channel number value is ignored.
	 * */
	if (DMA_TRANSFER_DIR_MEM_TO_MEM != Arg_conf_cpcDMA_Cfg->TransferDir){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7adb      	ldrb	r3, [r3, #11]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d005      	beq.n	8001c98 <DMA_Config_v+0xd0>
		L_CR_Reg_Val_u32 |= (L_ChannelNum_Cu8 <<DMA_CR_CHSEL_0);
 8001c8c:	7fbb      	ldrb	r3, [r7, #30]
 8001c8e:	065b      	lsls	r3, r3, #25
 8001c90:	461a      	mov	r2, r3
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	4313      	orrs	r3, r2
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Burst configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->Burst){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	795b      	ldrb	r3, [r3, #5]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	f200 80b2 	bhi.w	8001e06 <DMA_Config_v+0x23e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <DMA_Config_v+0xe0>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001e07 	.word	0x08001e07
 8001cac:	08001ce9 	.word	0x08001ce9
 8001cb0:	08001cf3 	.word	0x08001cf3
 8001cb4:	08001cfd 	.word	0x08001cfd
 8001cb8:	08001d0f 	.word	0x08001d0f
 8001cbc:	08001d19 	.word	0x08001d19
 8001cc0:	08001d2b 	.word	0x08001d2b
 8001cc4:	08001d3d 	.word	0x08001d3d
 8001cc8:	08001d57 	.word	0x08001d57
 8001ccc:	08001d61 	.word	0x08001d61
 8001cd0:	08001d73 	.word	0x08001d73
 8001cd4:	08001d85 	.word	0x08001d85
 8001cd8:	08001d9f 	.word	0x08001d9f
 8001cdc:	08001db1 	.word	0x08001db1
 8001ce0:	08001dcb 	.word	0x08001dcb
 8001ce4:	08001de5 	.word	0x08001de5
	case DMA_BURST_MEM_SINGLE_TRANSFER_PERPH_SINGLE_TRANSFER:
		/*It is default value, so no changes to L_CR_Reg_Val_u32.*/
		break;
	case DMA_BURST_MEM_INCR_4_BEATS_TRANSFER_PERPH_SINGLE_TRANSFER:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001cf0:	e08a      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_8_BEATS_TRANSFER_PERPH_SINGLE_TRANSFER:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001cfa:	e085      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_16_BEATS_TRANSFER_PERPH_SINGLE_TRANSFER:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MBURST_0);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d0c:	e07c      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_SINGLE_TRANSFER_PERPH_INCR_4_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d16:	e077      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_4_BEATS_TRANSFER_PERPH_INCR_4_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d28:	e06e      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_8_BEATS_TRANSFER_PERPH_INCR_4_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d3a:	e065      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_16_BEATS_TRANSFER_PERPH_INCR_4_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d54:	e058      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_SINGLE_TRANSFER_PERPH_INCR_8_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d5e:	e053      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_4_BEATS_TRANSFER_PERPH_INCR_8_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d70:	e04a      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_8_BEATS_TRANSFER_PERPH_INCR_8_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d82:	e041      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_16_BEATS_TRANSFER_PERPH_INCR_8_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d9c:	e034      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_SINGLE_TRANSFER_PERPH_INCR_16_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001dae:	e02b      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_4_BEATS_TRANSFER_PERPH_INCR_16_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001dc8:	e01e      	b.n	8001e08 <DMA_Config_v+0x240>
	case DMA_BURST_MEM_INCR_8_BEATS_TRANSFER_PERPH_INCR_16_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001de2:	e011      	b.n	8001e08 <DMA_Config_v+0x240>

	case DMA_BURST_MEM_INCR_16_BEATS_TRANSFER_PERPH_INCR_16_BEATS:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_0);
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_MBURST_1);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_0);
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PBURST_1);
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e04:	e000      	b.n	8001e08 <DMA_Config_v+0x240>

	default:
		break;
 8001e06:	bf00      	nop
	}



	/*Double buffer configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->DoubleBuffer){
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d00b      	beq.n	8001e28 <DMA_Config_v+0x260>
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	dc12      	bgt.n	8001e3a <DMA_Config_v+0x272>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <DMA_Config_v+0x276>
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d000      	beq.n	8001e1e <DMA_Config_v+0x256>
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_DBM);
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_CT);
		break;

	default:
		break;
 8001e1c:	e00d      	b.n	8001e3a <DMA_Config_v+0x272>
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_DBM);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e26:	e00b      	b.n	8001e40 <DMA_Config_v+0x278>
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_DBM);
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_CT);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e38:	e002      	b.n	8001e40 <DMA_Config_v+0x278>
		break;
 8001e3a:	bf00      	nop
 8001e3c:	e000      	b.n	8001e40 <DMA_Config_v+0x278>
		break;
 8001e3e:	bf00      	nop
	}

	/*Priority configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->Priority){
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d81e      	bhi.n	8001e86 <DMA_Config_v+0x2be>
 8001e48:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <DMA_Config_v+0x288>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e87 	.word	0x08001e87
 8001e54:	08001e61 	.word	0x08001e61
 8001e58:	08001e6b 	.word	0x08001e6b
 8001e5c:	08001e75 	.word	0x08001e75
	case DMA_PRIORITY_LOW:
		/*It is default value, so no changes to L_CR_Reg_Val_u32.*/
		break;

	case DMA_PRIORITY_MEDIUM:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PL_0);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e68:	e00e      	b.n	8001e88 <DMA_Config_v+0x2c0>

	case DMA_PRIORITY_HIGH:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PL_1);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e72:	e009      	b.n	8001e88 <DMA_Config_v+0x2c0>

	case DMA_PRIORITY_VERY_HIGH:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PL_0);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PL_1);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e84:	e000      	b.n	8001e88 <DMA_Config_v+0x2c0>

	default:
		break;
 8001e86:	bf00      	nop
	}

	/*Peripheral increment offset configurations*/
	switch (Arg_conf_cpcDMA_Cfg->PeripheralIncrementOffset){
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	78db      	ldrb	r3, [r3, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <DMA_Config_v+0x2de>
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d003      	beq.n	8001e9c <DMA_Config_v+0x2d4>
	case DMA_PERPH_INCR_IS_WORD:
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PINCOS);
		break;

	default:
		break;
 8001e94:	e008      	b.n	8001ea8 <DMA_Config_v+0x2e0>
 8001e96:	bf00      	nop
 8001e98:	08004930 	.word	0x08004930
		SET_BIT(L_CR_Reg_Val_u32,DMA_CR_PINCOS);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001ea4:	e000      	b.n	8001ea8 <DMA_Config_v+0x2e0>
		break;
 8001ea6:	bf00      	nop
	}

	/*Data size configurations section*/
	switch (Arg_conf_cpcDMA_Cfg->DataSize){
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	789b      	ldrb	r3, [r3, #2]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d84d      	bhi.n	8001f4c <DMA_Config_v+0x384>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <DMA_Config_v+0x2f0>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001f4d 	.word	0x08001f4d
 8001ebc:	08001edd 	.word	0x08001edd
 8001ec0:	08001ee7 	.word	0x08001ee7
 8001ec4:	08001ef1 	.word	0x08001ef1
 8001ec8:	08001efb 	.word	0x08001efb
 8001ecc:	08001f0d 	.word	0x08001f0d
 8001ed0:	08001f1f 	.word	0x08001f1f
 8001ed4:	08001f29 	.word	0x08001f29
 8001ed8:	08001f3b 	.word	0x08001f3b
	case DMA_DATA_SIZE_MEM_BYTE_PERPH_BYTE:
		/*It is default value, so no changes to L_CR_Reg_Val_u32.*/
		break;

	case DMA_DATA_SIZE_MEM_BYTE_PERPH_HALF_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_0);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001ee4:	e033      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_BYTE_PERPH_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_1);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001eee:	e02e      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_HALF_WORD_PERPH_BYTE:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_0);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001ef8:	e029      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_HALF_WORD_PERPH_HALF_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_0);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_0);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f0a:	e020      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_HALF_WORD_PERPH_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_0);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_1);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f1c:	e017      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_WORD_PERPH_BYTE:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_1);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f26:	e012      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_WORD_PERPH_HALF_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_1);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_0);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f38:	e009      	b.n	8001f4e <DMA_Config_v+0x386>

	case DMA_DATA_SIZE_MEM_WORD_PERPH_WORD:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MSIZE_1);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PSIZE_1);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f4a:	e000      	b.n	8001f4e <DMA_Config_v+0x386>

	default:
		break;
 8001f4c:	bf00      	nop
	}


	/*Increment mode configurations section.*/
	switch (Arg_conf_cpcDMA_Cfg->IncrementMode){
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7a9b      	ldrb	r3, [r3, #10]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d81d      	bhi.n	8001f92 <DMA_Config_v+0x3ca>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <DMA_Config_v+0x394>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f93 	.word	0x08001f93
 8001f60:	08001f6d 	.word	0x08001f6d
 8001f64:	08001f7f 	.word	0x08001f7f
 8001f68:	08001f89 	.word	0x08001f89
	case DMA_INCREMENT_MODE_FIXED_MEM_FIXED_PERPH:
		/*It is default value, so no changes to L_CR_Reg_Val_u32.*/
		break;

	case DMA_INCREMENT_MODE_INCR_MEM_INCR_PERPH:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MINC);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PINC);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f7c:	e00a      	b.n	8001f94 <DMA_Config_v+0x3cc>

	case DMA_INCREMENT_MODE_FIXED_MEM_INCR_PERPH:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PINC);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f86:	e005      	b.n	8001f94 <DMA_Config_v+0x3cc>

	case DMA_INCREMENT_MODE_INCR_MEM_FIXED_PERPH:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_MINC);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001f90:	e000      	b.n	8001f94 <DMA_Config_v+0x3cc>

	default:
		break;
 8001f92:	bf00      	nop
	}

	/*Data transfer direction configurations section.*/

	switch(Arg_conf_cpcDMA_Cfg->TransferDir){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7adb      	ldrb	r3, [r3, #11]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d00b      	beq.n	8001fb4 <DMA_Config_v+0x3ec>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	dc0e      	bgt.n	8001fbe <DMA_Config_v+0x3f6>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <DMA_Config_v+0x3fa>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d000      	beq.n	8001faa <DMA_Config_v+0x3e2>
	case DMA_TRANSFER_DIR_MEM_TO_MEM:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_DIR_1);
		break;

	default:
		break;
 8001fa8:	e009      	b.n	8001fbe <DMA_Config_v+0x3f6>
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_DIR_0);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001fb2:	e007      	b.n	8001fc4 <DMA_Config_v+0x3fc>
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_DIR_1);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001fbc:	e002      	b.n	8001fc4 <DMA_Config_v+0x3fc>
		break;
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <DMA_Config_v+0x3fc>
		break;
 8001fc2:	bf00      	nop
	}

	/*Circular Mode configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->CircularMode){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7a1b      	ldrb	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <DMA_Config_v+0x414>
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d000      	beq.n	8001fd2 <DMA_Config_v+0x40a>
	case DMA_CIRCULAR_MODE_ENABLE:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_CIRC);
		break;

	default:
		break;
 8001fd0:	e005      	b.n	8001fde <DMA_Config_v+0x416>
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_CIRC);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001fda:	e000      	b.n	8001fde <DMA_Config_v+0x416>
		break;
 8001fdc:	bf00      	nop
	}
	/*Flow Controller configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->FlowController){
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7a5b      	ldrb	r3, [r3, #9]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <DMA_Config_v+0x42e>
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d000      	beq.n	8001fec <DMA_Config_v+0x424>
	case DMA_PERPH_Controller_DMA:
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PFCTRL);
		break;

	default:
		break;
 8001fea:	e005      	b.n	8001ff8 <DMA_Config_v+0x430>
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_PFCTRL);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001ff4:	e000      	b.n	8001ff8 <DMA_Config_v+0x430>
		break;
 8001ff6:	bf00      	nop

	}

	/*Direct Mode configurations section.*/
	switch(Arg_conf_cpcDMA_Cfg->DirectMode){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	79db      	ldrb	r3, [r3, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <DMA_Config_v+0x448>
 8002000:	2b01      	cmp	r3, #1
 8002002:	d000      	beq.n	8002006 <DMA_Config_v+0x43e>
	case DMA_DIRECT_MODE_DISABLE:
		SET_BIT(L_FCR_Reg_Val_u32, DMA_FCR_DMDIS);
		break;

	default:
		break;
 8002004:	e005      	b.n	8002012 <DMA_Config_v+0x44a>
		SET_BIT(L_FCR_Reg_Val_u32, DMA_FCR_DMDIS);
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	623b      	str	r3, [r7, #32]
		break;
 800200e:	e000      	b.n	8002012 <DMA_Config_v+0x44a>
		break;
 8002010:	bf00      	nop
	}
	/*Mapping between DMA stream interrupt and It's corresponding NVIC*/
	u8 L_DMANVIC_u8[2][8] = {{
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <DMA_Config_v+0x5c8>)
 8002014:	f107 040c 	add.w	r4, r7, #12
 8002018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800201a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	/*interrupt*/

	if (DMA_INTERRUPT_DISABLE == Arg_conf_cpcDMA_Cfg->Interrupt){
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03a      	beq.n	800209c <DMA_Config_v+0x4d4>
		 * - Transfer complete interrupt.
		 * - FIFO error interrupt.
		 * */

	}
	else if (0 < (DMA_INTERRUPT_TRANSFER_COMPLETE & Arg_conf_cpcDMA_Cfg->Interrupt)){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <DMA_Config_v+0x476>
		/*Enable Transfer complete interrupt.*/
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_TCIE);
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	e02e      	b.n	800209c <DMA_Config_v+0x4d4>
	}
	else if (0 < (DMA_INTERRUPT_HALF_TRANSFER & Arg_conf_cpcDMA_Cfg->Interrupt)){
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <DMA_Config_v+0x48e>
		/*Enable Half-Transfer complete interrupt.*/
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_HTIE);
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	e022      	b.n	800209c <DMA_Config_v+0x4d4>
	}
	else if (0 < (DMA_INTERRUPT_TRANSFER_ERR & Arg_conf_cpcDMA_Cfg->Interrupt)){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	785b      	ldrb	r3, [r3, #1]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <DMA_Config_v+0x4a6>
		/*Enable Transfer error interrupt.*/
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_TEIE);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	e016      	b.n	800209c <DMA_Config_v+0x4d4>
	}
	else if (0 < (DMA_INTERRUPT_DIRECT_MODE_ERR & Arg_conf_cpcDMA_Cfg->Interrupt)){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <DMA_Config_v+0x4be>
		/*Enable Direct mode interrupt.*/
		SET_BIT(L_CR_Reg_Val_u32, DMA_CR_DMEIE);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	e00a      	b.n	800209c <DMA_Config_v+0x4d4>
	}
	else if (0 < (DMA_INTERRUPT_FIFO_ERR & Arg_conf_cpcDMA_Cfg->Interrupt)){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <DMA_Config_v+0x4d4>
		/*Enable FIFO error interrupt.*/
		SET_BIT(L_FCR_Reg_Val_u32, DMA_FCR_FEIE);
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209a:	623b      	str	r3, [r7, #32]
	}

	/*
	 * If any type of interrupt exist, enable this intterupt to be detected by NVIC.
	 * */
	if (0 < Arg_conf_cpcDMA_Cfg->Interrupt){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <DMA_Config_v+0x4f6>
		NVIC_EnableInterrupt_v(L_DMANVIC_u8[Arg_conf_cpcDMA_Cfg->InstanceId-1][L_StreamNum_Cu8]);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	3228      	adds	r2, #40	; 0x28
 80020b0:	443a      	add	r2, r7
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1c      	subs	r3, #28
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 f9b7 	bl	800442c <NVIC_EnableInterrupt_v>
	}

	/*Assign each register to it's corresponding value.*/
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].FCR = L_FCR_Reg_Val_u32;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <DMA_Config_v+0x5cc>)
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	4619      	mov	r1, r3
 80020cc:	7ffa      	ldrb	r2, [r7, #31]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3324      	adds	r3, #36	; 0x24
 80020da:	6a3a      	ldr	r2, [r7, #32]
 80020dc:	601a      	str	r2, [r3, #0]
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].CR = L_CR_Reg_Val_u32;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <DMA_Config_v+0x5cc>)
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	4619      	mov	r1, r3
 80020ec:	7ffa      	ldrb	r2, [r7, #31]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3310      	adds	r3, #16
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	601a      	str	r2, [r3, #0]
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].NDTR = Arg_conf_cpcDMA_Cfg->Size;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8999      	ldrh	r1, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3b01      	subs	r3, #1
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <DMA_Config_v+0x5cc>)
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	4618      	mov	r0, r3
 8002110:	7ffa      	ldrb	r2, [r7, #31]
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4403      	add	r3, r0
 800211c:	3314      	adds	r3, #20
 800211e:	6019      	str	r1, [r3, #0]
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].PAR = Arg_conf_cpcDMA_Cfg->PeripheralAddress;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <DMA_Config_v+0x5cc>)
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	4618      	mov	r0, r3
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6911      	ldr	r1, [r2, #16]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4403      	add	r3, r0
 8002140:	6019      	str	r1, [r3, #0]
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].M0AR = Arg_conf_cpcDMA_Cfg->MemoryAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <DMA_Config_v+0x5cc>)
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	4618      	mov	r0, r3
 8002150:	7ffb      	ldrb	r3, [r7, #31]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6951      	ldr	r1, [r2, #20]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4403      	add	r3, r0
 8002162:	3304      	adds	r3, #4
 8002164:	6019      	str	r1, [r3, #0]
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].M1AR = Arg_conf_cpcDMA_Cfg->MemoryAddressSecondBuffer;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <DMA_Config_v+0x5cc>)
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	4618      	mov	r0, r3
 8002174:	7ffa      	ldrb	r2, [r7, #31]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4403      	add	r3, r0
 8002184:	3320      	adds	r3, #32
 8002186:	6019      	str	r1, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	372c      	adds	r7, #44	; 0x2c
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	080048e0 	.word	0x080048e0
 8002194:	08004930 	.word	0x08004930

08002198 <DMA_EnableDMA_v>:


void DMA_EnableDMA_v (DMA_Cfg const * const Arg_conf_cpcDMA_Cfg,const u8 Arg_ChannelStream_Cu8){
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
	const u8 L_StreamNum_Cu8 = Arg_ChannelStream_Cu8 & 0x0F;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	73fb      	strb	r3, [r7, #15]
	const u8 L_InstanceId_Cu8 = Arg_conf_cpcDMA_Cfg->InstanceId;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	73bb      	strb	r3, [r7, #14]

	SET_BIT(DMA_ID(L_InstanceId_Cu8)->Stream[L_StreamNum_Cu8].CR, DMA_CR_EN);
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <DMA_EnableDMA_v+0x8c>)
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	4619      	mov	r1, r3
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3310      	adds	r3, #16
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	7bba      	ldrb	r2, [r7, #14]
 80021d0:	3a01      	subs	r2, #1
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <DMA_EnableDMA_v+0x8c>)
 80021d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021d8:	4610      	mov	r0, r2
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	f043 0101 	orr.w	r1, r3, #1
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4403      	add	r3, r0
 80021ea:	3310      	adds	r3, #16
 80021ec:	6019      	str	r1, [r3, #0]
	/*Wait till DMA is enabled.*/
	while(STD_DIASBLE == GET_BIT(DMA_ID(L_InstanceId_Cu8)->Stream[L_StreamNum_Cu8].CR, DMA_CR_EN)){
 80021ee:	bf00      	nop
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <DMA_EnableDMA_v+0x8c>)
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	4619      	mov	r1, r3
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3310      	adds	r3, #16
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ed      	beq.n	80021f0 <DMA_EnableDMA_v+0x58>

	}
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	08004930 	.word	0x08004930

08002228 <DMA_DisableDMA_v>:
void DMA_DisableDMA_v (DMA_Cfg const * const Arg_conf_cpcDMA_Cfg,const u8 Arg_ChannelStream_Cu8){
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
	u8 L_StreamNum_Cu8 = Arg_ChannelStream_Cu8 & 0x0F;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	73fb      	strb	r3, [r7, #15]
	CLEAR_BIT(DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].CR, DMA_CR_EN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <DMA_DisableDMA_v+0x8c>)
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	4619      	mov	r1, r3
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3310      	adds	r3, #16
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	3a01      	subs	r2, #1
 8002260:	4914      	ldr	r1, [pc, #80]	; (80022b4 <DMA_DisableDMA_v+0x8c>)
 8002262:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002266:	4610      	mov	r0, r2
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	f023 0101 	bic.w	r1, r3, #1
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4403      	add	r3, r0
 8002278:	3310      	adds	r3, #16
 800227a:	6019      	str	r1, [r3, #0]
	/*wait till DMA is disabled*/
	while (STD_TRUE == GET_BIT(DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[L_StreamNum_Cu8].CR, DMA_CR_EN)){
 800227c:	bf00      	nop
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <DMA_DisableDMA_v+0x8c>)
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	4619      	mov	r1, r3
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3310      	adds	r3, #16
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d0ec      	beq.n	800227e <DMA_DisableDMA_v+0x56>

	}
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	08004930 	.word	0x08004930

080022b8 <DMA_CheckInterruptAndClear_Bool>:
	DMA_ID(Arg_conf_cpcDMA_Cfg->InstanceId)->Stream[Arg_ChannelStream_Cu8 & 0x0F].M1AR = Arg_conf_cpcDMA_Cfg->MemoryAddressSecondBuffer;
	/*Enable DMA*/
	DMA_EnableDMA_v(Arg_conf_cpcDMA_Cfg, Arg_ChannelStream_Cu8);
}

Bool DMA_CheckInterruptAndClear_Bool(const u8 Arg_DMAInstanceId_u8,const  u8 Arg_StreamNum_Cu8,const  u8 Arg_InterruptFlagPos_Cu8){
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	460b      	mov	r3, r1
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	717b      	strb	r3, [r7, #5]
	u8 L_PendRegPos_u8 = (Arg_StreamNum_Cu8 % 4);
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	73fb      	strb	r3, [r7, #15]
	Bool L_CheckInterrupt_Bool = STD_FALSE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73bb      	strb	r3, [r7, #14]
	switch(L_PendRegPos_u8){
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d825      	bhi.n	8002328 <DMA_CheckInterruptAndClear_Bool+0x70>
 80022dc:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <DMA_CheckInterruptAndClear_Bool+0x2c>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022ff 	.word	0x080022ff
 80022ec:	0800230d 	.word	0x0800230d
 80022f0:	0800231b 	.word	0x0800231b
	case 0:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	797b      	ldrb	r3, [r7, #5]
 80022f8:	4413      	add	r3, r2
 80022fa:	73fb      	strb	r3, [r7, #15]
		break;
 80022fc:	e015      	b.n	800232a <DMA_CheckInterruptAndClear_Bool+0x72>

	case 1:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+6-1;
 80022fe:	797a      	ldrb	r2, [r7, #5]
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	4413      	add	r3, r2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3305      	adds	r3, #5
 8002308:	73fb      	strb	r3, [r7, #15]
		break;
 800230a:	e00e      	b.n	800232a <DMA_CheckInterruptAndClear_Bool+0x72>

	case 2:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+16-2;
 800230c:	797a      	ldrb	r2, [r7, #5]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4413      	add	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	330e      	adds	r3, #14
 8002316:	73fb      	strb	r3, [r7, #15]
		break;
 8002318:	e007      	b.n	800232a <DMA_CheckInterruptAndClear_Bool+0x72>

	case 3:
		L_PendRegPos_u8 += Arg_InterruptFlagPos_Cu8+22-3;
 800231a:	797a      	ldrb	r2, [r7, #5]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4413      	add	r3, r2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3313      	adds	r3, #19
 8002324:	73fb      	strb	r3, [r7, #15]
		break;
 8002326:	e000      	b.n	800232a <DMA_CheckInterruptAndClear_Bool+0x72>
	default:
		break;
 8002328:	bf00      	nop
	}


	if ((Arg_StreamNum_Cu8 <= 3)&&(STD_TRUE == GET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->LISR, L_PendRegPos_u8))){
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d821      	bhi.n	8002374 <DMA_CheckInterruptAndClear_Bool+0xbc>
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	3b01      	subs	r3, #1
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d114      	bne.n	8002374 <DMA_CheckInterruptAndClear_Bool+0xbc>
		SET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->LIFCR, L_PendRegPos_u8);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	3b01      	subs	r3, #1
 800234e:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4610      	mov	r0, r2
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	3a01      	subs	r2, #1
 8002364:	491a      	ldr	r1, [pc, #104]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002366:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800236a:	4303      	orrs	r3, r0
 800236c:	6093      	str	r3, [r2, #8]
		L_CheckInterrupt_Bool = STD_TRUE;
 800236e:	2301      	movs	r3, #1
 8002370:	73bb      	strb	r3, [r7, #14]
 8002372:	e026      	b.n	80023c2 <DMA_CheckInterruptAndClear_Bool+0x10a>
	}
	else if ((Arg_StreamNum_Cu8 >= 4)&&(STD_TRUE == GET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->HISR, L_PendRegPos_u8))){
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d921      	bls.n	80023be <DMA_CheckInterruptAndClear_Bool+0x106>
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	3b01      	subs	r3, #1
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d114      	bne.n	80023be <DMA_CheckInterruptAndClear_Bool+0x106>
		SET_BIT(DMA_ID(Arg_DMAInstanceId_u8)->HIFCR, L_PendRegPos_u8);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	3b01      	subs	r3, #1
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4610      	mov	r0, r2
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	3a01      	subs	r2, #1
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <DMA_CheckInterruptAndClear_Bool+0x118>)
 80023b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80023b4:	4303      	orrs	r3, r0
 80023b6:	60d3      	str	r3, [r2, #12]
		L_CheckInterrupt_Bool = STD_TRUE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73bb      	strb	r3, [r7, #14]
 80023bc:	e001      	b.n	80023c2 <DMA_CheckInterruptAndClear_Bool+0x10a>
	}
	else{
		L_CheckInterrupt_Bool = STD_FALSE;
 80023be:	2300      	movs	r3, #0
 80023c0:	73bb      	strb	r3, [r7, #14]
	}


	return L_CheckInterrupt_Bool;
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	08004930 	.word	0x08004930

080023d4 <EXTI_CheckInterrupt_Bool>:
    the existence of interrupt for specific pin number.
 * @param  Arg_PinNumber_u8 --> Pin number that you need to check whether it's source of interrupt or not.
 * @retval --> Bool value represents whether there is an interrupt or not.
 * */

Bool EXTI_CheckInterrupt_Bool(u8 Arg_PinNumber_u8){
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	if (STD_TRUE == GET_BIT(EXTI->PR, Arg_PinNumber_u8)){
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <EXTI_CheckInterrupt_Bool+0x30>)
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <EXTI_CheckInterrupt_Bool+0x20>
		return STD_TRUE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <EXTI_CheckInterrupt_Bool+0x22>
	}
	else{

		return STD_FALSE;
 80023f4:	2300      	movs	r3, #0
	}
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40013c00 	.word	0x40013c00

08002408 <EXTI_ClearInterrupt_v>:
/* @brief  --> This function usually used by interrupt handler to check for
    the existence of interrupt for specific pin number and clear pending flag if it's exist.
 * @param  Arg_PinNumber_u8 --> Pin number that you need to clear pending flag.
 * @retval --> None.
 * */
void EXTI_ClearInterrupt_v(u8 Arg_PinNumber_u8){
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	if (STD_TRUE == GET_BIT(EXTI->PR, Arg_PinNumber_u8)){
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <EXTI_ClearInterrupt_v+0x40>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10a      	bne.n	800243a <EXTI_ClearInterrupt_v+0x32>
		SET_BIT(EXTI->PR, Arg_PinNumber_u8);
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <EXTI_ClearInterrupt_v+0x40>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <EXTI_ClearInterrupt_v+0x40>)
 8002434:	430b      	orrs	r3, r1
 8002436:	6153      	str	r3, [r2, #20]
		return;
 8002438:	e000      	b.n	800243c <EXTI_ClearInterrupt_v+0x34>
	}
	else{
		return;
 800243a:	bf00      	nop
	}
}
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40013c00 	.word	0x40013c00

0800244c <GPIO_Config_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void GPIO_Config_v(GPIO_Cfg const * const Arg_conf_cpcGPIO_Cfg){
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	 * Target of this process is to get peripheral using user-friendly convention.
	 * For example instead of using GPIOA in APP/HAL layer, we decided to use 'A' or 'a'
	 * */

	/*Read input id from user.*/
	u8 L_GPIOid_u8 = Arg_conf_cpcGPIO_Cfg->InstanceId;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	77fb      	strb	r3, [r7, #31]
	/*
	 * GPIOA will have index 0 in L_GPIOid_u8 array
	 * So the following process check for the boundary of input value
	 * If input id exceeds the boundary an error will be issued.
	 * */
	if (('A' <= L_GPIOid_u8 ) && (L_GPIOid_u8 <= 'Z')){
 800245a:	7ffb      	ldrb	r3, [r7, #31]
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d906      	bls.n	800246e <GPIO_Config_v+0x22>
 8002460:	7ffb      	ldrb	r3, [r7, #31]
 8002462:	2b5a      	cmp	r3, #90	; 0x5a
 8002464:	d803      	bhi.n	800246e <GPIO_Config_v+0x22>
		L_GPIOid_u8 -= 'A';
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	3b41      	subs	r3, #65	; 0x41
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e008      	b.n	8002480 <GPIO_Config_v+0x34>
	}
	else if (('a' <= L_GPIOid_u8 ) && (L_GPIOid_u8 <= 'z')){
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b60      	cmp	r3, #96	; 0x60
 8002472:	d905      	bls.n	8002480 <GPIO_Config_v+0x34>
 8002474:	7ffb      	ldrb	r3, [r7, #31]
 8002476:	2b7a      	cmp	r3, #122	; 0x7a
 8002478:	d802      	bhi.n	8002480 <GPIO_Config_v+0x34>
		L_GPIOid_u8 -= 'a';
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	3b61      	subs	r3, #97	; 0x61
 800247e:	77fb      	strb	r3, [r7, #31]

	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
 8002480:	7ffb      	ldrb	r3, [r7, #31]
			RCC_GetPeripheralBus_u8((u32)GPIO_ID(L_GPIOid_u8)),
 8002482:	4a9b      	ldr	r2, [pc, #620]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8002488:	4618      	mov	r0, r3
 800248a:	f001 faa1 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 800248e:	4603      	mov	r3, r0
 8002490:	461c      	mov	r4, r3
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	3301      	adds	r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f001 fae7 	bl	8003a6c <RCC_GetRCCGPIOBit_u8>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4620      	mov	r0, r4
 80024a4:	f001 f9d6 	bl	8003854 <RCC_EnableClock_v>
	 * when we assign the value 0b0101
	 * pin 0 & 2 have the value of enabled attributes.
	 * pin 1 & 3 have the value of disabled attributes.
	 * */

	u16 L_PINsMask_u16 = Arg_conf_cpcGPIO_Cfg->PINs;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	81fb      	strh	r3, [r7, #14]
	 * for example if input is 0x0101
	 * the following loop assign value 0x00110011
	 * the first 2 bits(LSB) for pin 0
	 * the second 2 bits (LSB) bit 0 & bit 1 for pin 1
	 * */
	u32 L_PINsMask_u32 = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
	for (u8 L_i_u8 =0; L_i_u8<16; L_i_u8++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e013      	b.n	80024e0 <GPIO_Config_v+0x94>
		if (STD_TRUE == GET_BIT(L_PINsMask_u16, L_i_u8)){
 80024b8:	89fa      	ldrh	r2, [r7, #14]
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	fa42 f303 	asr.w	r3, r2, r3
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <GPIO_Config_v+0x8e>
			L_PINsMask_u32 |= (0b11<<(L_i_u8*2));
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
	for (u8 L_i_u8 =0; L_i_u8<16; L_i_u8++){
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	3301      	adds	r3, #1
 80024de:	75fb      	strb	r3, [r7, #23]
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d9e8      	bls.n	80024b8 <GPIO_Config_v+0x6c>
	 * To configure input mode for PINs --> GPIO_Mode_INPUT
	 * To configure output mode for PINs --> GPIO_Mode_OUTPUT
	 * To configure Alternate Function mode for PINs --> GPIO_Mode_Alternate_Function
	 * To configure Analog Mode for PINs --> GPIO_Mode_Analog
	 * */
	u32 L_MODERVal_u32 = GPIO_ID(L_GPIOid_u8)->MODER;
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	4a81      	ldr	r2, [pc, #516]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
	switch (Arg_conf_cpcGPIO_Cfg->Mode){
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	889b      	ldrh	r3, [r3, #4]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d831      	bhi.n	800255e <GPIO_Config_v+0x112>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <GPIO_Config_v+0xb4>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	0800251d 	.word	0x0800251d
 8002508:	08002539 	.word	0x08002539
 800250c:	08002555 	.word	0x08002555
	case GPIO_MODE_INPUT:
		L_MODERVal_u32 |= 0x00u & L_PINsMask_u32;
		L_MODERVal_u32 &= ~(~0x00u & L_PINsMask_u32);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
		break;
 800251a:	e021      	b.n	8002560 <GPIO_Config_v+0x114>
	case GPIO_MODE_OUTPUT:
		L_MODERVal_u32 |= 0x55555555 & L_PINsMask_u32;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0x55555555 & L_PINsMask_u32);
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
		break;
 8002536:	e013      	b.n	8002560 <GPIO_Config_v+0x114>
	case GPIO_MODE_ALTERNATE_FUNCTION:
		L_MODERVal_u32 |= 0xAAAAAAAAu & L_PINsMask_u32;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0xAAAAAAAAu & L_PINsMask_u32);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
		break;
 8002552:	e005      	b.n	8002560 <GPIO_Config_v+0x114>
	case GPIO_MODE_ANALOG:
		L_MODERVal_u32 |= 0xFFFFFFFFu & L_PINsMask_u32;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
		L_MODERVal_u32 &= ~(~0xFFFFFFFFu & L_PINsMask_u32);
		break;
 800255c:	e000      	b.n	8002560 <GPIO_Config_v+0x114>
	default :
		/*Error*/
		break;
 800255e:	bf00      	nop
	}
	GPIO_ID(L_GPIOid_u8)->MODER = L_MODERVal_u32;
 8002560:	7ffb      	ldrb	r3, [r7, #31]
 8002562:	4a63      	ldr	r2, [pc, #396]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	461a      	mov	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6013      	str	r3, [r2, #0]
	/* Configure the output type of Pins
	 * either Push Pull can be configured by assigned OutputType with macro GPIO_Output_Type_Push_Pull
	 * or Open Drain can be configured by assigned OutputType with macro GPIO_Output_Type_Open_Drain
	 * */

	switch (Arg_conf_cpcGPIO_Cfg->OutputType){
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	88db      	ldrh	r3, [r3, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <GPIO_Config_v+0x130>
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00f      	beq.n	800259a <GPIO_Config_v+0x14e>
	case GPIO_OUTPUT_TYPE_OPEN_DRAIN:
		GPIO_ID(L_GPIOid_u8)->OTYPER |= 0xFFFF & L_PINsMask_u16;
		break;
	default :
		/*Error*/
		break;
 800257a:	e01b      	b.n	80025b4 <GPIO_Config_v+0x168>
		GPIO_ID(L_GPIOid_u8)->OTYPER &= ~(~0x00 & L_PINsMask_u16);
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	4a5c      	ldr	r2, [pc, #368]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	89fa      	ldrh	r2, [r7, #14]
 8002588:	43d2      	mvns	r2, r2
 800258a:	4610      	mov	r0, r2
 800258c:	7ffa      	ldrb	r2, [r7, #31]
 800258e:	4958      	ldr	r1, [pc, #352]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002590:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002594:	4003      	ands	r3, r0
 8002596:	6053      	str	r3, [r2, #4]
		break;
 8002598:	e00c      	b.n	80025b4 <GPIO_Config_v+0x168>
		GPIO_ID(L_GPIOid_u8)->OTYPER |= 0xFFFF & L_PINsMask_u16;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	4a54      	ldr	r2, [pc, #336]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	7ff9      	ldrb	r1, [r7, #31]
 80025a8:	4851      	ldr	r0, [pc, #324]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80025aa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
		break;
 80025b2:	bf00      	nop
	}
	/* Configure output speed (higher speed higher slew rate) of selected pins.
	 * Can have the following options
	 * GPIO_Output_Speed_Low ,GPIO_Output_Speed_Medium, GPIO_Output_Speed_Fast, or GPIO_Output_Speed_High
	 * */
	switch (Arg_conf_cpcGPIO_Cfg->OutputSpeed){
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	891b      	ldrh	r3, [r3, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d862      	bhi.n	8002682 <GPIO_Config_v+0x236>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <GPIO_Config_v+0x178>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025ef 	.word	0x080025ef
 80025cc:	0800262b 	.word	0x0800262b
 80025d0:	08002667 	.word	0x08002667
	case GPIO_OUTPUT_SPEED_LOW:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0x00u &L_PINsMask_u32);
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	4619      	mov	r1, r3
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	461a      	mov	r2, r3
 80025e8:	688b      	ldr	r3, [r1, #8]
 80025ea:	6093      	str	r3, [r2, #8]
		break;
 80025ec:	e04a      	b.n	8002684 <GPIO_Config_v+0x238>
	case GPIO_OUTPUT_SPEED_MEDIUM:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0x55555555u &L_PINsMask_u32);
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80025fe:	43db      	mvns	r3, r3
 8002600:	7ff9      	ldrb	r1, [r7, #31]
 8002602:	483b      	ldr	r0, [pc, #236]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002604:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002608:	4013      	ands	r3, r2
 800260a:	608b      	str	r3, [r1, #8]
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0x55555555u &L_PINsMask_u32);
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	4a38      	ldr	r2, [pc, #224]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800261c:	7ff9      	ldrb	r1, [r7, #31]
 800261e:	4834      	ldr	r0, [pc, #208]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002620:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
		break;
 8002628:	e02c      	b.n	8002684 <GPIO_Config_v+0x238>

	case GPIO_OUTPUT_SPEED_FAST:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER &= ~(0xAAAAAAAAu &L_PINsMask_u32);
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800263a:	43db      	mvns	r3, r3
 800263c:	7ff9      	ldrb	r1, [r7, #31]
 800263e:	482c      	ldr	r0, [pc, #176]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002640:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002644:	4013      	ands	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0xAAAAAAAAu &L_PINsMask_u32);
 8002648:	7ffb      	ldrb	r3, [r7, #31]
 800264a:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002658:	7ff9      	ldrb	r1, [r7, #31]
 800265a:	4825      	ldr	r0, [pc, #148]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800265c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
		break;
 8002664:	e00e      	b.n	8002684 <GPIO_Config_v+0x238>
	case GPIO_OUTPUT_SPEED_HIGH:
		GPIO_ID(L_GPIOid_u8)->OSPEEDER |= (0xFFFFFFFFu & L_PINsMask_u32);
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	7ffb      	ldrb	r3, [r7, #31]
 8002672:	491f      	ldr	r1, [pc, #124]	; (80026f0 <GPIO_Config_v+0x2a4>)
 8002674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002678:	4619      	mov	r1, r3
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
		break;
 8002680:	e000      	b.n	8002684 <GPIO_Config_v+0x238>
	default :
		/*Error*/
		break;
 8002682:	bf00      	nop

	/* Configure the type of pulled resistors of selected pins.
	 * Can have the following options
	 * GPIO_Resistor_No_Pull ,GPIO_Resistor_Pull_Up, or GPIO_Resistor_Pull_Down
	 * */
	switch (Arg_conf_cpcGPIO_Cfg->PullUpPullDownResistor){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	895b      	ldrh	r3, [r3, #10]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d033      	beq.n	80026f4 <GPIO_Config_v+0x2a8>
 800268c:	2b02      	cmp	r3, #2
 800268e:	dc4f      	bgt.n	8002730 <GPIO_Config_v+0x2e4>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <GPIO_Config_v+0x24e>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00d      	beq.n	80026b4 <GPIO_Config_v+0x268>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0xAAAAAAAAu &L_PINsMask_u32);
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0xAAAAAAAAu &L_PINsMask_u32);
		break;
	default :
		/*Error*/
		break;
 8002698:	e04a      	b.n	8002730 <GPIO_Config_v+0x2e4>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0x00 &L_PINsMask_u32);
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <GPIO_Config_v+0x2a4>)
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	4619      	mov	r1, r3
 80026a4:	7ffb      	ldrb	r3, [r7, #31]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68cb      	ldr	r3, [r1, #12]
 80026b0:	60d3      	str	r3, [r2, #12]
		break;
 80026b2:	e03e      	b.n	8002732 <GPIO_Config_v+0x2e6>
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0x55555555u &L_PINsMask_u32);
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80026c4:	43db      	mvns	r3, r3
 80026c6:	7ff9      	ldrb	r1, [r7, #31]
 80026c8:	4809      	ldr	r0, [pc, #36]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80026ca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80026ce:	4013      	ands	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0x55555555u &L_PINsMask_u32);
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80026e2:	7ff9      	ldrb	r1, [r7, #31]
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <GPIO_Config_v+0x2a4>)
 80026e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]
		break;
 80026ee:	e020      	b.n	8002732 <GPIO_Config_v+0x2e6>
 80026f0:	08004938 	.word	0x08004938
		GPIO_ID(L_GPIOid_u8)->PUPDR &= ~(0xAAAAAAAAu &L_PINsMask_u32);
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
 80026f6:	4a11      	ldr	r2, [pc, #68]	; (800273c <GPIO_Config_v+0x2f0>)
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002704:	43db      	mvns	r3, r3
 8002706:	7ff9      	ldrb	r1, [r7, #31]
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <GPIO_Config_v+0x2f0>)
 800270a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800270e:	4013      	ands	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
		GPIO_ID(L_GPIOid_u8)->PUPDR |= (0xAAAAAAAAu &L_PINsMask_u32);
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <GPIO_Config_v+0x2f0>)
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8002722:	7ff9      	ldrb	r1, [r7, #31]
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <GPIO_Config_v+0x2f0>)
 8002726:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
		break;
 800272e:	e000      	b.n	8002732 <GPIO_Config_v+0x2e6>
		break;
 8002730:	bf00      	nop
	}

}
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	08004938 	.word	0x08004938

08002740 <GPIO_MapGPIOPIN_v>:

}



void GPIO_MapGPIOPIN_v(GPIO_Cfg const * const Arg_conf_cpcGPIO_Cfg, const u8 Arg_PIN_Cu8, const u8 Arg_Peripheral_Cu8){
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
 800274c:	4613      	mov	r3, r2
 800274e:	70bb      	strb	r3, [r7, #2]

	/*Read input id from user.*/
	u8 L_GPIOid_u8 = Arg_conf_cpcGPIO_Cfg->InstanceId;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	73fb      	strb	r3, [r7, #15]
	/*
	 * GPIOA will have index 0 in L_GPIOid_u8 array
	 * So the following process check for the boundary of input value
	 * If input id exceeds the boundary an error will be issued.
	 * */
	if (('A' <= Arg_conf_cpcGPIO_Cfg->InstanceId ) && (Arg_conf_cpcGPIO_Cfg->InstanceId <= 'Z')){
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d907      	bls.n	800276e <GPIO_MapGPIOPIN_v+0x2e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b5a      	cmp	r3, #90	; 0x5a
 8002764:	d803      	bhi.n	800276e <GPIO_MapGPIOPIN_v+0x2e>
		L_GPIOid_u8 -= 'A';
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3b41      	subs	r3, #65	; 0x41
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e00a      	b.n	8002784 <GPIO_MapGPIOPIN_v+0x44>
	}
	else if (('a' <= Arg_conf_cpcGPIO_Cfg->InstanceId ) && (Arg_conf_cpcGPIO_Cfg->InstanceId <= 'z')){
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b60      	cmp	r3, #96	; 0x60
 8002774:	d906      	bls.n	8002784 <GPIO_MapGPIOPIN_v+0x44>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b7a      	cmp	r3, #122	; 0x7a
 800277c:	d802      	bhi.n	8002784 <GPIO_MapGPIOPIN_v+0x44>
		L_GPIOid_u8 -= 'a';
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3b61      	subs	r3, #97	; 0x61
 8002782:	73fb      	strb	r3, [r7, #15]

	/*
	 * To reduce the headache on user of enabling clock of the used peripheral.
	 * It 's automatically enabled before configuring the peripheral.
	 * */
	RCC_EnableClock_v(
 8002784:	7bfb      	ldrb	r3, [r7, #15]
			RCC_GetPeripheralBus_u8((u32)GPIO_ID(L_GPIOid_u8)),
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <GPIO_MapGPIOPIN_v+0xc4>)
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 800278c:	4618      	mov	r0, r3
 800278e:	f001 f91f 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8002792:	4603      	mov	r3, r0
 8002794:	461c      	mov	r4, r3
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f965 	bl	8003a6c <RCC_GetRCCGPIOBit_u8>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f001 f854 	bl	8003854 <RCC_EnableClock_v>
			RCC_GetRCCGPIOBit_u8(L_GPIOid_u8+1));

	if (Arg_PIN_Cu8 <= 7){
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	2b07      	cmp	r3, #7
 80027b0:	d811      	bhi.n	80027d6 <GPIO_MapGPIOPIN_v+0x96>
		GPIO_ID(L_GPIOid_u8)->AFRL |= (Arg_Peripheral_Cu8<<(4*Arg_PIN_Cu8)) ;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <GPIO_MapGPIOPIN_v+0xc4>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	78b9      	ldrb	r1, [r7, #2]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4610      	mov	r0, r2
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	490e      	ldr	r1, [pc, #56]	; (8002804 <GPIO_MapGPIOPIN_v+0xc4>)
 80027cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027d0:	4303      	orrs	r3, r0
 80027d2:	6213      	str	r3, [r2, #32]
	}
	else{
		GPIO_ID(L_GPIOid_u8)->AFRH |= (Arg_Peripheral_Cu8<<(4*(Arg_PIN_Cu8%8))) ;
	}
}
 80027d4:	e012      	b.n	80027fc <GPIO_MapGPIOPIN_v+0xbc>
		GPIO_ID(L_GPIOid_u8)->AFRH |= (Arg_Peripheral_Cu8<<(4*(Arg_PIN_Cu8%8))) ;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <GPIO_MapGPIOPIN_v+0xc4>)
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	78b9      	ldrb	r1, [r7, #2]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	f002 0207 	and.w	r2, r2, #7
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4610      	mov	r0, r2
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <GPIO_MapGPIOPIN_v+0xc4>)
 80027f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027f8:	4303      	orrs	r3, r0
 80027fa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	08004938 	.word	0x08004938

08002808 <InterruptHandler_Init_v>:
 * */
static void (*GS_DMA_CallBacks_pF[DMA_INSTANCES_MAX_NUMs][DMA_INTERRUPT_STREAMS][DMA_INTERRUPT_FLAG_NUMs])(void);

static void (*GS_USART_CallBacks_pF[USART_INSTANCES_MAX_NUMs][USART_INTERRUPTS_TYPES_NUMs])(void);

void InterruptHandler_Init_v(void){
 8002808:	b490      	push	{r4, r7}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	/*Init EXTI Interrupts*/
	for (u8 L_GPIO_u8 = 0;L_GPIO_u8<8;L_GPIO_u8++){
 800280e:	2300      	movs	r3, #0
 8002810:	71fb      	strb	r3, [r7, #7]
 8002812:	e013      	b.n	800283c <InterruptHandler_Init_v+0x34>
		for (u8 L_PIN_u8 = 0;L_PIN_u8<16;L_PIN_u8++){
 8002814:	2300      	movs	r3, #0
 8002816:	71bb      	strb	r3, [r7, #6]
 8002818:	e00a      	b.n	8002830 <InterruptHandler_Init_v+0x28>
			GS_EXTI_CallBacks_pF[L_GPIO_u8][L_PIN_u8] = NULL;
 800281a:	79fa      	ldrb	r2, [r7, #7]
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	4930      	ldr	r1, [pc, #192]	; (80028e0 <InterruptHandler_Init_v+0xd8>)
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	4413      	add	r3, r2
 8002824:	2200      	movs	r2, #0
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (u8 L_PIN_u8 = 0;L_PIN_u8<16;L_PIN_u8++){
 800282a:	79bb      	ldrb	r3, [r7, #6]
 800282c:	3301      	adds	r3, #1
 800282e:	71bb      	strb	r3, [r7, #6]
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	d9f1      	bls.n	800281a <InterruptHandler_Init_v+0x12>
	for (u8 L_GPIO_u8 = 0;L_GPIO_u8<8;L_GPIO_u8++){
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	3301      	adds	r3, #1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	2b07      	cmp	r3, #7
 8002840:	d9e8      	bls.n	8002814 <InterruptHandler_Init_v+0xc>
		}
	}

	/*DMA*/
	for (u8 L_DMAInstanceId_u8 = 0; L_DMAInstanceId_u8<DMA_INSTANCES_MAX_NUMs; L_DMAInstanceId_u8++){
 8002842:	2300      	movs	r3, #0
 8002844:	717b      	strb	r3, [r7, #5]
 8002846:	e025      	b.n	8002894 <InterruptHandler_Init_v+0x8c>
		for (u8 L_DMAStreamId_u8 = 0; L_DMAStreamId_u8<=DMA_INTERRUPT_STREAMS; L_DMAStreamId_u8++){
 8002848:	2300      	movs	r3, #0
 800284a:	713b      	strb	r3, [r7, #4]
 800284c:	e01c      	b.n	8002888 <InterruptHandler_Init_v+0x80>
			for (u8 L_DMAInterruptFlags_u8 = 0; L_DMAInterruptFlags_u8<DMA_INTERRUPT_FLAG_NUMs; L_DMAInterruptFlags_u8++){
 800284e:	2300      	movs	r3, #0
 8002850:	70fb      	strb	r3, [r7, #3]
 8002852:	e013      	b.n	800287c <InterruptHandler_Init_v+0x74>

				GS_DMA_CallBacks_pF[L_DMAInstanceId_u8][L_DMAStreamId_u8][L_DMAInterruptFlags_u8] = NULL;
 8002854:	7979      	ldrb	r1, [r7, #5]
 8002856:	793b      	ldrb	r3, [r7, #4]
 8002858:	78f8      	ldrb	r0, [r7, #3]
 800285a:	4c22      	ldr	r4, [pc, #136]	; (80028e4 <InterruptHandler_Init_v+0xdc>)
 800285c:	461a      	mov	r2, r3
 800285e:	00d2      	lsls	r2, r2, #3
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	460b      	mov	r3, r1
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	00d9      	lsls	r1, r3, #3
 800286a:	1ac9      	subs	r1, r1, r3
 800286c:	1853      	adds	r3, r2, r1
 800286e:	4403      	add	r3, r0
 8002870:	2200      	movs	r2, #0
 8002872:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for (u8 L_DMAInterruptFlags_u8 = 0; L_DMAInterruptFlags_u8<DMA_INTERRUPT_FLAG_NUMs; L_DMAInterruptFlags_u8++){
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	3301      	adds	r3, #1
 800287a:	70fb      	strb	r3, [r7, #3]
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d9e8      	bls.n	8002854 <InterruptHandler_Init_v+0x4c>
		for (u8 L_DMAStreamId_u8 = 0; L_DMAStreamId_u8<=DMA_INTERRUPT_STREAMS; L_DMAStreamId_u8++){
 8002882:	793b      	ldrb	r3, [r7, #4]
 8002884:	3301      	adds	r3, #1
 8002886:	713b      	strb	r3, [r7, #4]
 8002888:	793b      	ldrb	r3, [r7, #4]
 800288a:	2b07      	cmp	r3, #7
 800288c:	d9df      	bls.n	800284e <InterruptHandler_Init_v+0x46>
	for (u8 L_DMAInstanceId_u8 = 0; L_DMAInstanceId_u8<DMA_INSTANCES_MAX_NUMs; L_DMAInstanceId_u8++){
 800288e:	797b      	ldrb	r3, [r7, #5]
 8002890:	3301      	adds	r3, #1
 8002892:	717b      	strb	r3, [r7, #5]
 8002894:	797b      	ldrb	r3, [r7, #5]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d9d6      	bls.n	8002848 <InterruptHandler_Init_v+0x40>
			}
		}
	}

	/*USART*/
	for (u8 L_USARTInstanceId_u8 = 0; L_USARTInstanceId_u8<USART_INSTANCES_MAX_NUMs; L_USARTInstanceId_u8++){
 800289a:	2300      	movs	r3, #0
 800289c:	70bb      	strb	r3, [r7, #2]
 800289e:	e016      	b.n	80028ce <InterruptHandler_Init_v+0xc6>
		for (u8 L_USARTInterruptType_u8 = 0; L_USARTInterruptType_u8<USART_INTERRUPTS_TYPES_NUMs; L_USARTInterruptType_u8++){
 80028a0:	2300      	movs	r3, #0
 80028a2:	707b      	strb	r3, [r7, #1]
 80028a4:	e00d      	b.n	80028c2 <InterruptHandler_Init_v+0xba>
			GS_USART_CallBacks_pF[L_USARTInstanceId_u8][L_USARTInterruptType_u8] = NULL;
 80028a6:	78ba      	ldrb	r2, [r7, #2]
 80028a8:	7879      	ldrb	r1, [r7, #1]
 80028aa:	480f      	ldr	r0, [pc, #60]	; (80028e8 <InterruptHandler_Init_v+0xe0>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (u8 L_USARTInterruptType_u8 = 0; L_USARTInterruptType_u8<USART_INTERRUPTS_TYPES_NUMs; L_USARTInterruptType_u8++){
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	3301      	adds	r3, #1
 80028c0:	707b      	strb	r3, [r7, #1]
 80028c2:	787b      	ldrb	r3, [r7, #1]
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d9ee      	bls.n	80028a6 <InterruptHandler_Init_v+0x9e>
	for (u8 L_USARTInstanceId_u8 = 0; L_USARTInstanceId_u8<USART_INSTANCES_MAX_NUMs; L_USARTInstanceId_u8++){
 80028c8:	78bb      	ldrb	r3, [r7, #2]
 80028ca:	3301      	adds	r3, #1
 80028cc:	70bb      	strb	r3, [r7, #2]
 80028ce:	78bb      	ldrb	r3, [r7, #2]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d9e5      	bls.n	80028a0 <InterruptHandler_Init_v+0x98>
		}
	}

}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc90      	pop	{r4, r7}
 80028de:	4770      	bx	lr
 80028e0:	20000034 	.word	0x20000034
 80028e4:	20000234 	.word	0x20000234
 80028e8:	200003bc 	.word	0x200003bc

080028ec <InterruptHandler_SetDMACallback_v>:

	GS_EXTI_CallBacks_pF[L_GPIOInstanceId_u8][Arg_PinNumber_u8] = Arg_FunctionCallback_v;
}


void InterruptHandler_SetDMACallback_v(u8 Arg_DMAInstanceId_u8, u8 Arg_StreamNumber_u8,u8 Arg_InterruptFagNum_u8, void (*Arg_FunctionCallback_v)(void) ){
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	460b      	mov	r3, r1
 80028fa:	71bb      	strb	r3, [r7, #6]
 80028fc:	4613      	mov	r3, r2
 80028fe:	717b      	strb	r3, [r7, #5]
	for (u32 L_i_u32 = 0; L_i_u32<32 ;L_i_u32++){
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e01c      	b.n	8002940 <InterruptHandler_SetDMACallback_v+0x54>
		if (STD_TRUE == GET_BIT(Arg_InterruptFagNum_u8, L_i_u32)){
 8002906:	797a      	ldrb	r2, [r7, #5]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	fa42 f303 	asr.w	r3, r2, r3
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <InterruptHandler_SetDMACallback_v+0x4e>
			GS_DMA_CallBacks_pF[Arg_DMAInstanceId_u8-1][Arg_StreamNumber_u8][L_i_u32] = Arg_FunctionCallback_v;
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	1e59      	subs	r1, r3, #1
 800291a:	79bb      	ldrb	r3, [r7, #6]
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <InterruptHandler_SetDMACallback_v+0x68>)
 800291e:	461a      	mov	r2, r3
 8002920:	00d2      	lsls	r2, r2, #3
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	460b      	mov	r3, r1
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a5b      	subs	r3, r3, r1
 800292a:	00d9      	lsls	r1, r3, #3
 800292c:	1ac9      	subs	r1, r1, r3
 800292e:	440a      	add	r2, r1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (u32 L_i_u32 = 0; L_i_u32<32 ;L_i_u32++){
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b1f      	cmp	r3, #31
 8002944:	d9df      	bls.n	8002906 <InterruptHandler_SetDMACallback_v+0x1a>
		}
	}

}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	20000234 	.word	0x20000234

08002958 <NMI_Handler>:





void NMI_Handler(void){
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HardFault_Handler>:
void HardFault_Handler(void){
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <MemManage_Handler>:
void MemManage_Handler(void){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <BusFault_Handler>:
void BusFault_Handler(void){
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <UsageFault_Handler>:
void UsageFault_Handler(void){
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <SVC_Handler>:
#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)
void SVC_Handler(void){
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
#if CONFIG_USE_SVC_INTERUPT	== 1
	if (InterruptHandler_SVCCallback_void != NULL){
		InterruptHandler_SVCCallback_void();
	}
#endif
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:
#endif
void DebugMon_Handler(void){
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <PendSV_Handler>:

#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)
void PendSV_Handler(void){
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <WWDG_IRQHandler>:
#endif

void WWDG_IRQHandler(void){
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	/* Window Watchdog interrupt*/

}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <PVD_IRQHandler>:
void PVD_IRQHandler(void){
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
	/* PVD through EXTI line detection interrupt*/

}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TAMP_STAMP_IRQHandler>:
void TAMP_STAMP_IRQHandler(void){
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
	/* Tamper and TimeStamp interrupts through the EXTI line*/

}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void){
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
	/* RTC Wakeup interrupt through the EXTI line*/

}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <RCC_IRQHandler>:
void RCC_IRQHandler(void){
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
	/* RCC global interrupt*/

}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler (void){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
	/* EXTI Line0 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	e026      	b.n	8002a6a <EXTI0_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fcd8 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d11c      	bne.n	8002a64 <EXTI0_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(0)][L_i_u8]){
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f001 f87c 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4911      	ldr	r1, [pc, #68]	; (8002a7c <EXTI0_IRQHandler+0x6c>)
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00f      	beq.n	8002a64 <EXTI0_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(0)][L_i_u8]();
 8002a44:	2000      	movs	r0, #0
 8002a46:	f001 f86f 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	490a      	ldr	r1, [pc, #40]	; (8002a7c <EXTI0_IRQHandler+0x6c>)
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	4413      	add	r3, r2
 8002a56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a5a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fcd2 	bl	8002408 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3301      	adds	r3, #1
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d9d5      	bls.n	8002a1c <EXTI0_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000034 	.word	0x20000034

08002a80 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
	/* EXTI Line1 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	71fb      	strb	r3, [r7, #7]
 8002a8a:	e026      	b.n	8002ada <EXTI1_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fca0 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d11c      	bne.n	8002ad4 <EXTI1_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(1)][L_i_u8]){
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f001 f844 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	4911      	ldr	r1, [pc, #68]	; (8002aec <EXTI1_IRQHandler+0x6c>)
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	4413      	add	r3, r2
 8002aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00f      	beq.n	8002ad4 <EXTI1_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(1)][L_i_u8]();
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f001 f837 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	490a      	ldr	r1, [pc, #40]	; (8002aec <EXTI1_IRQHandler+0x6c>)
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aca:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc9a 	bl	8002408 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d9d5      	bls.n	8002a8c <EXTI1_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000034 	.word	0x20000034

08002af0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
	/* EXTI Line2 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	e026      	b.n	8002b4a <EXTI2_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fc68 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d11c      	bne.n	8002b44 <EXTI2_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(2)][L_i_u8]){
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f001 f80c 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4911      	ldr	r1, [pc, #68]	; (8002b5c <EXTI2_IRQHandler+0x6c>)
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00f      	beq.n	8002b44 <EXTI2_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(2)][L_i_u8]();
 8002b24:	2002      	movs	r0, #2
 8002b26:	f000 ffff 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	490a      	ldr	r1, [pc, #40]	; (8002b5c <EXTI2_IRQHandler+0x6c>)
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b3a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fc62 	bl	8002408 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	3301      	adds	r3, #1
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d9d5      	bls.n	8002afc <EXTI2_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000034 	.word	0x20000034

08002b60 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
	/* EXTI Line3 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002b66:	2300      	movs	r3, #0
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	e026      	b.n	8002bba <EXTI3_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fc30 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d11c      	bne.n	8002bb4 <EXTI3_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(3)][L_i_u8]){
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	f000 ffd4 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4911      	ldr	r1, [pc, #68]	; (8002bcc <EXTI3_IRQHandler+0x6c>)
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00f      	beq.n	8002bb4 <EXTI3_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(3)][L_i_u8]();
 8002b94:	2003      	movs	r0, #3
 8002b96:	f000 ffc7 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	490a      	ldr	r1, [pc, #40]	; (8002bcc <EXTI3_IRQHandler+0x6c>)
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002baa:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fc2a 	bl	8002408 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d9d5      	bls.n	8002b6c <EXTI3_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000034 	.word	0x20000034

08002bd0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
	/* EXTI Line4 interrupt*/
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e026      	b.n	8002c2a <EXTI4_IRQHandler+0x5a>
		if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fbf8 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d11c      	bne.n	8002c24 <EXTI4_IRQHandler+0x54>
			if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(4)][L_i_u8]){
 8002bea:	2004      	movs	r0, #4
 8002bec:	f000 ff9c 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4911      	ldr	r1, [pc, #68]	; (8002c3c <EXTI4_IRQHandler+0x6c>)
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00f      	beq.n	8002c24 <EXTI4_IRQHandler+0x54>
				GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(4)][L_i_u8]();
 8002c04:	2004      	movs	r0, #4
 8002c06:	f000 ff8f 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	490a      	ldr	r1, [pc, #40]	; (8002c3c <EXTI4_IRQHandler+0x6c>)
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c1a:	4798      	blx	r3
				EXTI_ClearInterrupt_v(L_i_u8);
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fbf2 	bl	8002408 <EXTI_ClearInterrupt_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	3301      	adds	r3, #1
 8002c28:	71fb      	strb	r3, [r7, #7]
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d9d5      	bls.n	8002bdc <EXTI4_IRQHandler+0xc>
		}
		else{

		}
	}
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000034 	.word	0x20000034

08002c40 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler(void){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
	/* DMA1 Stream0 global interrupt*/
	DMA_HANDLER(1, 0);
 8002c46:	2300      	movs	r3, #0
 8002c48:	71fb      	strb	r3, [r7, #7]
 8002c4a:	e01b      	b.n	8002c84 <DMA1_Stream0_IRQHandler+0x44>
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d014      	beq.n	8002c7c <DMA1_Stream0_IRQHandler+0x3c>
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	461a      	mov	r2, r3
 8002c56:	2100      	movs	r1, #0
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff fb2d 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10c      	bne.n	8002c7e <DMA1_Stream0_IRQHandler+0x3e>
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <DMA1_Stream0_IRQHandler+0x54>)
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <DMA1_Stream0_IRQHandler+0x3e>
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <DMA1_Stream0_IRQHandler+0x54>)
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	4798      	blx	r3
 8002c7a:	e000      	b.n	8002c7e <DMA1_Stream0_IRQHandler+0x3e>
 8002c7c:	bf00      	nop
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	3301      	adds	r3, #1
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d9e0      	bls.n	8002c4c <DMA1_Stream0_IRQHandler+0xc>
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000234 	.word	0x20000234

08002c98 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
	/* DMA1 Stream1 global interrupt*/
	DMA_HANDLER(1, 1);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	71fb      	strb	r3, [r7, #7]
 8002ca2:	e01d      	b.n	8002ce0 <DMA1_Stream1_IRQHandler+0x48>
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d016      	beq.n	8002cd8 <DMA1_Stream1_IRQHandler+0x40>
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	461a      	mov	r2, r3
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff fb01 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10e      	bne.n	8002cda <DMA1_Stream1_IRQHandler+0x42>
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <DMA1_Stream1_IRQHandler+0x58>)
 8002cc0:	3307      	adds	r3, #7
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <DMA1_Stream1_IRQHandler+0x42>
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <DMA1_Stream1_IRQHandler+0x58>)
 8002cce:	3307      	adds	r3, #7
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	4798      	blx	r3
 8002cd6:	e000      	b.n	8002cda <DMA1_Stream1_IRQHandler+0x42>
 8002cd8:	bf00      	nop
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d9de      	bls.n	8002ca4 <DMA1_Stream1_IRQHandler+0xc>
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000234 	.word	0x20000234

08002cf4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
	/* DMA1 Stream2 global interrupt*/
	DMA_HANDLER(1, 2);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	e01d      	b.n	8002d3c <DMA1_Stream2_IRQHandler+0x48>
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d016      	beq.n	8002d34 <DMA1_Stream2_IRQHandler+0x40>
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7ff fad3 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10e      	bne.n	8002d36 <DMA1_Stream2_IRQHandler+0x42>
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <DMA1_Stream2_IRQHandler+0x58>)
 8002d1c:	330e      	adds	r3, #14
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <DMA1_Stream2_IRQHandler+0x42>
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <DMA1_Stream2_IRQHandler+0x58>)
 8002d2a:	330e      	adds	r3, #14
 8002d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d30:	4798      	blx	r3
 8002d32:	e000      	b.n	8002d36 <DMA1_Stream2_IRQHandler+0x42>
 8002d34:	bf00      	nop
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d9de      	bls.n	8002d00 <DMA1_Stream2_IRQHandler+0xc>
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000234 	.word	0x20000234

08002d50 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
	/* DMA1 Stream3 global interrupt*/
	DMA_HANDLER(1, 3);
 8002d56:	2300      	movs	r3, #0
 8002d58:	71fb      	strb	r3, [r7, #7]
 8002d5a:	e01d      	b.n	8002d98 <DMA1_Stream3_IRQHandler+0x48>
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d016      	beq.n	8002d90 <DMA1_Stream3_IRQHandler+0x40>
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	461a      	mov	r2, r3
 8002d66:	2103      	movs	r1, #3
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff faa5 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10e      	bne.n	8002d92 <DMA1_Stream3_IRQHandler+0x42>
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <DMA1_Stream3_IRQHandler+0x58>)
 8002d78:	3315      	adds	r3, #21
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <DMA1_Stream3_IRQHandler+0x42>
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <DMA1_Stream3_IRQHandler+0x58>)
 8002d86:	3315      	adds	r3, #21
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	4798      	blx	r3
 8002d8e:	e000      	b.n	8002d92 <DMA1_Stream3_IRQHandler+0x42>
 8002d90:	bf00      	nop
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	3301      	adds	r3, #1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d9de      	bls.n	8002d5c <DMA1_Stream3_IRQHandler+0xc>
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000234 	.word	0x20000234

08002dac <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
	/* DMA1 Stream4 global interrupt*/
	DMA_HANDLER(1, 4);
 8002db2:	2300      	movs	r3, #0
 8002db4:	71fb      	strb	r3, [r7, #7]
 8002db6:	e01d      	b.n	8002df4 <DMA1_Stream4_IRQHandler+0x48>
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d016      	beq.n	8002dec <DMA1_Stream4_IRQHandler+0x40>
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f7ff fa77 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10e      	bne.n	8002dee <DMA1_Stream4_IRQHandler+0x42>
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <DMA1_Stream4_IRQHandler+0x58>)
 8002dd4:	331c      	adds	r3, #28
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <DMA1_Stream4_IRQHandler+0x42>
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <DMA1_Stream4_IRQHandler+0x58>)
 8002de2:	331c      	adds	r3, #28
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	4798      	blx	r3
 8002dea:	e000      	b.n	8002dee <DMA1_Stream4_IRQHandler+0x42>
 8002dec:	bf00      	nop
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	3301      	adds	r3, #1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d9de      	bls.n	8002db8 <DMA1_Stream4_IRQHandler+0xc>
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000234 	.word	0x20000234

08002e08 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
	/* DMA1 Stream5 global interrupt*/
	DMA_HANDLER(1, 5);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	e01d      	b.n	8002e50 <DMA1_Stream5_IRQHandler+0x48>
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d016      	beq.n	8002e48 <DMA1_Stream5_IRQHandler+0x40>
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2105      	movs	r1, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7ff fa49 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10e      	bne.n	8002e4a <DMA1_Stream5_IRQHandler+0x42>
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <DMA1_Stream5_IRQHandler+0x58>)
 8002e30:	3323      	adds	r3, #35	; 0x23
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <DMA1_Stream5_IRQHandler+0x42>
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <DMA1_Stream5_IRQHandler+0x58>)
 8002e3e:	3323      	adds	r3, #35	; 0x23
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	4798      	blx	r3
 8002e46:	e000      	b.n	8002e4a <DMA1_Stream5_IRQHandler+0x42>
 8002e48:	bf00      	nop
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d9de      	bls.n	8002e14 <DMA1_Stream5_IRQHandler+0xc>
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000234 	.word	0x20000234

08002e64 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
	/* DMA1 Stream6 global interrupt*/
	DMA_HANDLER(1, 6);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	71fb      	strb	r3, [r7, #7]
 8002e6e:	e01d      	b.n	8002eac <DMA1_Stream6_IRQHandler+0x48>
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d016      	beq.n	8002ea4 <DMA1_Stream6_IRQHandler+0x40>
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2106      	movs	r1, #6
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff fa1b 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10e      	bne.n	8002ea6 <DMA1_Stream6_IRQHandler+0x42>
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <DMA1_Stream6_IRQHandler+0x58>)
 8002e8c:	332a      	adds	r3, #42	; 0x2a
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <DMA1_Stream6_IRQHandler+0x42>
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <DMA1_Stream6_IRQHandler+0x58>)
 8002e9a:	332a      	adds	r3, #42	; 0x2a
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	4798      	blx	r3
 8002ea2:	e000      	b.n	8002ea6 <DMA1_Stream6_IRQHandler+0x42>
 8002ea4:	bf00      	nop
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	71fb      	strb	r3, [r7, #7]
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d9de      	bls.n	8002e70 <DMA1_Stream6_IRQHandler+0xc>
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000234 	.word	0x20000234

08002ec0 <ADC_IRQHandler>:
void ADC_IRQHandler(void){
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	/* ADC3 global interrupts*/
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
	/* CAN1 TX interrupts*/

}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void){
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
	/* CAN1 RX0 interrupts*/


}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
	/* CAN1 RX1 interrupts*/
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	/* CAN1 SCE interrupt*/

}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
	/* EXTI Line[9:5] interrupts*/

	for (u8 L_EXTILine_u8 = 5;L_EXTILine_u8<=9;L_EXTILine_u8++){
 8002f0e:	2305      	movs	r3, #5
 8002f10:	71fb      	strb	r3, [r7, #7]
 8002f12:	e031      	b.n	8002f78 <EXTI9_5_IRQHandler+0x70>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002f14:	2300      	movs	r3, #0
 8002f16:	71bb      	strb	r3, [r7, #6]
 8002f18:	e028      	b.n	8002f6c <EXTI9_5_IRQHandler+0x64>
			if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 8002f1a:	79bb      	ldrb	r3, [r7, #6]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fa59 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d11e      	bne.n	8002f66 <EXTI9_5_IRQHandler+0x5e>
				if (NULL != GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8)][L_i_u8]){
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fdfc 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	79bb      	ldrb	r3, [r7, #6]
 8002f36:	4914      	ldr	r1, [pc, #80]	; (8002f88 <EXTI9_5_IRQHandler+0x80>)
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <EXTI9_5_IRQHandler+0x5e>
					GS_EXTI_CallBacks_pF[SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8)][L_i_u8]();
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fdee 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79bb      	ldrb	r3, [r7, #6]
 8002f52:	490d      	ldr	r1, [pc, #52]	; (8002f88 <EXTI9_5_IRQHandler+0x80>)
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	4413      	add	r3, r2
 8002f58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f5c:	4798      	blx	r3
					EXTI_ClearInterrupt_v(L_i_u8);
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fa51 	bl	8002408 <EXTI_ClearInterrupt_v>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	71bb      	strb	r3, [r7, #6]
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d9d3      	bls.n	8002f1a <EXTI9_5_IRQHandler+0x12>
	for (u8 L_EXTILine_u8 = 5;L_EXTILine_u8<=9;L_EXTILine_u8++){
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	3301      	adds	r3, #1
 8002f76:	71fb      	strb	r3, [r7, #7]
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d9ca      	bls.n	8002f14 <EXTI9_5_IRQHandler+0xc>
		}
	}



}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000034 	.word	0x20000034

08002f8c <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
	/* TIM1 Break interrupt and TIM9 global interrupt*/
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void){
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
	/* TIM1 Update interrupt and TIM10 global interrupt*/
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
	/* TIM1 Trigger and Commutation interrupts and TIM11 global interrupt */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void){
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
/* TIM1 Capture Compare interrupt*/}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void){
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
	/* TIM2 global interrupt*/
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
	/* TIM3 global interrupt*/
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void){
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
	/* TIM4 global interrupt*/
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void){
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
	/* I2C1 event interrupt*/
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
	/* I2C1 error interrupt*/
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void){
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
	/* I2C2 event interrupt*/
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler (void){
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	/* I2C2 error interrupt*/
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void){
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
		InterruptHandler_SPI1ErrorUnderrunCallback_void();
	}

#endif

}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void){
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
		InterruptHandler_SPI2ErrorUnderrunCallback_void();
	}

#endif

}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
	/* USART1 global interrupt*/
	USART_HANDLER(1);
 800304a:	2300      	movs	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	e015      	b.n	800307c <USART1_IRQHandler+0x38>
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	4619      	mov	r1, r3
 8003054:	2001      	movs	r0, #1
 8003056:	f001 f8d5 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10a      	bne.n	8003076 <USART1_IRQHandler+0x32>
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <USART1_IRQHandler+0x48>)
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <USART1_IRQHandler+0x32>
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <USART1_IRQHandler+0x48>)
 8003070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003074:	4798      	blx	r3
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	3301      	adds	r3, #1
 800307a:	71fb      	strb	r3, [r7, #7]
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b09      	cmp	r3, #9
 8003080:	d9e6      	bls.n	8003050 <USART1_IRQHandler+0xc>
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200003bc 	.word	0x200003bc

08003090 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
	/* USART2 global interrupt*/
	USART_HANDLER(2);
 8003096:	2300      	movs	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]
 800309a:	e017      	b.n	80030cc <USART2_IRQHandler+0x3c>
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4619      	mov	r1, r3
 80030a0:	2002      	movs	r0, #2
 80030a2:	f001 f8af 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10c      	bne.n	80030c6 <USART2_IRQHandler+0x36>
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <USART2_IRQHandler+0x4c>)
 80030b0:	330a      	adds	r3, #10
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <USART2_IRQHandler+0x36>
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4a07      	ldr	r2, [pc, #28]	; (80030dc <USART2_IRQHandler+0x4c>)
 80030be:	330a      	adds	r3, #10
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	4798      	blx	r3
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	3301      	adds	r3, #1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b09      	cmp	r3, #9
 80030d0:	d9e4      	bls.n	800309c <USART2_IRQHandler+0xc>
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200003bc 	.word	0x200003bc

080030e0 <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
	/* USART3 global interrupt*/
	USART_HANDLER(3);
 80030e6:	2300      	movs	r3, #0
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	e017      	b.n	800311c <USART3_IRQHandler+0x3c>
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	4619      	mov	r1, r3
 80030f0:	2003      	movs	r0, #3
 80030f2:	f001 f887 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10c      	bne.n	8003116 <USART3_IRQHandler+0x36>
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	4a0b      	ldr	r2, [pc, #44]	; (800312c <USART3_IRQHandler+0x4c>)
 8003100:	3314      	adds	r3, #20
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <USART3_IRQHandler+0x36>
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <USART3_IRQHandler+0x4c>)
 800310e:	3314      	adds	r3, #20
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	4798      	blx	r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	3301      	adds	r3, #1
 800311a:	71fb      	strb	r3, [r7, #7]
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b09      	cmp	r3, #9
 8003120:	d9e4      	bls.n	80030ec <USART3_IRQHandler+0xc>
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200003bc 	.word	0x200003bc

08003130 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
	/* EXTI Line[15:10] interrupts*/

	for (u8 L_EXTILine_u8 = 10;L_EXTILine_u8<=15;L_EXTILine_u8++){
 8003136:	230a      	movs	r3, #10
 8003138:	71fb      	strb	r3, [r7, #7]
 800313a:	e02d      	b.n	8003198 <EXTI15_10_IRQHandler+0x68>

		u8 L_ActiveGPIO_u8 = SYSCFG_GetActiveGPIO_u8(L_EXTILine_u8);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fcf2 	bl	8003b28 <SYSCFG_GetActiveGPIO_u8>
 8003144:	4603      	mov	r3, r0
 8003146:	717b      	strb	r3, [r7, #5]

		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8003148:	2300      	movs	r3, #0
 800314a:	71bb      	strb	r3, [r7, #6]
 800314c:	e01e      	b.n	800318c <EXTI15_10_IRQHandler+0x5c>
			if (STD_TRUE == EXTI_CheckInterrupt_Bool(L_i_u8)){
 800314e:	79bb      	ldrb	r3, [r7, #6]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f93f 	bl	80023d4 <EXTI_CheckInterrupt_Bool>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d114      	bne.n	8003186 <EXTI15_10_IRQHandler+0x56>
				if (NULL != GS_EXTI_CallBacks_pF[L_ActiveGPIO_u8][L_i_u8]){
 800315c:	797a      	ldrb	r2, [r7, #5]
 800315e:	79bb      	ldrb	r3, [r7, #6]
 8003160:	4911      	ldr	r1, [pc, #68]	; (80031a8 <EXTI15_10_IRQHandler+0x78>)
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	4413      	add	r3, r2
 8003166:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <EXTI15_10_IRQHandler+0x56>

					GS_EXTI_CallBacks_pF[L_ActiveGPIO_u8][L_i_u8]();
 800316e:	797a      	ldrb	r2, [r7, #5]
 8003170:	79bb      	ldrb	r3, [r7, #6]
 8003172:	490d      	ldr	r1, [pc, #52]	; (80031a8 <EXTI15_10_IRQHandler+0x78>)
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	4413      	add	r3, r2
 8003178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800317c:	4798      	blx	r3
					EXTI_ClearInterrupt_v(L_i_u8);
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f941 	bl	8002408 <EXTI_ClearInterrupt_v>
		for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	3301      	adds	r3, #1
 800318a:	71bb      	strb	r3, [r7, #6]
 800318c:	79bb      	ldrb	r3, [r7, #6]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d9dd      	bls.n	800314e <EXTI15_10_IRQHandler+0x1e>
	for (u8 L_EXTILine_u8 = 10;L_EXTILine_u8<=15;L_EXTILine_u8++){
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	3301      	adds	r3, #1
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	d9ce      	bls.n	800313c <EXTI15_10_IRQHandler+0xc>

			}
		}
	}

}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000034 	.word	0x20000034

080031ac <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void){
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
	/* RTC Alarms (A and B) through EXTI line interrupt*/
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <OTG_FS_WKUP_IRQHandler>:
void OTG_FS_WKUP_IRQHandler(void){
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
	/* USB On-The-Go FS Wakeup through EXTI line interrupt*/
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void){
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	/* TIM8 Break interrupt and TIM12 global interrupt*/
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void){
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
	/* TIM8 Update interrupt and TIM13 global interrupt*/
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
	/* TIM8 Trigger and Commutation interrupts and TIM14 global interrupt*/
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void){
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
	/* TIM8 Capture Compare interrupt*/
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
	/* DMA1 Stream7 global interrupt*/
	DMA_HANDLER(1, 7);
 8003206:	2300      	movs	r3, #0
 8003208:	71fb      	strb	r3, [r7, #7]
 800320a:	e01d      	b.n	8003248 <DMA1_Stream7_IRQHandler+0x48>
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d016      	beq.n	8003240 <DMA1_Stream7_IRQHandler+0x40>
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	461a      	mov	r2, r3
 8003216:	2107      	movs	r1, #7
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff f84d 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 800321e:	4603      	mov	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10e      	bne.n	8003242 <DMA1_Stream7_IRQHandler+0x42>
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <DMA1_Stream7_IRQHandler+0x58>)
 8003228:	3331      	adds	r3, #49	; 0x31
 800322a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <DMA1_Stream7_IRQHandler+0x42>
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <DMA1_Stream7_IRQHandler+0x58>)
 8003236:	3331      	adds	r3, #49	; 0x31
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	4798      	blx	r3
 800323e:	e000      	b.n	8003242 <DMA1_Stream7_IRQHandler+0x42>
 8003240:	bf00      	nop
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	3301      	adds	r3, #1
 8003246:	71fb      	strb	r3, [r7, #7]
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d9de      	bls.n	800320c <DMA1_Stream7_IRQHandler+0xc>
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000234 	.word	0x20000234

0800325c <FSMC_IRQHandler>:
void FSMC_IRQHandler(void){
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
	/* FSMC global interrupt*/
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <SDIO_IRQHandler>:
void SDIO_IRQHandler(void){
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
	/* SDIO global interrupt*/
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	/* TIM5 global interrupt*/
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void){
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
	}

#endif


}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <UART4_IRQHandler>:
void UART4_IRQHandler(void){
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
	/* UART4 global interrupt*/
	USART_HANDLER(4);
 800329a:	2300      	movs	r3, #0
 800329c:	71fb      	strb	r3, [r7, #7]
 800329e:	e017      	b.n	80032d0 <UART4_IRQHandler+0x3c>
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	4619      	mov	r1, r3
 80032a4:	2004      	movs	r0, #4
 80032a6:	f000 ffad 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10c      	bne.n	80032ca <UART4_IRQHandler+0x36>
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <UART4_IRQHandler+0x4c>)
 80032b4:	331e      	adds	r3, #30
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <UART4_IRQHandler+0x36>
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <UART4_IRQHandler+0x4c>)
 80032c2:	331e      	adds	r3, #30
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	4798      	blx	r3
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	3301      	adds	r3, #1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d9e4      	bls.n	80032a0 <UART4_IRQHandler+0xc>
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200003bc 	.word	0x200003bc

080032e4 <UART5_IRQHandler>:
void UART5_IRQHandler(void){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
	/*UART5 global interrupt*/
	USART_HANDLER(5);
 80032ea:	2300      	movs	r3, #0
 80032ec:	71fb      	strb	r3, [r7, #7]
 80032ee:	e017      	b.n	8003320 <UART5_IRQHandler+0x3c>
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	4619      	mov	r1, r3
 80032f4:	2005      	movs	r0, #5
 80032f6:	f000 ff85 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10c      	bne.n	800331a <UART5_IRQHandler+0x36>
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <UART5_IRQHandler+0x4c>)
 8003304:	3328      	adds	r3, #40	; 0x28
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <UART5_IRQHandler+0x36>
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <UART5_IRQHandler+0x4c>)
 8003312:	3328      	adds	r3, #40	; 0x28
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	4798      	blx	r3
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	3301      	adds	r3, #1
 800331e:	71fb      	strb	r3, [r7, #7]
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	2b09      	cmp	r3, #9
 8003324:	d9e4      	bls.n	80032f0 <UART5_IRQHandler+0xc>

}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200003bc 	.word	0x200003bc

08003334 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void){
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	if (InterruptHandler_TIM6UpdateCallback_void != NULL){
		CLEAR_BIT(TIM6->SR, 0);
		InterruptHandler_TIM6UpdateCallback_void();
	}
#endif
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void){
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
	if (InterruptHandler_TIM7UpdateCallback_void != NULL){
		CLEAR_BIT(TIM7->SR, 0);
		InterruptHandler_TIM7UpdateCallback_void();
	}
#endif
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void){
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
	/* DMA2 Stream0 global interrupt*/
	DMA_HANDLER(2, 0);
 8003356:	2300      	movs	r3, #0
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	e01d      	b.n	8003398 <DMA2_Stream0_IRQHandler+0x48>
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d016      	beq.n	8003390 <DMA2_Stream0_IRQHandler+0x40>
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	461a      	mov	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	2002      	movs	r0, #2
 800336a:	f7fe ffa5 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 800336e:	4603      	mov	r3, r0
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10e      	bne.n	8003392 <DMA2_Stream0_IRQHandler+0x42>
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <DMA2_Stream0_IRQHandler+0x58>)
 8003378:	3331      	adds	r3, #49	; 0x31
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <DMA2_Stream0_IRQHandler+0x42>
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <DMA2_Stream0_IRQHandler+0x58>)
 8003386:	3331      	adds	r3, #49	; 0x31
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	4798      	blx	r3
 800338e:	e000      	b.n	8003392 <DMA2_Stream0_IRQHandler+0x42>
 8003390:	bf00      	nop
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	3301      	adds	r3, #1
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d9de      	bls.n	800335c <DMA2_Stream0_IRQHandler+0xc>

}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000234 	.word	0x20000234

080033ac <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
	/* DMA2 Stream1 global interrupt*/
	DMA_HANDLER(2, 1);
 80033b2:	2300      	movs	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	e01d      	b.n	80033f4 <DMA2_Stream1_IRQHandler+0x48>
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d016      	beq.n	80033ec <DMA2_Stream1_IRQHandler+0x40>
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	461a      	mov	r2, r3
 80033c2:	2101      	movs	r1, #1
 80033c4:	2002      	movs	r0, #2
 80033c6:	f7fe ff77 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10e      	bne.n	80033ee <DMA2_Stream1_IRQHandler+0x42>
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <DMA2_Stream1_IRQHandler+0x58>)
 80033d4:	3338      	adds	r3, #56	; 0x38
 80033d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <DMA2_Stream1_IRQHandler+0x42>
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <DMA2_Stream1_IRQHandler+0x58>)
 80033e2:	3338      	adds	r3, #56	; 0x38
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	4798      	blx	r3
 80033ea:	e000      	b.n	80033ee <DMA2_Stream1_IRQHandler+0x42>
 80033ec:	bf00      	nop
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	3301      	adds	r3, #1
 80033f2:	71fb      	strb	r3, [r7, #7]
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d9de      	bls.n	80033b8 <DMA2_Stream1_IRQHandler+0xc>
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000234 	.word	0x20000234

08003408 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
	/* DMA2 Stream2 global interrupt*/
	DMA_HANDLER(2, 2);
 800340e:	2300      	movs	r3, #0
 8003410:	71fb      	strb	r3, [r7, #7]
 8003412:	e01d      	b.n	8003450 <DMA2_Stream2_IRQHandler+0x48>
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d016      	beq.n	8003448 <DMA2_Stream2_IRQHandler+0x40>
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	461a      	mov	r2, r3
 800341e:	2102      	movs	r1, #2
 8003420:	2002      	movs	r0, #2
 8003422:	f7fe ff49 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10e      	bne.n	800344a <DMA2_Stream2_IRQHandler+0x42>
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <DMA2_Stream2_IRQHandler+0x58>)
 8003430:	333f      	adds	r3, #63	; 0x3f
 8003432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <DMA2_Stream2_IRQHandler+0x42>
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <DMA2_Stream2_IRQHandler+0x58>)
 800343e:	333f      	adds	r3, #63	; 0x3f
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	4798      	blx	r3
 8003446:	e000      	b.n	800344a <DMA2_Stream2_IRQHandler+0x42>
 8003448:	bf00      	nop
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	3301      	adds	r3, #1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d9de      	bls.n	8003414 <DMA2_Stream2_IRQHandler+0xc>
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000234 	.word	0x20000234

08003464 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void){
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
	/* DMA2 Stream3 global interrupt*/
	DMA_HANDLER(2, 3);
 800346a:	2300      	movs	r3, #0
 800346c:	71fb      	strb	r3, [r7, #7]
 800346e:	e01d      	b.n	80034ac <DMA2_Stream3_IRQHandler+0x48>
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d016      	beq.n	80034a4 <DMA2_Stream3_IRQHandler+0x40>
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	461a      	mov	r2, r3
 800347a:	2103      	movs	r1, #3
 800347c:	2002      	movs	r0, #2
 800347e:	f7fe ff1b 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10e      	bne.n	80034a6 <DMA2_Stream3_IRQHandler+0x42>
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <DMA2_Stream3_IRQHandler+0x58>)
 800348c:	3346      	adds	r3, #70	; 0x46
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <DMA2_Stream3_IRQHandler+0x42>
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <DMA2_Stream3_IRQHandler+0x58>)
 800349a:	3346      	adds	r3, #70	; 0x46
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	4798      	blx	r3
 80034a2:	e000      	b.n	80034a6 <DMA2_Stream3_IRQHandler+0x42>
 80034a4:	bf00      	nop
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	3301      	adds	r3, #1
 80034aa:	71fb      	strb	r3, [r7, #7]
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d9de      	bls.n	8003470 <DMA2_Stream3_IRQHandler+0xc>
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000234 	.word	0x20000234

080034c0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
	/* DMA2 Stream4 global interrupt*/
	DMA_HANDLER(2, 4);
 80034c6:	2300      	movs	r3, #0
 80034c8:	71fb      	strb	r3, [r7, #7]
 80034ca:	e01d      	b.n	8003508 <DMA2_Stream4_IRQHandler+0x48>
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d016      	beq.n	8003500 <DMA2_Stream4_IRQHandler+0x40>
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	461a      	mov	r2, r3
 80034d6:	2104      	movs	r1, #4
 80034d8:	2002      	movs	r0, #2
 80034da:	f7fe feed 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10e      	bne.n	8003502 <DMA2_Stream4_IRQHandler+0x42>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <DMA2_Stream4_IRQHandler+0x58>)
 80034e8:	334d      	adds	r3, #77	; 0x4d
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <DMA2_Stream4_IRQHandler+0x42>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <DMA2_Stream4_IRQHandler+0x58>)
 80034f6:	334d      	adds	r3, #77	; 0x4d
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	4798      	blx	r3
 80034fe:	e000      	b.n	8003502 <DMA2_Stream4_IRQHandler+0x42>
 8003500:	bf00      	nop
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	3301      	adds	r3, #1
 8003506:	71fb      	strb	r3, [r7, #7]
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d9de      	bls.n	80034cc <DMA2_Stream4_IRQHandler+0xc>
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000234 	.word	0x20000234

0800351c <ETH_IRQHandler>:
void ETH_IRQHandler(void){
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	/* Ethernet global interrupt*/
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void){
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
	/*Ethernet Wakeup through EXTI line interrupt*/
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <CAN2_TX_IRQHandler>:
void CAN2_TX_IRQHandler(void){
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	/* CAN2 TX interrupts*/
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void){
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
	/* CAN2 RX0 interrupts*/
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void){
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
	/* CAN2 RX1 interrupts*/
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void){
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
	/* CAN2 SCE interrupt*/

}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void){
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
	/* USB On The Go FS global interrupt*/
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
	/* DMA2 Stream5 global interrupt*/
	DMA_HANDLER(2, 5);
 8003586:	2300      	movs	r3, #0
 8003588:	71fb      	strb	r3, [r7, #7]
 800358a:	e01d      	b.n	80035c8 <DMA2_Stream5_IRQHandler+0x48>
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d016      	beq.n	80035c0 <DMA2_Stream5_IRQHandler+0x40>
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	461a      	mov	r2, r3
 8003596:	2105      	movs	r1, #5
 8003598:	2002      	movs	r0, #2
 800359a:	f7fe fe8d 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10e      	bne.n	80035c2 <DMA2_Stream5_IRQHandler+0x42>
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <DMA2_Stream5_IRQHandler+0x58>)
 80035a8:	3354      	adds	r3, #84	; 0x54
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <DMA2_Stream5_IRQHandler+0x42>
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <DMA2_Stream5_IRQHandler+0x58>)
 80035b6:	3354      	adds	r3, #84	; 0x54
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	4798      	blx	r3
 80035be:	e000      	b.n	80035c2 <DMA2_Stream5_IRQHandler+0x42>
 80035c0:	bf00      	nop
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	3301      	adds	r3, #1
 80035c6:	71fb      	strb	r3, [r7, #7]
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d9de      	bls.n	800358c <DMA2_Stream5_IRQHandler+0xc>
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000234 	.word	0x20000234

080035dc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
	/* DMA2 Stream6 global interrupt*/
	DMA_HANDLER(2, 6);
 80035e2:	2300      	movs	r3, #0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	e01d      	b.n	8003624 <DMA2_Stream6_IRQHandler+0x48>
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d016      	beq.n	800361c <DMA2_Stream6_IRQHandler+0x40>
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	461a      	mov	r2, r3
 80035f2:	2106      	movs	r1, #6
 80035f4:	2002      	movs	r0, #2
 80035f6:	f7fe fe5f 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10e      	bne.n	800361e <DMA2_Stream6_IRQHandler+0x42>
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <DMA2_Stream6_IRQHandler+0x58>)
 8003604:	335b      	adds	r3, #91	; 0x5b
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <DMA2_Stream6_IRQHandler+0x42>
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4a08      	ldr	r2, [pc, #32]	; (8003634 <DMA2_Stream6_IRQHandler+0x58>)
 8003612:	335b      	adds	r3, #91	; 0x5b
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	4798      	blx	r3
 800361a:	e000      	b.n	800361e <DMA2_Stream6_IRQHandler+0x42>
 800361c:	bf00      	nop
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	3301      	adds	r3, #1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d9de      	bls.n	80035e8 <DMA2_Stream6_IRQHandler+0xc>
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000234 	.word	0x20000234

08003638 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
	/* DMA2 Stream7 global interrupt*/
	DMA_HANDLER(2, 7);
 800363e:	2300      	movs	r3, #0
 8003640:	71fb      	strb	r3, [r7, #7]
 8003642:	e01d      	b.n	8003680 <DMA2_Stream7_IRQHandler+0x48>
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d016      	beq.n	8003678 <DMA2_Stream7_IRQHandler+0x40>
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	461a      	mov	r2, r3
 800364e:	2107      	movs	r1, #7
 8003650:	2002      	movs	r0, #2
 8003652:	f7fe fe31 	bl	80022b8 <DMA_CheckInterruptAndClear_Bool>
 8003656:	4603      	mov	r3, r0
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10e      	bne.n	800367a <DMA2_Stream7_IRQHandler+0x42>
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <DMA2_Stream7_IRQHandler+0x58>)
 8003660:	3362      	adds	r3, #98	; 0x62
 8003662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <DMA2_Stream7_IRQHandler+0x42>
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	4a08      	ldr	r2, [pc, #32]	; (8003690 <DMA2_Stream7_IRQHandler+0x58>)
 800366e:	3362      	adds	r3, #98	; 0x62
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	4798      	blx	r3
 8003676:	e000      	b.n	800367a <DMA2_Stream7_IRQHandler+0x42>
 8003678:	bf00      	nop
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	3301      	adds	r3, #1
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d9de      	bls.n	8003644 <DMA2_Stream7_IRQHandler+0xc>
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000234 	.word	0x20000234

08003694 <USART6_IRQHandler>:
void USART6_IRQHandler(void){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
	/* USART6 global interrupt*/
	USART_HANDLER(6);
 800369a:	2300      	movs	r3, #0
 800369c:	71fb      	strb	r3, [r7, #7]
 800369e:	e017      	b.n	80036d0 <USART6_IRQHandler+0x3c>
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	4619      	mov	r1, r3
 80036a4:	2006      	movs	r0, #6
 80036a6:	f000 fdad 	bl	8004204 <USART_CheckInterruptAndClear_Bool>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10c      	bne.n	80036ca <USART6_IRQHandler+0x36>
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <USART6_IRQHandler+0x4c>)
 80036b4:	3332      	adds	r3, #50	; 0x32
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <USART6_IRQHandler+0x36>
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <USART6_IRQHandler+0x4c>)
 80036c2:	3332      	adds	r3, #50	; 0x32
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	4798      	blx	r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	3301      	adds	r3, #1
 80036ce:	71fb      	strb	r3, [r7, #7]
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2b09      	cmp	r3, #9
 80036d4:	d9e4      	bls.n	80036a0 <USART6_IRQHandler+0xc>
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200003bc 	.word	0x200003bc

080036e4 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void){
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	/* I2C3 event interrupt*/
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void){
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
	/* I2C3 error interrupt*/
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <OTG_HS_EP1_OUT_IRQHandler>:
void OTG_HS_EP1_OUT_IRQHandler(void){
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	/* USB On The Go HS End Point 1 Out global interrupt*/
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <OTG_HS_EP1_IN_IRQHandler>:
void OTG_HS_EP1_IN_IRQHandler(void){
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
	/* USB On The Go HS End Point 1 In global interrupt*/
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <OTG_HS_WKUP_IRQHandler>:
void OTG_HS_WKUP_IRQHandler(void){
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
	/* USB On The Go HS Wakeup through EXTI interrupt*/
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void){
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
	/* USB On The Go HS global interrupt*/
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void){
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
	/* DCMI global interrupt*/
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <CRYP_IRQHandler>:
void CRYP_IRQHandler(void){
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
	/* CRYP crypto global interrupt*/
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HASH_RNG_IRQHandler>:
void HASH_RNG_IRQHandler(void){
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
	/* Hash and Rng global interrupt*/
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <FPU_IRQHandler>:
void FPU_IRQHandler(void){
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
	/* Floating point interrupt*/
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LCD_TFT_IRQHandler>:
void LCD_TFT_IRQHandler(void){
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
	/* LTDC global interrupt*/
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LCD_TFT_1_IRQHandler>:
void LCD_TFT_1_IRQHandler(void){
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
	/* LTDC global error interrupt.*/
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <RCC_InitClock_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void RCC_InitClock_v(void){
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
	 * "L_CFGRVal_u32" 	 stores the value of RCC_CFGR register.
	 * "L_CRVal_u32" 	 stores the value of RCC_CR register.
	 * After configurations these variable will store values that match configured parameters,then
	 * registers 's values will be assigned based on these variables.
	 * */
	u32 L_PLLCFGVal_u32 = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
	u32 L_CFGRVal_u32 = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
	u32 L_CRVal_u32 = RCC->CR;
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <RCC_InitClock_v+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	607b      	str	r3, [r7, #4]
	/* Set PLL M, N, Q */
	L_PLLCFGVal_u32 |= CLOCK_PLL_M | (CLOCK_PLL_N<<6) | (CLOCK_PLL_Q<<24);
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <RCC_InitClock_v+0xc0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
	/* Set PLL P. */
#if CLOCK_PLL_P==2
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_0);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	60fb      	str	r3, [r7, #12]
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_1);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037b6:	60fb      	str	r3, [r7, #12]
	SET_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLP_1);
#endif

	/*Select PLL Clock source, whether it's HSI or HSE*/
#if CLOCK_PLL_SOURCE_MUX == CLOCK_PLL_SOURCE_HSI
	CLEAR_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLSRC);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037be:	60fb      	str	r3, [r7, #12]
	SET_BIT(L_PLLCFGVal_u32, RCC_PLLCFGR_PLLSRC);
#endif

	/*Set APB2 prescaler*/
#if CLOCK_APB2_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_0);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c6:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_1);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ce:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_2);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037d6:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE2_2);
#endif

	/*Set APB1 prescaler*/
#if CLOCK_APB1_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_0);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037de:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_1);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e6:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_2);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ee:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CFGRVal_u32, RCC_CFGR_PPRE1_2);
#endif

	/*Set AHB prescaler*/
#if CLOCK_AHB_PRESCALER == 1
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_0);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_1);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_2);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003806:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_HPRE_3);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380e:	60bb      	str	r3, [r7, #8]
#endif

	/*Select System Clock source, whether it's HSI, HSE, or PLL*/

#if CLOCK_SYSTEM_CLOCK_MUX == CLOCK_SYSTEM_CLOCK_MUX_HSI
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_SWS_0);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	60bb      	str	r3, [r7, #8]
	CLEAR_BIT(L_CFGRVal_u32, RCC_CFGR_SWS_1);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f023 0308 	bic.w	r3, r3, #8
 800381e:	60bb      	str	r3, [r7, #8]
	SET_BIT(L_CRVal_u32, RCC_CR_PLLON);
#endif
	/*Assigne register values (RCC_PLLCFGR, RCC_CR, or RCC_CFGR) to be as assigned configurations.*/


	RCC->PLLCFGR = L_PLLCFGVal_u32;
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <RCC_InitClock_v+0xbc>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6053      	str	r3, [r2, #4]
	RCC->CR = L_CRVal_u32;
 8003826:	4a08      	ldr	r2, [pc, #32]	; (8003848 <RCC_InitClock_v+0xbc>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
	RCC->CFGR = L_CFGRVal_u32;
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <RCC_InitClock_v+0xbc>)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6093      	str	r3, [r2, #8]
#else
#error "Undefined voltage region !"
#endif

#if ((OPERATING_FREQUENCY>WAIT_STATE_0_FROM_FREQ) && (OPERATING_FREQUENCY<=WAIT_STATE_0_TO_FREQ))
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 0;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <RCC_InitClock_v+0xc4>)
 8003834:	4a06      	ldr	r2, [pc, #24]	; (8003850 <RCC_InitClock_v+0xc4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6013      	str	r3, [r2, #0]
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 7;
#elif ((OPERATING_FREQUENCY>WAIT_STATE_8_FROM_FREQ) && (OPERATING_FREQUENCY<=WAIT_STATE_8_TO_FREQ))
	*(volatile u32 *)(DRIVER_WAIT_STATE_ADDRESS_REGISTER) |= 8;
#endif

}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	04001208 	.word	0x04001208
 8003850:	40023c00 	.word	0x40023c00

08003854 <RCC_EnableClock_v>:


void RCC_EnableClock_v(const u8 Arg_PeripheralBus_Cu8,const u8 Arg_Peripheral_Cu8){
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	460a      	mov	r2, r1
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	4613      	mov	r3, r2
 8003862:	71bb      	strb	r3, [r7, #6]
	/*Enable clock of peripheral,
	 * Arg_Peripheral_Cu8 is the location of peripheral's bit on
	 * peripheral bus.*/
	switch (Arg_PeripheralBus_Cu8) {
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d875      	bhi.n	8003956 <RCC_EnableClock_v+0x102>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <RCC_EnableClock_v+0x1c>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003885 	.word	0x08003885
 8003874:	080038af 	.word	0x080038af
 8003878:	080038d9 	.word	0x080038d9
 800387c:	08003903 	.word	0x08003903
 8003880:	0800392d 	.word	0x0800392d
	case RCC_AHB1:
		SET_BIT(RCC->AHB1ENR, Arg_Peripheral_Cu8);
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <RCC_EnableClock_v+0x110>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	79ba      	ldrb	r2, [r7, #6]
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	4611      	mov	r1, r2
 8003892:	4a34      	ldr	r2, [pc, #208]	; (8003964 <RCC_EnableClock_v+0x110>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6313      	str	r3, [r2, #48]	; 0x30
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB1ENR, Arg_Peripheral_Cu8)){
 8003898:	bf00      	nop
 800389a:	4b32      	ldr	r3, [pc, #200]	; (8003964 <RCC_EnableClock_v+0x110>)
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	79bb      	ldrb	r3, [r7, #6]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f6      	beq.n	800389a <RCC_EnableClock_v+0x46>

		}
		break;
 80038ac:	e054      	b.n	8003958 <RCC_EnableClock_v+0x104>
	case RCC_AHB2:
		SET_BIT(RCC->AHB2ENR, Arg_Peripheral_Cu8);
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	79ba      	ldrb	r2, [r7, #6]
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4611      	mov	r1, r2
 80038bc:	4a29      	ldr	r2, [pc, #164]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6353      	str	r3, [r2, #52]	; 0x34
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB2ENR, Arg_Peripheral_Cu8)){
 80038c2:	bf00      	nop
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	79bb      	ldrb	r3, [r7, #6]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f6      	beq.n	80038c4 <RCC_EnableClock_v+0x70>

		}
		break;
 80038d6:	e03f      	b.n	8003958 <RCC_EnableClock_v+0x104>
	case RCC_AHB3:
		SET_BIT(RCC->AHB3ENR, Arg_Peripheral_Cu8);
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	79ba      	ldrb	r2, [r7, #6]
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	4611      	mov	r1, r2
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6393      	str	r3, [r2, #56]	; 0x38
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->AHB3ENR, Arg_Peripheral_Cu8)){
 80038ec:	bf00      	nop
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <RCC_EnableClock_v+0x110>)
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f6      	beq.n	80038ee <RCC_EnableClock_v+0x9a>

		}
		break;
 8003900:	e02a      	b.n	8003958 <RCC_EnableClock_v+0x104>
	case RCC_APB1:
		SET_BIT(RCC->APB1ENR, Arg_Peripheral_Cu8);
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <RCC_EnableClock_v+0x110>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	79ba      	ldrb	r2, [r7, #6]
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	4611      	mov	r1, r2
 8003910:	4a14      	ldr	r2, [pc, #80]	; (8003964 <RCC_EnableClock_v+0x110>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->APB1ENR, Arg_Peripheral_Cu8)){
 8003916:	bf00      	nop
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <RCC_EnableClock_v+0x110>)
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f6      	beq.n	8003918 <RCC_EnableClock_v+0xc4>

		}
		break;
 800392a:	e015      	b.n	8003958 <RCC_EnableClock_v+0x104>
	case RCC_APB2:
		SET_BIT(RCC->APB2ENR, Arg_Peripheral_Cu8);
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <RCC_EnableClock_v+0x110>)
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	79ba      	ldrb	r2, [r7, #6]
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f202 	lsl.w	r2, r1, r2
 8003938:	4611      	mov	r1, r2
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <RCC_EnableClock_v+0x110>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6453      	str	r3, [r2, #68]	; 0x44
		/*Wait till clock become stable & enabled.*/
		while(STD_FALSE == GET_BIT(RCC->APB2ENR, Arg_Peripheral_Cu8)){
 8003940:	bf00      	nop
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <RCC_EnableClock_v+0x110>)
 8003944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003946:	79bb      	ldrb	r3, [r7, #6]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f6      	beq.n	8003942 <RCC_EnableClock_v+0xee>

		}
		break;
 8003954:	e000      	b.n	8003958 <RCC_EnableClock_v+0x104>
	default:
		/*Error*/
		break;
 8003956:	bf00      	nop
	}
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40023800 	.word	0x40023800

08003968 <RCC_GetCortexSystemTimerFrequency_f32>:
f32 RCC_GetHCLKFrequency_f32(void){
	return (((f32)CLOCK_SYSCLK_MHz)/CLOCK_AHB_PRESCALER);
}


f32 RCC_GetCortexSystemTimerFrequency_f32(void){
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
	return (f32)(CLOCK_SYSCLK_MHz / (CLOCK_AHB_PRESCALER*CLOCK_PRESCALLER_TO_CORTEX_SYSTEM_TIMER));
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003974:	ec43 2b17 	vmov	d7, r2, r3
}
 8003978:	eeb0 0a47 	vmov.f32	s0, s14
 800397c:	eef0 0a67 	vmov.f32	s1, s15
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <RCC_GetAPB1PeripheralClockFrequency_f32>:

f32 RCC_GetFCLKFrequency_f32(void){
	return (((f32)CLOCK_SYSCLK_MHz)/CLOCK_AHB_PRESCALER);
}

f32 RCC_GetAPB1PeripheralClockFrequency_f32(void){
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	return (((f32)CLOCK_SYSCLK_MHz)/(CLOCK_APB1_PRESCALER*CLOCK_AHB_PRESCALER));
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <RCC_GetAPB1PeripheralClockFrequency_f32+0x20>)
 8003992:	ec43 2b17 	vmov	d7, r2, r3
}
 8003996:	eeb0 0a47 	vmov.f32	s0, s14
 800399a:	eef0 0a67 	vmov.f32	s1, s15
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40300000 	.word	0x40300000

080039ac <RCC_GetAPB2PeripheralClockFrequency_f32>:
	return (((f32)CLOCK_SYSCLK_MHz)/(CLOCK_APB1_PRESCALER*CLOCK_AHB_PRESCALER));
#endif
}


f32 RCC_GetAPB2PeripheralClockFrequency_f32(void){
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	return ((f32)(CLOCK_SYSCLK_MHz)/(CLOCK_APB2_PRESCALER*CLOCK_AHB_PRESCALER));
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <RCC_GetAPB2PeripheralClockFrequency_f32+0x20>)
 80039b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80039ba:	eeb0 0a47 	vmov.f32	s0, s14
 80039be:	eef0 0a67 	vmov.f32	s1, s15
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40300000 	.word	0x40300000

080039d0 <RCC_GetPeripheralBus_u8>:
#else
	return ((f32)CLOCK_SYSCLK_MHz)/(CLOCK_APB2_PRESCALER*CLOCK_AHB_PRESCALER);
#endif
}

u8 RCC_GetPeripheralBus_u8(const u32 Arg_PeripheralAddress_Cu32){
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	u8 L_PeripheralBus_u8 = -1;
 80039d8:	23ff      	movs	r3, #255	; 0xff
 80039da:	73fb      	strb	r3, [r7, #15]
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB3_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB3_BUS_TO_ADDRESS) ){
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80039e2:	d305      	bcc.n	80039f0 <RCC_GetPeripheralBus_u8+0x20>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <RCC_GetPeripheralBus_u8+0x80>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d801      	bhi.n	80039f0 <RCC_GetPeripheralBus_u8+0x20>
		L_PeripheralBus_u8 = RCC_AHB3;
 80039ec:	2302      	movs	r3, #2
 80039ee:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB2_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB2_BUS_TO_ADDRESS) ){
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f6:	d305      	bcc.n	8003a04 <RCC_GetPeripheralBus_u8+0x34>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <RCC_GetPeripheralBus_u8+0x84>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d801      	bhi.n	8003a04 <RCC_GetPeripheralBus_u8+0x34>
		L_PeripheralBus_u8 = RCC_AHB2;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_AHB1_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_AHB1_BUS_TO_ADDRESS) ){
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <RCC_GetPeripheralBus_u8+0x88>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d905      	bls.n	8003a18 <RCC_GetPeripheralBus_u8+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <RCC_GetPeripheralBus_u8+0x8c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d801      	bhi.n	8003a18 <RCC_GetPeripheralBus_u8+0x48>
		L_PeripheralBus_u8 = RCC_AHB1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_APB2_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_APB2_BUS_TO_ADDRESS) ){
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <RCC_GetPeripheralBus_u8+0x90>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d905      	bls.n	8003a2c <RCC_GetPeripheralBus_u8+0x5c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <RCC_GetPeripheralBus_u8+0x94>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d201      	bcs.n	8003a2c <RCC_GetPeripheralBus_u8+0x5c>
		L_PeripheralBus_u8 = RCC_APB2;
 8003a28:	2304      	movs	r3, #4
 8003a2a:	73fb      	strb	r3, [r7, #15]
	}
	if ((Arg_PeripheralAddress_Cu32 >= RCC_APB1_BUS_FROM_ADDRESS)&&(Arg_PeripheralAddress_Cu32<=RCC_APB1_BUS_TO_ADDRESS) ){
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d305      	bcc.n	8003a40 <RCC_GetPeripheralBus_u8+0x70>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <RCC_GetPeripheralBus_u8+0x98>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d201      	bcs.n	8003a40 <RCC_GetPeripheralBus_u8+0x70>
		L_PeripheralBus_u8 = RCC_APB1;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	73fb      	strb	r3, [r7, #15]
	}

	return L_PeripheralBus_u8;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	a0000fff 	.word	0xa0000fff
 8003a54:	50060bff 	.word	0x50060bff
 8003a58:	4001ffff 	.word	0x4001ffff
 8003a5c:	4007ffff 	.word	0x4007ffff
 8003a60:	4000ffff 	.word	0x4000ffff
 8003a64:	40016c00 	.word	0x40016c00
 8003a68:	40008000 	.word	0x40008000

08003a6c <RCC_GetRCCGPIOBit_u8>:
	};
	return L_TimerBit_Cu8[Arg_TimerInstanceId_Cu8-1];
}


u8 RCC_GetRCCGPIOBit_u8(const u8 Arg_GPIOInstanceId_Cu8){
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
	/*Map each GPIO instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_GPIOBit_Cu8[] = {
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <RCC_GetRCCGPIOBit_u8+0x30>)
 8003a78:	f107 0308 	add.w	r3, r7, #8
 8003a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a80:	e883 0003 	stmia.w	r3, {r0, r1}
			RCC_GPIOF, // GPIOF
			RCC_GPIOG, // GPIOG
			RCC_GPIOH, // GPIOH

	};
	return L_GPIOBit_Cu8[Arg_GPIOInstanceId_Cu8-1];
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	3310      	adds	r3, #16
 8003a8a:	443b      	add	r3, r7
 8003a8c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	08004900 	.word	0x08004900

08003aa0 <RCC_GetRCCUSARTBit_u8>:


u8 RCC_GetRCCUSARTBit_u8(const u8 Arg_USARTInstanceId_Cu8){
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
	/*Map each USART instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_USARTBit_Cu8[] = {
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <RCC_GetRCCUSARTBit_u8+0x34>)
 8003aac:	f107 0308 	add.w	r3, r7, #8
 8003ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ab4:	6018      	str	r0, [r3, #0]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	8019      	strh	r1, [r3, #0]
			RCC_UART4,
			RCC_UART5,
			RCC_USART6,
	};

	return L_USARTBit_Cu8[Arg_USARTInstanceId_Cu8 - 1];
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	3310      	adds	r3, #16
 8003ac0:	443b      	add	r3, r7
 8003ac2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	08004908 	.word	0x08004908

08003ad8 <RCC_GetRCCCANBit_u8>:


u8 RCC_GetRCCCANBit_u8(const u8 Arg_CANInstanceId_Cu8){
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
	/*Map each CAN instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_CANBit_Cu8[] = {
 8003ae2:	f641 2319 	movw	r3, #6681	; 0x1a19
 8003ae6:	81bb      	strh	r3, [r7, #12]
			RCC_CAN1,
			RCC_CAN2,
	};

	return L_CANBit_Cu8[Arg_CANInstanceId_Cu8 - 1];
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	3310      	adds	r3, #16
 8003aee:	443b      	add	r3, r7
 8003af0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <RCC_GetRCCDMABit_u8>:

	return L_DACBit_Cu8[Arg_DACInstanceId_Cu8 - 1];
}


u8 RCC_GetRCCDMABit_u8(const u8 Arg_DMAInstanceId_Cu8){
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	/*Map each DMA instance id with corresponding bit position in register.
	 * where instance id is the index of array-1 */
	const u8 L_DMABit_Cu8[] = {
 8003b0a:	f241 6315 	movw	r3, #5653	; 0x1615
 8003b0e:	81bb      	strh	r3, [r7, #12]
			RCC_DMA1,
			RCC_DMA2,
	};
	return L_DMABit_Cu8[Arg_DMAInstanceId_Cu8 - 1];
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	3310      	adds	r3, #16
 8003b16:	443b      	add	r3, r7
 8003b18:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <SYSCFG_GetActiveGPIO_u8>:
	RCC_EnableClock_v(RCC_GetPeripheralBus_u8((u32)SYSCFG), RCC_SYSCFG);
	SYSCFG->EXTICR[Arg_EXTIPinNum_u8/4] &= ~((0xF) << ((Arg_EXTIPinNum_u8%4)*4));
	SYSCFG->EXTICR[Arg_EXTIPinNum_u8/4] |= ((Arg_GPIO_u8&0xF) << ((Arg_EXTIPinNum_u8%4)*4));
}

u8 SYSCFG_GetActiveGPIO_u8(u8 Arg_LineNumber_u8){
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
	u8 L_ActiveGPIO_u8;
	L_ActiveGPIO_u8 = SYSCFG->EXTICR[Arg_LineNumber_u8/4];
 8003b32:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <SYSCFG_GetActiveGPIO_u8+0x40>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	73fb      	strb	r3, [r7, #15]
	L_ActiveGPIO_u8 >>= ((Arg_LineNumber_u8%4)*4);
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa42 f303 	asr.w	r3, r2, r3
 8003b50:	73fb      	strb	r3, [r7, #15]
	L_ActiveGPIO_u8 &= 0xF;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	73fb      	strb	r3, [r7, #15]

	return L_ActiveGPIO_u8;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	00000000 	.word	0x00000000

08003b70 <USART_Config_v>:
==================================================
  Start Section --> Functions implementation.
==================================================
 */

void USART_Config_v(USART_Cfg const * const Arg_conf_cpcUSART_Cfg){
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b08f      	sub	sp, #60	; 0x3c
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

	/*GPIO that will be used with USART peripheral.*/
	GPIO_Cfg L_usartGPIO_GPIO_Cfg = {0};
 8003b78:	f107 0318 	add.w	r3, r7, #24
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
	L_usartGPIO_GPIO_Cfg.InstanceId = Arg_conf_cpcUSART_Cfg->GPIOInstanceId;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7adb      	ldrb	r3, [r3, #11]
 8003b88:	763b      	strb	r3, [r7, #24]
	L_usartGPIO_GPIO_Cfg.Mode = GPIO_MODE_ALTERNATE_FUNCTION;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	83bb      	strh	r3, [r7, #28]
	L_usartGPIO_GPIO_Cfg.PINs = Arg_conf_cpcUSART_Cfg->GPIOPins;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	899b      	ldrh	r3, [r3, #12]
 8003b92:	837b      	strh	r3, [r7, #26]
	L_usartGPIO_GPIO_Cfg.OutputSpeed = GPIO_OUTPUT_SPEED_HIGH;
 8003b94:	2303      	movs	r3, #3
 8003b96:	843b      	strh	r3, [r7, #32]
	L_usartGPIO_GPIO_Cfg.OutputType = GPIO_OUTPUT_TYPE_PUSH_PULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	83fb      	strh	r3, [r7, #30]
	L_usartGPIO_GPIO_Cfg.PullUpPullDownResistor = GPIO_RESISTOR_NO_PULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	847b      	strh	r3, [r7, #34]	; 0x22


	/*Mapping USART with it's corresponding alternate function number.*/
	u8 L_USARTMappingPins[] = {
 8003ba0:	4a4c      	ldr	r2, [pc, #304]	; (8003cd4 <USART_Config_v+0x164>)
 8003ba2:	f107 0310 	add.w	r3, r7, #16
 8003ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003baa:	6018      	str	r0, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	8019      	strh	r1, [r3, #0]
			UART4_MAP_PIN,
			UART5_MAP_PIN,
			USART6_MAP_PIN,
	};

	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003bb6:	e01d      	b.n	8003bf4 <USART_Config_v+0x84>
		if (STD_TRUE == GET_BIT(Arg_conf_cpcUSART_Cfg->GPIOPins, L_i_u8)){
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	899b      	ldrh	r3, [r3, #12]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bc2:	fa42 f303 	asr.w	r3, r2, r3
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <USART_Config_v+0x7a>
			GPIO_MapGPIOPIN_v(&L_usartGPIO_GPIO_Cfg,
					L_i_u8,
					L_USARTMappingPins[Arg_conf_cpcUSART_Cfg->InstanceId-1]);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7a9b      	ldrb	r3, [r3, #10]
 8003bd2:	3b01      	subs	r3, #1
			GPIO_MapGPIOPIN_v(&L_usartGPIO_GPIO_Cfg,
 8003bd4:	3338      	adds	r3, #56	; 0x38
 8003bd6:	443b      	add	r3, r7
 8003bd8:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8003bdc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003be0:	f107 0318 	add.w	r3, r7, #24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fdab 	bl	8002740 <GPIO_MapGPIOPIN_v>
	for (u8 L_i_u8 = 0; L_i_u8<16; L_i_u8++){
 8003bea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d9dd      	bls.n	8003bb8 <USART_Config_v+0x48>
		}
	}

	/*Configure pin that will be used with USART*/
	GPIO_Config_v(&L_usartGPIO_GPIO_Cfg);
 8003bfc:	f107 0318 	add.w	r3, r7, #24
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fc23 	bl	800244c <GPIO_Config_v>

	/*Disable USART*/
	USART_DisableUSART_v(Arg_conf_cpcUSART_Cfg);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa56 	bl	80040b8 <USART_DisableUSART_v>
	 * 2. Get the corresponding bit number of peripheral on it's but through RCC_GetRCCUSARTBit_u8
	 * by passing instance id of USART peripheral.
	 * */

	RCC_EnableClock_v(
			RCC_GetPeripheralBus_u8((u32)USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)),
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7a9b      	ldrb	r3, [r3, #10]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a31      	ldr	r2, [pc, #196]	; (8003cd8 <USART_Config_v+0x168>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	RCC_EnableClock_v(
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fed9 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461c      	mov	r4, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7a9b      	ldrb	r3, [r3, #10]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff3a 	bl	8003aa0 <RCC_GetRCCUSARTBit_u8>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff fe0f 	bl	8003854 <RCC_EnableClock_v>
			RCC_GetRCCUSARTBit_u8(Arg_conf_cpcUSART_Cfg->InstanceId));


	/*Reset registers*/
	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->SR = USART_SR_RESET_VALUE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7a9b      	ldrb	r3, [r3, #10]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <USART_Config_v+0x168>)
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003c48:	6013      	str	r3, [r2, #0]
	 * To optimize code size and execution time.
	 * These variables are defined by their corresponding register reset value,
	 * and set/clear only bits that differ from reset value.
	 * */

	u32 L_CR1_Reg_Val_u32 = USART_CR1_RESET_VALUE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
	u32 L_CR2_Reg_Val_u32 = USART_CR2_RESET_VALUE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 L_CR3_Reg_Val_u32 = USART_CR3_RESET_VALUE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28

	/*Databits configurations section.*/
	switch (Arg_conf_cpcUSART_Cfg->Databits){
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <USART_Config_v+0x104>
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d000      	beq.n	8003c6a <USART_Config_v+0xfa>
	case USART_Databits_9:
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_M);
		break;
	default:

		break;
 8003c68:	e005      	b.n	8003c76 <USART_Config_v+0x106>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_M);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8003c72:	e000      	b.n	8003c76 <USART_Config_v+0x106>
		break;
 8003c74:	bf00      	nop
	}

	/*Oversampling configurations section.*/
	switch (Arg_conf_cpcUSART_Cfg->Oversampling){
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <USART_Config_v+0x124>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d000      	beq.n	8003c8a <USART_Config_v+0x11a>
		break;
	case USART_OVERSAMPLING_8:
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_OVER8);
		break;
	default :
		break;
 8003c88:	e005      	b.n	8003c96 <USART_Config_v+0x126>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_OVER8);
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8003c92:	e000      	b.n	8003c96 <USART_Config_v+0x126>
		break;
 8003c94:	bf00      	nop
	}

	/*Parity configurations section.*/
	switch(Arg_conf_cpcUSART_Cfg->Parity){
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d00b      	beq.n	8003cbc <USART_Config_v+0x14c>
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	dc12      	bgt.n	8003cce <USART_Config_v+0x15e>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <USART_Config_v+0x16c>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d000      	beq.n	8003cb2 <USART_Config_v+0x142>
	case USART_PARITY_ODD:
		SET_BIT(L_CR1_Reg_Val_u32, 10);
		SET_BIT(L_CR1_Reg_Val_u32, 9);
		break;
	default :
		break;
 8003cb0:	e00d      	b.n	8003cce <USART_Config_v+0x15e>
		SET_BIT(L_CR1_Reg_Val_u32, 10);
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8003cba:	e010      	b.n	8003cde <USART_Config_v+0x16e>
		SET_BIT(L_CR1_Reg_Val_u32, 10);
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
		SET_BIT(L_CR1_Reg_Val_u32, 9);
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8003ccc:	e007      	b.n	8003cde <USART_Config_v+0x16e>
		break;
 8003cce:	bf00      	nop
 8003cd0:	e005      	b.n	8003cde <USART_Config_v+0x16e>
 8003cd2:	bf00      	nop
 8003cd4:	08004918 	.word	0x08004918
 8003cd8:	20000000 	.word	0x20000000
		break;
 8003cdc:	bf00      	nop
	}

	/*Mapping between USART interrupt and It's corresponding NVIC*/
	if (0 !=Arg_conf_cpcUSART_Cfg->Interrupt){
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d011      	beq.n	8003d0a <USART_Config_v+0x19a>
		u8 L_USARTPinMapping_u8[] = {
 8003ce6:	4a9b      	ldr	r2, [pc, #620]	; (8003f54 <USART_Config_v+0x3e4>)
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf0:	6018      	str	r0, [r3, #0]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	8019      	strh	r1, [r3, #0]
				NVIC_USART3,
				NVIC_UART4,
				NVIC_UART5,
				NVIC_USART6
		};
		NVIC_EnableInterrupt_v(L_USARTPinMapping_u8[Arg_conf_cpcUSART_Cfg->InstanceId-1]);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7a9b      	ldrb	r3, [r3, #10]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	3338      	adds	r3, #56	; 0x38
 8003cfe:	443b      	add	r3, r7
 8003d00:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb91 	bl	800442c <NVIC_EnableInterrupt_v>
	}
	/*Interrupt configurations section.*/
	/*Interrupt :: Parity error.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & (u32)USART_INTERRUPT_PARITY_ERROR)>0){
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <USART_Config_v+0x1ae>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_PEIE);
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	/*Interrupt :: Transmit data empty.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_TRANSMIT_DATA_EMPTY)>0){
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <USART_Config_v+0x1c2>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_TXEIE);
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
	}
	/*Interrupt :: Transmit complete.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_TRANSMIT_COMPLETE)>0){
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <USART_Config_v+0x1d6>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_TCIE);
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
	}
	/*Interrupt :: Read data not-empty.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_READ_DATA_REGISTER_NOT_EMPTY)>0){
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <USART_Config_v+0x1ea>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_RXNEIE);
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	f043 0320 	orr.w	r3, r3, #32
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
	}
	/*Interrupt :: Idle line detected.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_IDLE_LINE_DETECTED)>0){
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <USART_Config_v+0x1fe>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_IDLEIE);
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	/*Interrupt :: CTS Hardware flow control.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_CTS)>0){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <USART_Config_v+0x212>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_CTSIE);
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*Interrupt :: Error.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_ERROR)>0){
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <USART_Config_v+0x226>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_EIE);
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*Interrupt :: Over run error.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_OVERRUN_ERROR)>0){
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <USART_Config_v+0x23a>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_EIE);
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*Interrupt :: Noise detected.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_NOISE_DETECTED)>0){
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <USART_Config_v+0x24e>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_EIE);
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*Interrupt :: Frame error.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_FRAME_ERROR)>0){
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <USART_Config_v+0x262>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_EIE);
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*Interrupt :: Parity error.*/
	if ((Arg_conf_cpcUSART_Cfg->Interrupt & USART_INTERRUPT_PARITY_ERROR)>0){
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <USART_Config_v+0x276>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_EIE);
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	/*DMA configurations.*/

	/*Configure DMA transmission.*/
	if ((Arg_conf_cpcUSART_Cfg->DMA & USART_DMA_TRANSMIT)>0){
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <USART_Config_v+0x290>

		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_DMAT);
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/*Configure DMA reception.*/
	if((Arg_conf_cpcUSART_Cfg->DMA & USART_DMA_RECEIVE)>0){
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <USART_Config_v+0x2aa>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_DMAR);
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/*USART Transmit/Receive configurations.*/
	if ((Arg_conf_cpcUSART_Cfg->TransferDirection & USART_RECEIVE)>0){
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <USART_Config_v+0x2c4>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_RE);
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if ((Arg_conf_cpcUSART_Cfg->TransferDirection & USART_TRANSMIT)>0){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <USART_Config_v+0x2de>
		SET_BIT(L_CR1_Reg_Val_u32, USART_CR1_TE);
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
	}


	/*Stop Bits configurations section.*/
	switch(Arg_conf_cpcUSART_Cfg->StopBits){
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d81e      	bhi.n	8003e9a <USART_Config_v+0x32a>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <USART_Config_v+0x2f4>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e9b 	.word	0x08003e9b
 8003e68:	08003e75 	.word	0x08003e75
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e91 	.word	0x08003e91
	case USART_STOP_ONE_BIT:
		/*It is default value, so no changes to L_CR2_Reg_Val_u32.*/
		break;

	case USART_STOP_HALF_BIT:
		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_STOP_0);
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		break;
 8003e7c:	e00e      	b.n	8003e9c <USART_Config_v+0x32c>

	case USART_STOP_ONE_HALF_BIT:
		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_STOP_0);
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_STOP_1);
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8003e8e:	e005      	b.n	8003e9c <USART_Config_v+0x32c>
	case USART_STOP_TWO_BITS:

		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_STOP_1);
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8003e98:	e000      	b.n	8003e9c <USART_Config_v+0x32c>
	default :
		break;
 8003e9a:	bf00      	nop
	}

	/*Clock configurations section.*/

	switch(Arg_conf_cpcUSART_Cfg->ClockPhaseAndPolarity){
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d81d      	bhi.n	8003ee6 <USART_Config_v+0x376>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <USART_Config_v+0x340>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ec1 	.word	0x08003ec1
 8003eb8:	08003ecb 	.word	0x08003ecb
 8003ebc:	08003ed5 	.word	0x08003ed5
		/*It is default value, so no changes to L_CR2_Reg_Val_u32.*/
		break;

	case USART_CLOCK_STEADY_LOW_SECOND_DATA_CAPTURE:

		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_CPOL);
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8003ec8:	e00e      	b.n	8003ee8 <USART_Config_v+0x378>

	case USART_CLOCK_STEADY_HIGH_FIRST_DATA_CAPTURE:

		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_CPOL);
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8003ed2:	e009      	b.n	8003ee8 <USART_Config_v+0x378>

	case USART_CLOCK_STEADY_HIGH_SECOND_DATA_CAPTURE:
		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_CPHA);
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
		SET_BIT(L_CR2_Reg_Val_u32, USART_CR2_CPOL);
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8003ee4:	e000      	b.n	8003ee8 <USART_Config_v+0x378>
	default :
		break;
 8003ee6:	bf00      	nop
	}

	/*CTS / RTS configurations section.*/
	switch(Arg_conf_cpcUSART_Cfg->CTSAndRTS){
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	789b      	ldrb	r3, [r3, #2]
 8003eec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d81d      	bhi.n	8003f32 <USART_Config_v+0x3c2>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <USART_Config_v+0x38c>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f0d 	.word	0x08003f0d
 8003f04:	08003f17 	.word	0x08003f17
 8003f08:	08003f21 	.word	0x08003f21
	case USART_CTS_DISABLE_RTS_DISABLE:
		/*It is default value, so no changes to L_CR3_Reg_Val_u32.*/
		break;
	case USART_CTS_ENABLE_RTS_DISABLE:
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_CTSE);
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28

		break;
 8003f14:	e00e      	b.n	8003f34 <USART_Config_v+0x3c4>
	case USART_CTS_DISABLE_RTS_ENABLE:

		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_RTSE);
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f1e:	e009      	b.n	8003f34 <USART_Config_v+0x3c4>
	case USART_CTS_ENABLE_RTS_ENABLE:
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_CTSE);
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_RTSE);
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f30:	e000      	b.n	8003f34 <USART_Config_v+0x3c4>
	default :
		break;
 8003f32:	bf00      	nop
	}

	/*Half Duplex configurations section.*/
	switch(Arg_conf_cpcUSART_Cfg->HalfDuplex){
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <USART_Config_v+0x3e8>
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d000      	beq.n	8003f48 <USART_Config_v+0x3d8>
	case USART_HALF_DUPLEX_ENABLE:
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_HDSEL);
		break;

	default :
		break;
 8003f46:	e008      	b.n	8003f5a <USART_Config_v+0x3ea>
		SET_BIT(L_CR3_Reg_Val_u32, USART_CR3_HDSEL);
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f043 0308 	orr.w	r3, r3, #8
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f50:	e003      	b.n	8003f5a <USART_Config_v+0x3ea>
 8003f52:	bf00      	nop
 8003f54:	08004920 	.word	0x08004920
		break;
 8003f58:	bf00      	nop
	}

	/*Prescaller configurations section.*/
	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->GTPR = (Arg_conf_cpcUSART_Cfg->PrescalerValue) | (Arg_conf_cpcUSART_Cfg->PrescalerValue <<8);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7a5b      	ldrb	r3, [r3, #9]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7a5b      	ldrb	r3, [r3, #9]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7a9b      	ldrb	r3, [r3, #10]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <USART_Config_v+0x4f0>)
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	460a      	mov	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]


	/*Baudrate configurations section. */
	/*Multiply*/
	u32 L_BaudRateCalculation;
	if (RCC_APB1 == RCC_GetPeripheralBus_u8((u32)USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId))){
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7a9b      	ldrb	r3, [r3, #10]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	4a37      	ldr	r2, [pc, #220]	; (8004060 <USART_Config_v+0x4f0>)
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fd22 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d110      	bne.n	8003fb4 <USART_Config_v+0x444>
		L_BaudRateCalculation = RCC_GetAPB1PeripheralClockFrequency_f32()*1000000;
 8003f92:	f7ff fcf9 	bl	8003988 <RCC_GetAPB1PeripheralClockFrequency_f32>
 8003f96:	ec51 0b10 	vmov	r0, r1, d0
 8003f9a:	a32f      	add	r3, pc, #188	; (adr r3, 8004058 <USART_Config_v+0x4e8>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc fade 	bl	8000560 <__aeabi_dmul>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7fc fd72 	bl	8000a94 <__aeabi_d2uiz>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (RCC_APB2 == RCC_GetPeripheralBus_u8((u32)USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId))){
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7a9b      	ldrb	r3, [r3, #10]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <USART_Config_v+0x4f0>)
 8003fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fd05 	bl	80039d0 <RCC_GetPeripheralBus_u8>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d110      	bne.n	8003fee <USART_Config_v+0x47e>
		L_BaudRateCalculation = RCC_GetAPB2PeripheralClockFrequency_f32()*1000000;
 8003fcc:	f7ff fcee 	bl	80039ac <RCC_GetAPB2PeripheralClockFrequency_f32>
 8003fd0:	ec51 0b10 	vmov	r0, r1, d0
 8003fd4:	a320      	add	r3, pc, #128	; (adr r3, 8004058 <USART_Config_v+0x4e8>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f7fc fac1 	bl	8000560 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fd55 	bl	8000a94 <__aeabi_d2uiz>
 8003fea:	4603      	mov	r3, r0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
	}
	L_BaudRateCalculation += (Arg_conf_cpcUSART_Cfg->BaudRate/2U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	4413      	add	r3, r2
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
	L_BaudRateCalculation /= Arg_conf_cpcUSART_Cfg->BaudRate;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24

	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->BRR = L_BaudRateCalculation;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7a9b      	ldrb	r3, [r3, #10]
 800400a:	3b01      	subs	r3, #1
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <USART_Config_v+0x4f0>)
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	461a      	mov	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	6093      	str	r3, [r2, #8]




	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR1 = L_CR1_Reg_Val_u32;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7a9b      	ldrb	r3, [r3, #10]
 800401c:	3b01      	subs	r3, #1
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <USART_Config_v+0x4f0>)
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	461a      	mov	r2, r3
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	60d3      	str	r3, [r2, #12]
	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR2 = L_CR2_Reg_Val_u32;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7a9b      	ldrb	r3, [r3, #10]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <USART_Config_v+0x4f0>)
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	461a      	mov	r2, r3
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	6113      	str	r3, [r2, #16]
	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR3 = L_CR3_Reg_Val_u32;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7a9b      	ldrb	r3, [r3, #10]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <USART_Config_v+0x4f0>)
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	461a      	mov	r2, r3
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	6153      	str	r3, [r2, #20]

}
 800404e:	bf00      	nop
 8004050:	373c      	adds	r7, #60	; 0x3c
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	bf00      	nop
 8004058:	00000000 	.word	0x00000000
 800405c:	412e8480 	.word	0x412e8480
 8004060:	20000000 	.word	0x20000000

08004064 <USART_EnableUSART_v>:

void USART_EnableUSART_v(USART_Cfg const * const Arg_conf_cpcUSART_Cfg){
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	SET_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR1, USART_CR1_UE); // Enable USART
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7a9b      	ldrb	r3, [r3, #10]
 8004070:	3b01      	subs	r3, #1
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <USART_EnableUSART_v+0x50>)
 8004074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	7a92      	ldrb	r2, [r2, #10]
 800407e:	3a01      	subs	r2, #1
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <USART_EnableUSART_v+0x50>)
 8004082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800408a:	60d3      	str	r3, [r2, #12]
	/*Wait till USART is enabled*/
	while(STD_FALSE == GET_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR1, USART_CR1_UE)){
 800408c:	bf00      	nop
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7a9b      	ldrb	r3, [r3, #10]
 8004092:	3b01      	subs	r3, #1
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <USART_EnableUSART_v+0x50>)
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0b5b      	lsrs	r3, r3, #13
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f3      	beq.n	800408e <USART_EnableUSART_v+0x2a>

	}
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000000 	.word	0x20000000

080040b8 <USART_DisableUSART_v>:

void USART_DisableUSART_v(USART_Cfg const * const Arg_conf_cpcUSART_Cfg){
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR1, USART_CR1_UE); // Disable USART
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7a9b      	ldrb	r3, [r3, #10]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <USART_DisableUSART_v+0x50>)
 80040c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	7a92      	ldrb	r2, [r2, #10]
 80040d2:	3a01      	subs	r2, #1
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <USART_DisableUSART_v+0x50>)
 80040d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80040da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040de:	60d3      	str	r3, [r2, #12]
	while(STD_TRUE == GET_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->CR1, USART_CR1_UE)){
 80040e0:	bf00      	nop
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7a9b      	ldrb	r3, [r3, #10]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4a07      	ldr	r2, [pc, #28]	; (8004108 <USART_DisableUSART_v+0x50>)
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0b5b      	lsrs	r3, r3, #13
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d0f3      	beq.n	80040e2 <USART_DisableUSART_v+0x2a>

	}
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000000 	.word	0x20000000

0800410c <USART_SendU8Pooling_v>:
	}
	return L_ReceivedValue_u64;
}

void USART_SendU8Pooling_v(
		USART_Cfg const * const Arg_conf_cpcUSART_Cfg, u8 Arg_Data_u8, const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	460b      	mov	r3, r1
 800411a:	72fb      	strb	r3, [r7, #11]

	Utils_TimeoutChecker L_timeout_Utils_TimeoutChecker;
	Utils_TimeoutChecker_Init(&L_timeout_Utils_TimeoutChecker, Arg_ToutVal_Cu32);
 800411c:	f107 0310 	add.w	r3, r7, #16
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f93e 	bl	80043a4 <Utils_TimeoutChecker_Init>

	u8 L_TimeoutCheckCondition_u8;
	L_TimeoutCheckCondition_u8 = Utils_IsTimeoutOccurred_u8(&L_timeout_Utils_TimeoutChecker);
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f95f 	bl	80043f0 <Utils_IsTimeoutOccurred_u8>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(STD_FALSE == GET_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->SR, USART_SR_TXE)){
 8004138:	e014      	b.n	8004164 <USART_SendU8Pooling_v+0x58>
		if ((STD_TRUE == L_TimeoutCheckCondition_u8) ){
 800413a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800413e:	2b01      	cmp	r3, #1
 8004140:	d106      	bne.n	8004150 <USART_SendU8Pooling_v+0x44>
			if (NULL != Arg_ToutErr_pCu32){
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <USART_SendU8Pooling_v+0x72>
				*Arg_ToutErr_pCu32 = STD_TimeOutError;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e020      	b.n	8004192 <USART_SendU8Pooling_v+0x86>
				return;
			}

			break;
		}
		else if (STD_FALSE == L_TimeoutCheckCondition_u8){
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <USART_SendU8Pooling_v+0x58>
			if (NULL != Arg_ToutErr_pCu32){
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <USART_SendU8Pooling_v+0x58>
				*Arg_ToutErr_pCu32 = STD_NoTimeOutError;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
	while(STD_FALSE == GET_BIT(USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->SR, USART_SR_TXE)){
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	7a9b      	ldrb	r3, [r3, #10]
 8004168:	3b01      	subs	r3, #1
 800416a:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <USART_SendU8Pooling_v+0x8c>)
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	09db      	lsrs	r3, r3, #7
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0de      	beq.n	800413a <USART_SendU8Pooling_v+0x2e>
 800417c:	e000      	b.n	8004180 <USART_SendU8Pooling_v+0x74>
			break;
 800417e:	bf00      	nop
		}
		else{
		}

	}
	USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->DR  = Arg_Data_u8;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	7a9b      	ldrb	r3, [r3, #10]
 8004184:	3b01      	subs	r3, #1
 8004186:	4a04      	ldr	r2, [pc, #16]	; (8004198 <USART_SendU8Pooling_v+0x8c>)
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	461a      	mov	r2, r3
 800418e:	7afb      	ldrb	r3, [r7, #11]
 8004190:	6053      	str	r3, [r2, #4]
}
 8004192:	3728      	adds	r7, #40	; 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000000 	.word	0x20000000

0800419c <USART_SendU8ArrayPooling_v>:
	}
}


void USART_SendU8ArrayPooling_v(
		USART_Cfg const * const Arg_conf_cpcUSART_Cfg, u8 *Arg_Arr_pu8, u32 Arg_ArrLen_u32, const u32 Arg_ToutVal_Cu32, u32 * const Arg_ToutErr_pCu32){
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	for (u32 L_i_u32 = 0;L_i_u32 < Arg_ArrLen_u32;L_i_u32++){
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e00b      	b.n	80041c8 <USART_SendU8ArrayPooling_v+0x2c>
		USART_SendU8Pooling_v(Arg_conf_cpcUSART_Cfg, Arg_Arr_pu8[L_i_u32], Arg_ToutVal_Cu32, Arg_ToutErr_pCu32);
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	7819      	ldrb	r1, [r3, #0]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ffa5 	bl	800410c <USART_SendU8Pooling_v>
	for (u32 L_i_u32 = 0;L_i_u32 < Arg_ArrLen_u32;L_i_u32++){
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	3301      	adds	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3ef      	bcc.n	80041b0 <USART_SendU8ArrayPooling_v+0x14>
	}
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <USART_GetAdressForDMA_u32>:
	for (u32 L_i_u32 = 0;L_i_u32 < Arg_ArrLen_u32;L_i_u32++){
		USART_SendU64Pooling_v(Arg_conf_cpcUSART_Cfg, Arg_Arr_pu64[L_i_u32], Arg_EndianMode_CSTD_EndianType, Arg_ToutVal_Cu32, Arg_ToutErr_pCu32);
	}
}

u32 USART_GetAdressForDMA_u32(USART_Cfg const * const Arg_conf_cpcUSART_Cfg){
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	return (u32)&USART_ID(Arg_conf_cpcUSART_Cfg->InstanceId)->DR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7a9b      	ldrb	r3, [r3, #10]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <USART_GetAdressForDMA_u32+0x24>)
 80041ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f0:	3304      	adds	r3, #4
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000000 	.word	0x20000000

08004204 <USART_CheckInterruptAndClear_Bool>:


Bool USART_CheckInterruptAndClear_Bool(u8 Arg_USARTInstanceId_u8, u8 Arg_USARTInterruptType_u8){
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	71bb      	strb	r3, [r7, #6]
	switch (Arg_USARTInterruptType_u8){
 8004214:	79bb      	ldrb	r3, [r7, #6]
 8004216:	2b09      	cmp	r3, #9
 8004218:	f200 80ba 	bhi.w	8004390 <USART_CheckInterruptAndClear_Bool+0x18c>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <USART_CheckInterruptAndClear_Bool+0x20>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	0800424d 	.word	0x0800424d
 8004228:	0800426b 	.word	0x0800426b
 800422c:	080042a5 	.word	0x080042a5
 8004230:	080042df 	.word	0x080042df
 8004234:	080042fd 	.word	0x080042fd
 8004238:	08004391 	.word	0x08004391
 800423c:	0800431b 	.word	0x0800431b
 8004240:	08004339 	.word	0x08004339
 8004244:	08004357 	.word	0x08004357
 8004248:	08004375 	.word	0x08004375

	/*USART_INTERRUPT_TRANSMIT_DATA_EMPTY*/
	case 0:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TXE)){
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	3b01      	subs	r3, #1
 8004250:	4a53      	ldr	r2, [pc, #332]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <USART_CheckInterruptAndClear_Bool+0x62>

			return STD_TRUE;
 8004262:	2301      	movs	r3, #1
 8004264:	e095      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	e093      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_TRANSMIT_COMPLETE*/
	case 1:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TC)){
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	3b01      	subs	r3, #1
 800426e:	4a4c      	ldr	r2, [pc, #304]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10f      	bne.n	80042a0 <USART_CheckInterruptAndClear_Bool+0x9c>
			CLEAR_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_TC);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3b01      	subs	r3, #1
 8004284:	4a46      	ldr	r2, [pc, #280]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	3a01      	subs	r2, #1
 8004290:	4943      	ldr	r1, [pc, #268]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004292:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	6013      	str	r3, [r2, #0]
			return STD_TRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	e078      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e076      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_READ_DATA_REGISTER_NOT_EMPTY*/
	case 2:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_RXNE)){
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	4a3d      	ldr	r2, [pc, #244]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 80042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10f      	bne.n	80042da <USART_CheckInterruptAndClear_Bool+0xd6>
			CLEAR_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_RXNE);
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	3b01      	subs	r3, #1
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	79fa      	ldrb	r2, [r7, #7]
 80042c8:	3a01      	subs	r2, #1
 80042ca:	4935      	ldr	r1, [pc, #212]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 80042cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042d0:	f023 0320 	bic.w	r3, r3, #32
 80042d4:	6013      	str	r3, [r2, #0]
			return STD_TRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e05b      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 80042da:	2300      	movs	r3, #0
 80042dc:	e059      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;
		/*USART_INTERRUPT_IDLE_LINE_DETECTED*/
	case 3:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_IDLE)){
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 80042e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <USART_CheckInterruptAndClear_Bool+0xf4>
			return STD_TRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04c      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e04a      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;
		/*USART_INTERRUPT_CTS*/
	case 4:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_CTS)){
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0a5b      	lsrs	r3, r3, #9
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <USART_CheckInterruptAndClear_Bool+0x112>

			return STD_TRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	e03d      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	e03b      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		/*Not Implemented yet !*/
		break;

		/*USART_INTERRUPT_OVERRUN_ERROR*/
	case 6:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_ORE)){
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	3b01      	subs	r3, #1
 800431e:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 8004320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <USART_CheckInterruptAndClear_Bool+0x130>
			return STD_TRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	e02e      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	e02c      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_NOISE_DETECTED*/
	case 7:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_NF)){
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	3b01      	subs	r3, #1
 800433c:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 800433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <USART_CheckInterruptAndClear_Bool+0x14e>
			return STD_TRUE;
 800434e:	2301      	movs	r3, #1
 8004350:	e01f      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	e01d      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_FRAME_ERROR*/
	case 8:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_FE)){
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	3b01      	subs	r3, #1
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 800435c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <USART_CheckInterruptAndClear_Bool+0x16c>
			return STD_TRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	e010      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	e00e      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

		/*USART_INTERRUPT_PARITY_ERROR*/
	case 9:
		if (STD_TRUE == GET_BIT(USART_ID(Arg_USARTInstanceId_u8)->SR, USART_SR_PE)){
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <USART_CheckInterruptAndClear_Bool+0x19c>)
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <USART_CheckInterruptAndClear_Bool+0x188>
			return STD_TRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	e002      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		else{
			return STD_FALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <USART_CheckInterruptAndClear_Bool+0x18e>
		}
		break;

	}

	return STD_FALSE;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <Utils_TimeoutChecker_Init>:
==================================================
 */
void Utils_TimeoutChecker_Init(
		Utils_TimeoutChecker *Arg_Tout_Utils_TimeoutChecker,
		u32 Arg_TimeoutValueInmS_u32
){
 80043a4:	b5b0      	push	{r4, r5, r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

	Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue=SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32();
 80043ae:	f000 f87d 	bl	80044ac <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>
 80043b2:	eeb0 7a40 	vmov.f32	s14, s0
 80043b6:	eef0 7a60 	vmov.f32	s15, s1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	ed83 7b00 	vstr	d7, [r3]
	Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue+=(f32)Arg_TimeoutValueInmS_u32;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f7fc f850 	bl	800046c <__aeabi_ui2d>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb ff0e 	bl	80001f4 <__adddf3>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	e9c1 2300 	strd	r2, r3, [r1]
	Arg_Tout_Utils_TimeoutChecker->TimeoutValueInMilliSeconds = Arg_TimeoutValueInmS_u32;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]

}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bdb0      	pop	{r4, r5, r7, pc}

080043f0 <Utils_IsTimeoutOccurred_u8>:

u8 Utils_IsTimeoutOccurred_u8(Utils_TimeoutChecker *Arg_Tout_Utils_TimeoutChecker){
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	if (STD_MAX_DELAY == Arg_Tout_Utils_TimeoutChecker->TimeoutValueInMilliSeconds){
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004400:	d101      	bne.n	8004406 <Utils_IsTimeoutOccurred_u8+0x16>
		return STD_FALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	e00e      	b.n	8004424 <Utils_IsTimeoutOccurred_u8+0x34>
	}
	if(SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32() > Arg_Tout_Utils_TimeoutChecker->PreciseDelayValue){
 8004406:	f000 f851 	bl	80044ac <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>
 800440a:	ec51 0b10 	vmov	r0, r1, d0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc fb34 	bl	8000a80 <__aeabi_dcmpgt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <Utils_IsTimeoutOccurred_u8+0x32>
		/*Timeout Occur*/
		return STD_TRUE;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <Utils_IsTimeoutOccurred_u8+0x34>
	}
	return STD_FALSE;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <NVIC_EnableInterrupt_v>:
/*
==================================================
  Start Section --> Implementation
==================================================
*/
void NVIC_EnableInterrupt_v(u8 Arg_InterruptNumber_u8){
 800442c:	b490      	push	{r4, r7}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
	SET_BIT(NVIC->ISER[Arg_InterruptNumber_u8/32], Arg_InterruptNumber_u8%32);
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <NVIC_EnableInterrupt_v+0x3c>)
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	b2d8      	uxtb	r0, r3
 800443e:	4603      	mov	r3, r0
 8004440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004444:	79fa      	ldrb	r2, [r7, #7]
 8004446:	f002 021f 	and.w	r2, r2, #31
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f202 	lsl.w	r2, r1, r2
 8004450:	4614      	mov	r4, r2
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <NVIC_EnableInterrupt_v+0x3c>)
 8004454:	4601      	mov	r1, r0
 8004456:	4323      	orrs	r3, r4
 8004458:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bc90      	pop	{r4, r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000e100 	.word	0xe000e100

0800446c <SCB_EnableFPU_v>:

u16 SCB_GetImplementerId_u16(void){
	return (SCB->CPUID & 0xFF000000)>>24;
}

void SCB_EnableFPU_v(void){
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
#define SCB_FPU *((volatile u32* const)0xE000ED88)
	SCB_FPU |= (0xF<<20);
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <SCB_EnableFPU_v+0x20>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a05      	ldr	r2, [pc, #20]	; (800448c <SCB_EnableFPU_v+0x20>)
 8004476:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800447a:	6013      	str	r3, [r2, #0]
	asm volatile ("dsb 0xF":::"memory");
 800447c:	f3bf 8f4f 	dsb	sy


}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000ed88 	.word	0xe000ed88

08004490 <SysTick_Handler>:
 */
static u32 StaticGlobal_Ticks_u32 = 0;

#if (CONFIG_USE_RTOS==CONFIG_NO_RTOS)

void SysTick_Handler(void){
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
	StaticGlobal_Ticks_u32++;
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <SysTick_Handler+0x18>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a03      	ldr	r2, [pc, #12]	; (80044a8 <SysTick_Handler+0x18>)
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	200004ac 	.word	0x200004ac

080044ac <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32>:
#endif

f32 SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32(void){
 80044ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044b0:	af00      	add	r7, sp, #0
	return (f32)(SYSTICK_GetCurrentTicks_u32()/CONFIG_TICK_TIME_IN_MilliSeconds) + (f32)(SYSTICK->CVR)/((f32)SYSTICK->RVR);
 80044b2:	f000 f82b 	bl	800450c <SYSTICK_GetCurrentTicks_u32>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fb ffd7 	bl	800046c <__aeabi_ui2d>
 80044be:	4604      	mov	r4, r0
 80044c0:	460d      	mov	r5, r1
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32+0x5c>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fb ffd0 	bl	800046c <__aeabi_ui2d>
 80044cc:	4680      	mov	r8, r0
 80044ce:	4689      	mov	r9, r1
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <SYSTICK_GetPreciseCurrentTicksInMilliSeconds_f32+0x5c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb ffc9 	bl	800046c <__aeabi_ui2d>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fc f967 	bl	80007b4 <__aeabi_ddiv>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fb fe81 	bl	80001f4 <__adddf3>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80044fa:	eeb0 0a47 	vmov.f32	s0, s14
 80044fe:	eef0 0a67 	vmov.f32	s1, s15
 8004502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <SYSTICK_GetCurrentTicks_u32>:

u32 SYSTICK_GetCurrentTicks_u32(void){
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
	return StaticGlobal_Ticks_u32;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <SYSTICK_GetCurrentTicks_u32+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	200004ac 	.word	0x200004ac
 8004524:	00000000 	.word	0x00000000

08004528 <SYSTICK_Init_v>:



void SYSTICK_Init_v(void){
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
#if CONFIG_SYSTICK_USE_EXTERNAL_CLOCK
	CLEAR_BIT(SYSTICK->CSR, SYSTICK_CSR_CLKSOURCE);
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	6013      	str	r3, [r2, #0]
#else
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_CLKSOURCE);
#endif

	f32 Local_MaxTickTime = 0xffffff / (RCC_GetCortexSystemTimerFrequency_f32()*1000000);
 800453a:	f7ff fa15 	bl	8003968 <RCC_GetCortexSystemTimerFrequency_f32>
 800453e:	ec51 0b10 	vmov	r0, r1, d0
 8004542:	a323      	add	r3, pc, #140	; (adr r3, 80045d0 <SYSTICK_Init_v+0xa8>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f80a 	bl	8000560 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8004554:	4921      	ldr	r1, [pc, #132]	; (80045dc <SYSTICK_Init_v+0xb4>)
 8004556:	f7fc f92d 	bl	80007b4 <__aeabi_ddiv>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	e9c7 2300 	strd	r2, r3, [r7]
	if (CONFIG_TICK_TIME_IN_MilliSeconds > Local_MaxTickTime){
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <SYSTICK_Init_v+0xb8>)
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f7fc fa6a 	bl	8000a44 <__aeabi_dcmplt>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d000      	beq.n	8004578 <SYSTICK_Init_v+0x50>
		while(1){
 8004576:	e7fe      	b.n	8004576 <SYSTICK_Init_v+0x4e>
			 * */
		}
	}

	/*Set Systick Reload Value*/
	SYSTICK->RVR = (RCC_GetCortexSystemTimerFrequency_f32()*1000*CONFIG_TICK_TIME_IN_MilliSeconds)-1;
 8004578:	f7ff f9f6 	bl	8003968 <RCC_GetCortexSystemTimerFrequency_f32>
 800457c:	ec51 0b10 	vmov	r0, r1, d0
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <SYSTICK_Init_v+0xbc>)
 8004586:	f7fb ffeb 	bl	8000560 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <SYSTICK_Init_v+0xb8>)
 8004598:	f7fb fe2a 	bl	80001f0 <__aeabi_dsub>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fc fa75 	bl	8000a94 <__aeabi_d2uiz>
 80045aa:	4603      	mov	r3, r0
 80045ac:	6063      	str	r3, [r4, #4]
	/*Enable SYSTICK Interrupt*/
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_TICKINT);
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	6013      	str	r3, [r2, #0]
	/*Enable SYSTICK*/
	SET_BIT(SYSTICK->CSR, SYSTICK_CSR_ENABLE);
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <SYSTICK_Init_v+0xb0>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6013      	str	r3, [r2, #0]


}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd90      	pop	{r4, r7, pc}
 80045ce:	bf00      	nop
 80045d0:	00000000 	.word	0x00000000
 80045d4:	412e8480 	.word	0x412e8480
 80045d8:	e000e010 	.word	0xe000e010
 80045dc:	416fffff 	.word	0x416fffff
 80045e0:	3ff00000 	.word	0x3ff00000
 80045e4:	408f4000 	.word	0x408f4000

080045e8 <SystemInit>:
/*
==================================================
  Start Section --> Function Definitions
==================================================
*/
void SystemInit(void){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	/*Configure FPU*/
#if CONFIG_USE_HARDWARE_FPU==1
	SCB_EnableFPU_v();
 80045ec:	f7ff ff3e 	bl	800446c <SCB_EnableFPU_v>
#endif
	/*Configure RCC*/
	RCC_InitClock_v();
 80045f0:	f7ff f8cc 	bl	800378c <RCC_InitClock_v>
	/*Init Systick*/
#if CONFIG_USE_RTOS==CONFIG_NO_RTOS
	SYSTICK_Init_v();
 80045f4:	f7ff ff98 	bl	8004528 <SYSTICK_Init_v>
#endif
	/*Init Interrupt Handlers*/
	InterruptHandler_Init_v();
 80045f8:	f7fe f906 	bl	8002808 <InterruptHandler_Init_v>

	/*Configure CRC*/
}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}

08004600 <SendCANFrame>:

static USART_Cfg GS_COM_USART_Cfg;



void SendCANFrame(void){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af02      	add	r7, sp, #8
	u16 L_Command_u8 = (u16) UITxSerialDataFrame.Buffer[0];
 8004606:	4b17      	ldr	r3, [pc, #92]	; (8004664 <SendCANFrame+0x64>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	80fb      	strh	r3, [r7, #6]
	u16 L_ID_u8 = (u16) UITxSerialDataFrame.Buffer[1];
 800460c:	4b15      	ldr	r3, [pc, #84]	; (8004664 <SendCANFrame+0x64>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	80bb      	strh	r3, [r7, #4]

	GS_TransmitMessage_CAN_TxData.ID = L_ID_u8 + L_Command_u8;
 8004612:	88ba      	ldrh	r2, [r7, #4]
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	4413      	add	r3, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <SendCANFrame+0x68>)
 800461c:	601a      	str	r2, [r3, #0]

	GS_TransmitMessage_CAN_TxData.DataPtr = (u8 *)&UITxSerialDataFrame.Buffer_u8[8];
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <SendCANFrame+0x68>)
 8004620:	4a12      	ldr	r2, [pc, #72]	; (800466c <SendCANFrame+0x6c>)
 8004622:	605a      	str	r2, [r3, #4]
	/*Send CAN Frame which received from UART*/
	CAN_SendData_v(&GS_COM_CAN_Cfg, &GS_TransmitMessage_CAN_TxData, STD_MAX_DELAY, NULL);
 8004624:	2300      	movs	r3, #0
 8004626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800462a:	490f      	ldr	r1, [pc, #60]	; (8004668 <SendCANFrame+0x68>)
 800462c:	4810      	ldr	r0, [pc, #64]	; (8004670 <SendCANFrame+0x70>)
 800462e:	f7fc fcd3 	bl	8000fd8 <CAN_SendData_v>
	/*Wait to receive echo.*/
	CAN_Receive_v(&GS_COM_CAN_Cfg, &GS_ReceiveMessage_CAN_RxData, STD_MAX_DELAY, NULL);
 8004632:	2300      	movs	r3, #0
 8004634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004638:	490e      	ldr	r1, [pc, #56]	; (8004674 <SendCANFrame+0x74>)
 800463a:	480d      	ldr	r0, [pc, #52]	; (8004670 <SendCANFrame+0x70>)
 800463c:	f7fd f970 	bl	8001920 <CAN_Receive_v>
	/*Send echo to USART*/
	USART_SendU8ArrayPooling_v(
			&GS_COM_USART_Cfg,
			GS_ReceiveMessage_CAN_RxData.ReceivedData,
			GS_ReceiveMessage_CAN_RxData.DataLength,
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <SendCANFrame+0x74>)
 8004642:	7b9b      	ldrb	r3, [r3, #14]
 8004644:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004648:	b2db      	uxtb	r3, r3
	USART_SendU8ArrayPooling_v(
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004654:	4908      	ldr	r1, [pc, #32]	; (8004678 <SendCANFrame+0x78>)
 8004656:	4809      	ldr	r0, [pc, #36]	; (800467c <SendCANFrame+0x7c>)
 8004658:	f7ff fda0 	bl	800419c <USART_SendU8ArrayPooling_v>
			STD_MAX_DELAY,
			NULL);
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200004b0 	.word	0x200004b0
 8004668:	200004d8 	.word	0x200004d8
 800466c:	200004b8 	.word	0x200004b8
 8004670:	200004c8 	.word	0x200004c8
 8004674:	200004e4 	.word	0x200004e4
 8004678:	200004e8 	.word	0x200004e8
 800467c:	200004f4 	.word	0x200004f4

08004680 <main>:

int main(){
 8004680:	b580      	push	{r7, lr}
 8004682:	b090      	sub	sp, #64	; 0x40
 8004684:	af00      	add	r7, sp, #0
	/*Configure CAN that will send/receive message to/from USART*/
	GS_COM_CAN_Cfg.TimeTriggeredEn = STD_DIASBLE;
 8004686:	4a5e      	ldr	r2, [pc, #376]	; (8004800 <main+0x180>)
 8004688:	7813      	ldrb	r3, [r2, #0]
 800468a:	f36f 0300 	bfc	r3, #0, #1
 800468e:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.AutoBusOffEn = STD_DIASBLE;
 8004690:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <main+0x180>)
 8004692:	7813      	ldrb	r3, [r2, #0]
 8004694:	f36f 0341 	bfc	r3, #1, #1
 8004698:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.AutoWakeUpEn = STD_DIASBLE;
 800469a:	4a59      	ldr	r2, [pc, #356]	; (8004800 <main+0x180>)
 800469c:	7813      	ldrb	r3, [r2, #0]
 800469e:	f36f 0382 	bfc	r3, #2, #1
 80046a2:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.AutoReTransmissionEn = STD_ENABLE;
 80046a4:	4a56      	ldr	r2, [pc, #344]	; (8004800 <main+0x180>)
 80046a6:	7813      	ldrb	r3, [r2, #0]
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.ReceiveFifoLockOnOverrunEn = STD_DIASBLE;
 80046ae:	4a54      	ldr	r2, [pc, #336]	; (8004800 <main+0x180>)
 80046b0:	7813      	ldrb	r3, [r2, #0]
 80046b2:	f36f 1304 	bfc	r3, #4, #1
 80046b6:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.TransmitFifoPriority = CAN_TRANSMIT_FIFO_PRIORITY_BY_MSG_ID;
 80046b8:	4a51      	ldr	r2, [pc, #324]	; (8004800 <main+0x180>)
 80046ba:	7813      	ldrb	r3, [r2, #0]
 80046bc:	f36f 1345 	bfc	r3, #5, #1
 80046c0:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.OperatingMode = CAN_OPERATING_MODE_NORMAL;
 80046c2:	4a4f      	ldr	r2, [pc, #316]	; (8004800 <main+0x180>)
 80046c4:	7813      	ldrb	r3, [r2, #0]
 80046c6:	f36f 1387 	bfc	r3, #6, #2
 80046ca:	7013      	strb	r3, [r2, #0]
	GS_COM_CAN_Cfg.GPIOInstanceId = CONFIG_CAN_GPIO_ID;
 80046cc:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <main+0x180>)
 80046ce:	2242      	movs	r2, #66	; 0x42
 80046d0:	71da      	strb	r2, [r3, #7]
	GS_COM_CAN_Cfg.GPIOPins = (1<<CONFIG_CAN_RxPIN) | (1<<CONFIG_CAN_TxPIN);
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <main+0x180>)
 80046d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80046d8:	811a      	strh	r2, [r3, #8]
	GS_COM_CAN_Cfg.InstanceId = CONFIG_CAN_INSTANCE_ID;
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <main+0x180>)
 80046dc:	2201      	movs	r2, #1
 80046de:	705a      	strb	r2, [r3, #1]

	GS_COM_CAN_Cfg.BaudRatePrescaller = CONFIG_CAN_BAUDRATE_PRESCALLER;
 80046e0:	4b47      	ldr	r3, [pc, #284]	; (8004800 <main+0x180>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	805a      	strh	r2, [r3, #2]
	GS_COM_CAN_Cfg.TimeSegment_1 = CONFIG_CAN_TIME_SEGMENT_1;
 80046e6:	4b46      	ldr	r3, [pc, #280]	; (8004800 <main+0x180>)
 80046e8:	220d      	movs	r2, #13
 80046ea:	711a      	strb	r2, [r3, #4]
	GS_COM_CAN_Cfg.TimeSegment_2 = CONFIG_CAN_TIME_SEGMENT_2;
 80046ec:	4b44      	ldr	r3, [pc, #272]	; (8004800 <main+0x180>)
 80046ee:	2202      	movs	r2, #2
 80046f0:	715a      	strb	r2, [r3, #5]
	GS_COM_CAN_Cfg.ResychronizationJump = CONFIG_CAN_RESYNCHRONIZATION_JUMP;
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <main+0x180>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	719a      	strb	r2, [r3, #6]

	CAN_Config_v(&GS_COM_CAN_Cfg);
 80046f8:	4841      	ldr	r0, [pc, #260]	; (8004800 <main+0x180>)
 80046fa:	f7fc f9eb 	bl	8000ad4 <CAN_Config_v>

	/*Configure CAN header of message that will be sent by CAN that contains received USART messages*/
	GS_TransmitMessage_CAN_TxData.DataLength = ARRAY_LENGTH(GS_TxData_u8);
 80046fe:	4b41      	ldr	r3, [pc, #260]	; (8004804 <main+0x184>)
 8004700:	2208      	movs	r2, #8
 8004702:	721a      	strb	r2, [r3, #8]
	GS_TransmitMessage_CAN_TxData.FrameType = CAN_Data_Frame;
 8004704:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <main+0x184>)
 8004706:	2200      	movs	r2, #0
 8004708:	729a      	strb	r2, [r3, #10]
	GS_TransmitMessage_CAN_TxData.IdType = CAN_Standard_Id;
 800470a:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <main+0x184>)
 800470c:	2200      	movs	r2, #0
 800470e:	725a      	strb	r2, [r3, #9]
	GS_TransmitMessage_CAN_TxData.DataPtr = GS_TxData_u8;
 8004710:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <main+0x184>)
 8004712:	4a3d      	ldr	r2, [pc, #244]	; (8004808 <main+0x188>)
 8004714:	605a      	str	r2, [r3, #4]


	CAN_FilterConfig L_EchoFilter_CAN_FilterConfig = {0};
 8004716:	f107 0320 	add.w	r3, r7, #32
 800471a:	2220      	movs	r2, #32
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8c6 	bl	80048b0 <memset>
	L_EchoFilter_CAN_FilterConfig.FilterType = CAN_FILTER_TYPE_4ID16;
 8004724:	2303      	movs	r3, #3
 8004726:	f887 3020 	strb.w	r3, [r7, #32]
	L_EchoFilter_CAN_FilterConfig.FilterId = CONFIG_CAN_FILTER_ID;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	L_EchoFilter_CAN_FilterConfig.ID1 = CONFIG_CAN_ECHO_MESSAGE_ID;
 8004730:	2342      	movs	r3, #66	; 0x42
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
	L_EchoFilter_CAN_FilterConfig.FIFONumber = CAN_FILTER_FIFONUMBER_1;
 8004734:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004738:	f36f 0300 	bfc	r3, #0, #1
 800473c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	L_EchoFilter_CAN_FilterConfig.IdType = CAN_Standard_Id;
 8004740:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004744:	f36f 0341 	bfc	r3, #1, #1
 8004748:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	L_EchoFilter_CAN_FilterConfig.FrameType = CAN_Data_Frame;
 800474c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004750:	f36f 0382 	bfc	r3, #2, #1
 8004754:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CAN_AddRxFilter_v(&GS_COM_CAN_Cfg, &L_EchoFilter_CAN_FilterConfig);
 8004758:	f107 0320 	add.w	r3, r7, #32
 800475c:	4619      	mov	r1, r3
 800475e:	4828      	ldr	r0, [pc, #160]	; (8004800 <main+0x180>)
 8004760:	f7fc fe3e 	bl	80013e0 <CAN_AddRxFilter_v>

	/*Configure USART*/
	GS_COM_USART_Cfg.BaudRate = CONFIG_USART_COMMUNICATION_BAUDRATE;
 8004764:	4b29      	ldr	r3, [pc, #164]	; (800480c <main+0x18c>)
 8004766:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800476a:	611a      	str	r2, [r3, #16]
	GS_COM_USART_Cfg.GPIOInstanceId = CONFIG_USART_GPIO;
 800476c:	4b27      	ldr	r3, [pc, #156]	; (800480c <main+0x18c>)
 800476e:	2241      	movs	r2, #65	; 0x41
 8004770:	72da      	strb	r2, [r3, #11]
	GS_COM_USART_Cfg.GPIOPins = (1<<CONFIG_USART_TRANSMIT_PIN)|(1<<CONFIG_USART_RECEIVE_PIN);
 8004772:	4b26      	ldr	r3, [pc, #152]	; (800480c <main+0x18c>)
 8004774:	220c      	movs	r2, #12
 8004776:	819a      	strh	r2, [r3, #12]
	GS_COM_USART_Cfg.InstanceId = CONFIG_USART_INSTANCE_ID;
 8004778:	4b24      	ldr	r3, [pc, #144]	; (800480c <main+0x18c>)
 800477a:	2202      	movs	r2, #2
 800477c:	729a      	strb	r2, [r3, #10]
	GS_COM_USART_Cfg.TransferDirection = USART_TRANSMIT | USART_RECEIVE;
 800477e:	4a23      	ldr	r2, [pc, #140]	; (800480c <main+0x18c>)
 8004780:	7813      	ldrb	r3, [r2, #0]
 8004782:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004786:	7013      	strb	r3, [r2, #0]
	GS_COM_USART_Cfg.DMA = USART_DMA_RECEIVE;
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <main+0x18c>)
 800478a:	7853      	ldrb	r3, [r2, #1]
 800478c:	2102      	movs	r1, #2
 800478e:	f361 0301 	bfi	r3, r1, #0, #2
 8004792:	7053      	strb	r3, [r2, #1]
	USART_Config_v(&GS_COM_USART_Cfg);
 8004794:	481d      	ldr	r0, [pc, #116]	; (800480c <main+0x18c>)
 8004796:	f7ff f9eb 	bl	8003b70 <USART_Config_v>

	/*Configure DMA*/
	DMA_Cfg L_DMA_Configurations = {0};
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
 80047a8:	615a      	str	r2, [r3, #20]
 80047aa:	619a      	str	r2, [r3, #24]

	L_DMA_Configurations.CircularMode = DMA_CIRCULAR_MODE_ENABLE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	733b      	strb	r3, [r7, #12]
	L_DMA_Configurations.DataSize = DMA_DATA_SIZE_MEM_WORD_PERPH_BYTE;
 80047b0:	2306      	movs	r3, #6
 80047b2:	71bb      	strb	r3, [r7, #6]
	L_DMA_Configurations.IncrementMode = DMA_INCREMENT_MODE_INCR_MEM_FIXED_PERPH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	73bb      	strb	r3, [r7, #14]
	L_DMA_Configurations.InstanceId = CONFIG_DMA_INSTANCE_ID;
 80047b8:	2301      	movs	r3, #1
 80047ba:	713b      	strb	r3, [r7, #4]

	L_DMA_Configurations.Interrupt = DMA_INTERRUPT_TRANSFER_COMPLETE;
 80047bc:	2320      	movs	r3, #32
 80047be:	717b      	strb	r3, [r7, #5]
	L_DMA_Configurations.MemoryAddress = (u32)&UITxSerialDataFrame.Buffer;
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <main+0x190>)
 80047c2:	61bb      	str	r3, [r7, #24]
	L_DMA_Configurations.PeripheralAddress = USART_GetAdressForDMA_u32(&GS_COM_USART_Cfg);
 80047c4:	4811      	ldr	r0, [pc, #68]	; (800480c <main+0x18c>)
 80047c6:	f7ff fd09 	bl	80041dc <USART_GetAdressForDMA_u32>
 80047ca:	4603      	mov	r3, r0
 80047cc:	617b      	str	r3, [r7, #20]
	L_DMA_Configurations.Size = 4*ARRAY_LENGTH(UITxSerialDataFrame.Buffer);
 80047ce:	2310      	movs	r3, #16
 80047d0:	823b      	strh	r3, [r7, #16]
	L_DMA_Configurations.TransferDir = DMA_TRANSFER_DIR_PERPH_TO_MEM;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
	DMA_Config_v(&L_DMA_Configurations, CONFIG_DMA_CHANNEL_STREAM);
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2145      	movs	r1, #69	; 0x45
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd f9f4 	bl	8001bc8 <DMA_Config_v>

	InterruptHandler_SetDMACallback_v(CONFIG_DMA_INSTANCE_ID, CONFIG_DMA_STREAM_NUMBER, DMA_INTERRUPT_TRANSFER_COMPLETE, SendCANFrame);
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <main+0x194>)
 80047e2:	2220      	movs	r2, #32
 80047e4:	2105      	movs	r1, #5
 80047e6:	2001      	movs	r0, #1
 80047e8:	f7fe f880 	bl	80028ec <InterruptHandler_SetDMACallback_v>

	DMA_EnableDMA_v(&L_DMA_Configurations, CONFIG_DMA_CHANNEL_STREAM);
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	2145      	movs	r1, #69	; 0x45
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fd fcd1 	bl	8002198 <DMA_EnableDMA_v>
	USART_EnableUSART_v(&GS_COM_USART_Cfg);
 80047f6:	4805      	ldr	r0, [pc, #20]	; (800480c <main+0x18c>)
 80047f8:	f7ff fc34 	bl	8004064 <USART_EnableUSART_v>



	while(1){
 80047fc:	e7fe      	b.n	80047fc <main+0x17c>
 80047fe:	bf00      	nop
 8004800:	200004c8 	.word	0x200004c8
 8004804:	200004d8 	.word	0x200004d8
 8004808:	200004c0 	.word	0x200004c0
 800480c:	200004f4 	.word	0x200004f4
 8004810:	200004b0 	.word	0x200004b0
 8004814:	08004601 	.word	0x08004601

08004818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004818:	480d      	ldr	r0, [pc, #52]	; (8004850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800481a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800481c:	f7ff fee4 	bl	80045e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004820:	480c      	ldr	r0, [pc, #48]	; (8004854 <LoopForever+0x6>)
  ldr r1, =_edata
 8004822:	490d      	ldr	r1, [pc, #52]	; (8004858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <LoopForever+0xe>)
  movs r3, #0
 8004826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004828:	e002      	b.n	8004830 <LoopCopyDataInit>

0800482a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800482a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800482c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800482e:	3304      	adds	r3, #4

08004830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004834:	d3f9      	bcc.n	800482a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004838:	4c0a      	ldr	r4, [pc, #40]	; (8004864 <LoopForever+0x16>)
  movs r3, #0
 800483a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800483c:	e001      	b.n	8004842 <LoopFillZerobss>

0800483e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800483e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004840:	3204      	adds	r2, #4

08004842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004844:	d3fb      	bcc.n	800483e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004846:	f000 f80f 	bl	8004868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800484a:	f7ff ff19 	bl	8004680 <main>

0800484e <LoopForever>:

LoopForever:
  b LoopForever
 800484e:	e7fe      	b.n	800484e <LoopForever>
  ldr   r0, =_estack
 8004850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004858:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800485c:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8004860:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004864:	2000050c 	.word	0x2000050c

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4d0d      	ldr	r5, [pc, #52]	; (80048a0 <__libc_init_array+0x38>)
 800486c:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <__libc_init_array+0x3c>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	2600      	movs	r6, #0
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	4d0b      	ldr	r5, [pc, #44]	; (80048a8 <__libc_init_array+0x40>)
 800487a:	4c0c      	ldr	r4, [pc, #48]	; (80048ac <__libc_init_array+0x44>)
 800487c:	f000 f820 	bl	80048c0 <_init>
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	2600      	movs	r6, #0
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	f855 3b04 	ldr.w	r3, [r5], #4
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	08004964 	.word	0x08004964
 80048a4:	08004964 	.word	0x08004964
 80048a8:	08004964 	.word	0x08004964
 80048ac:	08004968 	.word	0x08004968

080048b0 <memset>:
 80048b0:	4402      	add	r2, r0
 80048b2:	4603      	mov	r3, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
